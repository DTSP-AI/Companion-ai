"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit";
exports.ids = ["vendor-chunks/@livekit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@livekit/components-styles/dist/general/index.css":
/*!************************************************************************!*\
  !*** ./node_modules/@livekit/components-styles/dist/general/index.css ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"26bee9cff550\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1zdHlsZXMvZGlzdC9nZW5lcmFsL2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXN0eWxlcy9kaXN0L2dlbmVyYWwvaW5kZXguY3NzPzkyZmUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyNmJlZTljZmY1NTBcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livekit/components-styles/dist/general/index.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livekit/components-core/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@livekit/components-core/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataTopic: () => (/* binding */ DataTopic),\n/* harmony export */   GRID_LAYOUTS: () => (/* binding */ GRID_LAYOUTS),\n/* harmony export */   PIN_DEFAULT_STATE: () => (/* binding */ PIN_DEFAULT_STATE),\n/* harmony export */   WIDGET_DEFAULT_STATE: () => (/* binding */ WIDGET_DEFAULT_STATE),\n/* harmony export */   activeSpeakerObserver: () => (/* binding */ activeSpeakerObserver),\n/* harmony export */   addMediaTimestampToTranscription: () => (/* binding */ addMediaTimestampToTranscription),\n/* harmony export */   allParticipantEvents: () => (/* binding */ allParticipantEvents),\n/* harmony export */   allParticipantRoomEvents: () => (/* binding */ allParticipantRoomEvents),\n/* harmony export */   allRemoteParticipantEvents: () => (/* binding */ allRemoteParticipantEvents),\n/* harmony export */   allRemoteParticipantRoomEvents: () => (/* binding */ allRemoteParticipantRoomEvents),\n/* harmony export */   attachIfSubscribed: () => (/* binding */ attachIfSubscribed),\n/* harmony export */   computeMenuPosition: () => (/* binding */ computeMenuPosition),\n/* harmony export */   connectedParticipantObserver: () => (/* binding */ connectedParticipantObserver),\n/* harmony export */   connectedParticipantsObserver: () => (/* binding */ connectedParticipantsObserver),\n/* harmony export */   connectionStateObserver: () => (/* binding */ connectionStateObserver),\n/* harmony export */   createActiveDeviceObservable: () => (/* binding */ createActiveDeviceObservable),\n/* harmony export */   createConnectionQualityObserver: () => (/* binding */ createConnectionQualityObserver),\n/* harmony export */   createDataObserver: () => (/* binding */ createDataObserver),\n/* harmony export */   createDefaultGrammar: () => (/* binding */ createDefaultGrammar),\n/* harmony export */   createEmailRegExp: () => (/* binding */ createEmailRegExp),\n/* harmony export */   createInteractingObservable: () => (/* binding */ createInteractingObservable),\n/* harmony export */   createIsSpeakingObserver: () => (/* binding */ createIsSpeakingObserver),\n/* harmony export */   createMediaDeviceObserver: () => (/* binding */ createMediaDeviceObserver),\n/* harmony export */   createTrackObserver: () => (/* binding */ createTrackObserver),\n/* harmony export */   createUrlRegExp: () => (/* binding */ createUrlRegExp),\n/* harmony export */   cssPrefix: () => (/* binding */ cssPrefix),\n/* harmony export */   dedupeSegments: () => (/* binding */ dedupeSegments),\n/* harmony export */   defaultUserChoices: () => (/* binding */ defaultUserChoices),\n/* harmony export */   didActiveSegmentsChange: () => (/* binding */ didActiveSegmentsChange),\n/* harmony export */   encryptionStatusObservable: () => (/* binding */ encryptionStatusObservable),\n/* harmony export */   getActiveTranscriptionSegments: () => (/* binding */ getActiveTranscriptionSegments),\n/* harmony export */   getScrollBarWidth: () => (/* binding */ getScrollBarWidth),\n/* harmony export */   getTrackByIdentifier: () => (/* binding */ getTrackByIdentifier),\n/* harmony export */   getTrackReferenceId: () => (/* binding */ getTrackReferenceId),\n/* harmony export */   getTrackReferenceSource: () => (/* binding */ getTrackReferenceSource),\n/* harmony export */   isEqualTrackRef: () => (/* binding */ isEqualTrackRef),\n/* harmony export */   isLocal: () => (/* binding */ isLocal),\n/* harmony export */   isMobileBrowser: () => (/* binding */ isMobileBrowser),\n/* harmony export */   isParticipantTrackReferencePinned: () => (/* binding */ isParticipantTrackReferencePinned),\n/* harmony export */   isPlaceholderReplacement: () => (/* binding */ isPlaceholderReplacement),\n/* harmony export */   isRemote: () => (/* binding */ isRemote),\n/* harmony export */   isSourceWitOptions: () => (/* binding */ isSourceWitOptions),\n/* harmony export */   isSourcesWithOptions: () => (/* binding */ isSourcesWithOptions),\n/* harmony export */   isTrackReference: () => (/* binding */ isTrackReference),\n/* harmony export */   isTrackReferencePinned: () => (/* binding */ isTrackReferencePinned),\n/* harmony export */   isTrackReferencePlaceholder: () => (/* binding */ isTrackReferencePlaceholder),\n/* harmony export */   isWeb: () => (/* binding */ isWeb),\n/* harmony export */   loadUserChoices: () => (/* binding */ loadUserChoices),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mutedObserver: () => (/* binding */ mutedObserver),\n/* harmony export */   observeParticipantEvents: () => (/* binding */ observeParticipantEvents),\n/* harmony export */   observeParticipantMedia: () => (/* binding */ observeParticipantMedia),\n/* harmony export */   observeRoomEvents: () => (/* binding */ observeRoomEvents),\n/* harmony export */   observeTrackEvents: () => (/* binding */ observeTrackEvents),\n/* harmony export */   participantAttributesObserver: () => (/* binding */ participantAttributesObserver),\n/* harmony export */   participantByIdentifierObserver: () => (/* binding */ participantByIdentifierObserver),\n/* harmony export */   participantEventSelector: () => (/* binding */ participantEventSelector),\n/* harmony export */   participantInfoObserver: () => (/* binding */ participantInfoObserver),\n/* harmony export */   participantPermissionObserver: () => (/* binding */ participantPermissionObserver),\n/* harmony export */   participantTrackEvents: () => (/* binding */ participantTrackEvents),\n/* harmony export */   participantTracksObservable: () => (/* binding */ participantTracksObservable),\n/* harmony export */   recordingStatusObservable: () => (/* binding */ recordingStatusObservable),\n/* harmony export */   roomAudioPlaybackAllowedObservable: () => (/* binding */ roomAudioPlaybackAllowedObservable),\n/* harmony export */   roomEventSelector: () => (/* binding */ roomEventSelector),\n/* harmony export */   roomInfoObserver: () => (/* binding */ roomInfoObserver),\n/* harmony export */   roomObserver: () => (/* binding */ roomObserver),\n/* harmony export */   roomVideoPlaybackAllowedObservable: () => (/* binding */ roomVideoPlaybackAllowedObservable),\n/* harmony export */   saveUserChoices: () => (/* binding */ saveUserChoices),\n/* harmony export */   screenShareObserver: () => (/* binding */ screenShareObserver),\n/* harmony export */   selectGridLayout: () => (/* binding */ selectGridLayout),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   setDifference: () => (/* binding */ setDifference),\n/* harmony export */   setLogExtension: () => (/* binding */ setLogExtension),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setupChat: () => (/* binding */ setupChat),\n/* harmony export */   setupChatToggle: () => (/* binding */ setupChatToggle),\n/* harmony export */   setupClearPinButton: () => (/* binding */ setupClearPinButton),\n/* harmony export */   setupConnectionQualityIndicator: () => (/* binding */ setupConnectionQualityIndicator),\n/* harmony export */   setupDataMessageHandler: () => (/* binding */ setupDataMessageHandler),\n/* harmony export */   setupDeviceSelector: () => (/* binding */ setupDeviceSelector),\n/* harmony export */   setupDisconnectButton: () => (/* binding */ setupDisconnectButton),\n/* harmony export */   setupFocusToggle: () => (/* binding */ setupFocusToggle),\n/* harmony export */   setupLiveKitRoom: () => (/* binding */ setupLiveKitRoom),\n/* harmony export */   setupManualToggle: () => (/* binding */ setupManualToggle),\n/* harmony export */   setupMediaToggle: () => (/* binding */ setupMediaToggle),\n/* harmony export */   setupMediaTrack: () => (/* binding */ setupMediaTrack),\n/* harmony export */   setupParticipantName: () => (/* binding */ setupParticipantName),\n/* harmony export */   setupParticipantTile: () => (/* binding */ setupParticipantTile),\n/* harmony export */   setupStartAudio: () => (/* binding */ setupStartAudio),\n/* harmony export */   setupStartVideo: () => (/* binding */ setupStartVideo),\n/* harmony export */   setupTrackMutedIndicator: () => (/* binding */ setupTrackMutedIndicator),\n/* harmony export */   sortParticipants: () => (/* binding */ sortParticipants),\n/* harmony export */   sortTrackReferences: () => (/* binding */ sortTrackReferences),\n/* harmony export */   supportsScreenSharing: () => (/* binding */ supportsScreenSharing),\n/* harmony export */   tokenize: () => (/* binding */ tokenize),\n/* harmony export */   trackEventSelector: () => (/* binding */ trackEventSelector),\n/* harmony export */   trackObservable: () => (/* binding */ trackObservable),\n/* harmony export */   trackReferencesObservable: () => (/* binding */ trackReferencesObservable),\n/* harmony export */   trackSyncTimeObserver: () => (/* binding */ trackSyncTimeObserver),\n/* harmony export */   trackTranscriptionObserver: () => (/* binding */ trackTranscriptionObserver),\n/* harmony export */   updatePages: () => (/* binding */ updatePages),\n/* harmony export */   wasClickOutside: () => (/* binding */ wasClickOutside)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/scan.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/timeout.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/constants.ts\nvar cssPrefix = \"lk\";\n\n// src/utils.ts\n\n\n// src/track-reference/track-reference.types.ts\nfunction isTrackReference(trackReference) {\n  if (typeof trackReference === \"undefined\") {\n    return false;\n  }\n  return isTrackReferenceSubscribed(trackReference) || isTrackReferencePublished(trackReference);\n}\nfunction isTrackReferenceSubscribed(trackReference) {\n  var _a;\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"track\") && typeof ((_a = trackReference.publication) == null ? void 0 : _a.track) !== \"undefined\";\n}\nfunction isTrackReferencePublished(trackReference) {\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"publication\") && typeof trackReference.publication !== \"undefined\";\n}\nfunction isTrackReferencePlaceholder(trackReference) {\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && typeof trackReference.publication === \"undefined\";\n}\n\n// src/track-reference/track-reference.utils.ts\nfunction getTrackReferenceId(trackReference) {\n  if (typeof trackReference === \"string\" || typeof trackReference === \"number\") {\n    return `${trackReference}`;\n  } else if (isTrackReferencePlaceholder(trackReference)) {\n    return `${trackReference.participant.identity}_${trackReference.source}_placeholder`;\n  } else if (isTrackReference(trackReference)) {\n    return `${trackReference.participant.identity}_${trackReference.publication.source}_${trackReference.publication.trackSid}`;\n  } else {\n    throw new Error(`Can't generate a id for the given track reference: ${trackReference}`);\n  }\n}\nfunction getTrackReferenceSource(trackReference) {\n  if (isTrackReference(trackReference)) {\n    return trackReference.publication.source;\n  } else {\n    return trackReference.source;\n  }\n}\nfunction isEqualTrackRef(a, b) {\n  if (a === void 0 || b === void 0) {\n    return false;\n  }\n  if (isTrackReference(a) && isTrackReference(b)) {\n    return a.publication.trackSid === b.publication.trackSid;\n  } else {\n    return getTrackReferenceId(a) === getTrackReferenceId(b);\n  }\n}\nfunction isTrackReferencePinned(trackReference, pinState) {\n  if (typeof pinState === \"undefined\") {\n    return false;\n  }\n  if (isTrackReference(trackReference)) {\n    return pinState.some(\n      (pinnedTrackReference) => pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReference(pinnedTrackReference) && pinnedTrackReference.publication.trackSid === trackReference.publication.trackSid\n    );\n  } else if (isTrackReferencePlaceholder(trackReference)) {\n    return pinState.some(\n      (pinnedTrackReference) => pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReferencePlaceholder(pinnedTrackReference) && pinnedTrackReference.source === trackReference.source\n    );\n  } else {\n    return false;\n  }\n}\nfunction isPlaceholderReplacement(currentTrackRef, nextTrackRef) {\n  return isTrackReferencePlaceholder(currentTrackRef) && isTrackReference(nextTrackRef) && nextTrackRef.participant.identity === currentTrackRef.participant.identity && nextTrackRef.source === currentTrackRef.source;\n}\n\n// src/utils.ts\nfunction isLocal(p) {\n  return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant;\n}\nfunction isRemote(p) {\n  return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.RemoteParticipant;\n}\nvar attachIfSubscribed = (publication, element) => {\n  if (!publication) return;\n  const { isSubscribed, track } = publication;\n  if (element && track) {\n    if (isSubscribed) {\n      track.attach(element);\n    } else {\n      track.detach(element);\n    }\n  }\n};\nfunction isParticipantTrackReferencePinned(trackRef, pinState) {\n  if (pinState === void 0) {\n    return false;\n  }\n  return pinState.some((pinnedTrackRef) => isEqualTrackRef(pinnedTrackRef, trackRef));\n}\nfunction getScrollBarWidth() {\n  const inner = document.createElement(\"p\");\n  inner.style.width = \"100%\";\n  inner.style.height = \"200px\";\n  const outer = document.createElement(\"div\");\n  outer.style.position = \"absolute\";\n  outer.style.top = \"0px\";\n  outer.style.left = \"0px\";\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"200px\";\n  outer.style.height = \"150px\";\n  outer.style.overflow = \"hidden\";\n  outer.appendChild(inner);\n  document.body.appendChild(outer);\n  const w1 = inner.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  let w2 = inner.offsetWidth;\n  if (w1 === w2) {\n    w2 = outer.clientWidth;\n  }\n  document.body.removeChild(outer);\n  const scrollBarWidth = w1 - w2;\n  return scrollBarWidth;\n}\n\n// src/helper/detectMobileBrowser.ts\nfunction isWeb() {\n  return typeof document !== \"undefined\";\n}\nfunction isMobileBrowser() {\n  return isWeb() ? /Mobi/i.test(window.navigator.userAgent) : false;\n}\n\n// src/helper/url-regex.ts\nfunction createUrlRegExp(options) {\n  options = __spreadValues({}, options);\n  const protocol = `(?:(?:[a-z]+:)?//)?`;\n  const auth = \"(?:\\\\S+(?::\\\\S*)?@)?\";\n  const ip = new RegExp(\n    \"(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}\",\n    \"g\"\n  ).source;\n  const host = \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\";\n  const domain = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\";\n  const tld = `(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?`;\n  const port = \"(?::\\\\d{2,5})?\";\n  const path = '(?:[/?#][^\\\\s\"]*)?';\n  const regex2 = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n  return options.exact ? new RegExp(`(?:^${regex2}$)`, \"i\") : new RegExp(regex2, \"ig\");\n}\n\n// src/helper/emailRegex.ts\nvar regex = \"[^\\\\.\\\\s@:](?:[^\\\\s@:]*[^\\\\s@:\\\\.])?@[^\\\\.\\\\s@]+(?:\\\\.[^\\\\.\\\\s@]+)*\";\nfunction createEmailRegExp({ exact } = {}) {\n  return exact ? new RegExp(`^${regex}$`) : new RegExp(regex, \"g\");\n}\n\n// src/helper/floating-menu.ts\n\nfunction computeMenuPosition(button, menu) {\n  return __async(this, null, function* () {\n    const { x, y } = yield (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.computePosition)(button, menu, {\n      placement: \"top\",\n      middleware: [(0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.offset)(6), (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.flip)(), (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.shift)({ padding: 5 })]\n    });\n    return { x, y };\n  });\n}\nfunction wasClickOutside(insideElement, event) {\n  const isOutside = !insideElement.contains(event.target);\n  return isOutside;\n}\n\n// src/helper/tokenizer.ts\nvar createDefaultGrammar = () => {\n  return {\n    email: createEmailRegExp(),\n    url: createUrlRegExp({})\n  };\n};\nfunction tokenize(input, grammar) {\n  const matches = Object.entries(grammar).map(\n    ([type, rx], weight) => Array.from(input.matchAll(rx)).map(({ index, 0: content }) => ({\n      type,\n      weight,\n      content,\n      index: index != null ? index : 0\n    }))\n  ).flat().sort((a, b) => {\n    const d = a.index - b.index;\n    return d !== 0 ? d : a.weight - b.weight;\n  }).filter(({ index }, i, arr) => {\n    if (i === 0) return true;\n    const prev = arr[i - 1];\n    return prev.index + prev.content.length <= index;\n  });\n  const tokens = [];\n  let pos = 0;\n  for (const { type, content, index } of matches) {\n    if (index > pos) tokens.push(input.substring(pos, index));\n    tokens.push({ type, content });\n    pos = index + content.length;\n  }\n  if (input.length > pos) tokens.push(input.substring(pos));\n  return tokens;\n}\n\n// src/helper/eventGroups.ts\n\nvar allRemoteParticipantRoomEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantRoomEvents = [\n  ...allRemoteParticipantRoomEvents,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n];\nvar participantTrackEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\nvar allRemoteParticipantEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantEvents = [\n  ...allRemoteParticipantEvents,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\n\n// src/logger.ts\n\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_2__.getLogger(\"lk-components-js\");\nlog.setDefaultLevel(\"WARN\");\nfunction setLogLevel(level, options = {}) {\n  var _a;\n  log.setLevel(level);\n  (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((_a = options.liveKitClientLogLevel) != null ? _a : level);\n}\nfunction setLogExtension(extension, options = {}) {\n  var _a;\n  const originalFactory = log.methodFactory;\n  log.methodFactory = (methodName, configLevel, loggerName) => {\n    const rawMethod = originalFactory(methodName, configLevel, loggerName);\n    const logLevel = livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel[methodName];\n    const needLog = logLevel >= configLevel && logLevel < livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel.silent;\n    return (msg, context) => {\n      if (context) rawMethod(msg, context);\n      else rawMethod(msg);\n      if (needLog) {\n        extension(logLevel, msg, context);\n      }\n    };\n  };\n  log.setLevel(log.getLevel());\n  (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogExtension)((_a = options.liveKitClientLogExtension) != null ? _a : extension);\n}\n\n// src/helper/grid-layouts.ts\nvar GRID_LAYOUTS = [\n  {\n    columns: 1,\n    rows: 1\n  },\n  {\n    columns: 1,\n    rows: 2,\n    orientation: \"portrait\"\n  },\n  {\n    columns: 2,\n    rows: 1,\n    orientation: \"landscape\"\n  },\n  {\n    columns: 2,\n    rows: 2,\n    minWidth: 560\n  },\n  {\n    columns: 3,\n    rows: 3,\n    minWidth: 700\n  },\n  {\n    columns: 4,\n    rows: 4,\n    minWidth: 960\n  },\n  {\n    columns: 5,\n    rows: 5,\n    minWidth: 1100\n  }\n];\nfunction selectGridLayout(layoutDefinitions, participantCount, width, height) {\n  if (layoutDefinitions.length < 1) {\n    throw new Error(\"At least one grid layout definition must be provided.\");\n  }\n  const layouts = expandAndSortLayoutDefinitions(layoutDefinitions);\n  if (width <= 0 || height <= 0) {\n    return layouts[0];\n  }\n  let currentLayoutIndex = 0;\n  const containerOrientation = width / height > 1 ? \"landscape\" : \"portrait\";\n  let layout = layouts.find((layout_, index, allLayouts) => {\n    currentLayoutIndex = index;\n    const isBiggerLayoutAvailable = allLayouts.findIndex((l, i) => {\n      const fitsOrientation = !l.orientation || l.orientation === containerOrientation;\n      const layoutIsBiggerThanCurrent = i > index;\n      const layoutFitsSameAmountOfParticipants = l.maxTiles === layout_.maxTiles;\n      return layoutIsBiggerThanCurrent && layoutFitsSameAmountOfParticipants && fitsOrientation;\n    }) !== -1;\n    return layout_.maxTiles >= participantCount && !isBiggerLayoutAvailable;\n  });\n  if (layout === void 0) {\n    layout = layouts[layouts.length - 1];\n    if (layout) {\n      log.warn(\n        `No layout found for: participantCount: ${participantCount}, width/height: ${width}/${height} fallback to biggest available layout (${layout}).`\n      );\n    } else {\n      throw new Error(`No layout or fallback layout found.`);\n    }\n  }\n  if (width < layout.minWidth || height < layout.minHeight) {\n    if (currentLayoutIndex > 0) {\n      const smallerLayout = layouts[currentLayoutIndex - 1];\n      layout = selectGridLayout(\n        layouts.slice(0, currentLayoutIndex),\n        smallerLayout.maxTiles,\n        width,\n        height\n      );\n    }\n  }\n  return layout;\n}\nfunction expandAndSortLayoutDefinitions(layouts) {\n  return [...layouts].map((layout) => {\n    var _a, _b;\n    return {\n      name: `${layout.columns}x${layout.rows}`,\n      columns: layout.columns,\n      rows: layout.rows,\n      maxTiles: layout.columns * layout.rows,\n      minWidth: (_a = layout.minWidth) != null ? _a : 0,\n      minHeight: (_b = layout.minHeight) != null ? _b : 0,\n      orientation: layout.orientation\n    };\n  }).sort((a, b) => {\n    if (a.maxTiles !== b.maxTiles) {\n      return a.maxTiles - b.maxTiles;\n    } else if (a.minWidth !== 0 || b.minWidth !== 0) {\n      return a.minWidth - b.minWidth;\n    } else if (a.minHeight !== 0 || b.minHeight !== 0) {\n      return a.minHeight - b.minHeight;\n    } else {\n      return 0;\n    }\n  });\n}\n\n// src/helper/set-helper.ts\nfunction setDifference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\n// src/helper/featureDetection.ts\nfunction supportsScreenSharing() {\n  return typeof navigator !== \"undefined\" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\n\n// src/helper/transcriptions.ts\nfunction getActiveTranscriptionSegments(segments, syncTimes, maxAge = 0) {\n  return segments.filter((segment) => {\n    var _a;\n    const hasTrackSync = !!syncTimes.rtpTimestamp;\n    const currentTrackTime = (_a = syncTimes.rtpTimestamp) != null ? _a : performance.timeOrigin + performance.now();\n    const displayStartTime = hasTrackSync ? Math.max(segment.receivedAtMediaTimestamp, segment.startTime) : segment.receivedAt;\n    const segmentDuration = maxAge + segment.endTime - segment.startTime;\n    return currentTrackTime >= displayStartTime && currentTrackTime <= displayStartTime + segmentDuration;\n  });\n}\nfunction addMediaTimestampToTranscription(segment, timestamps) {\n  var _a;\n  return __spreadProps(__spreadValues({}, segment), {\n    receivedAtMediaTimestamp: (_a = timestamps.rtpTimestamp) != null ? _a : 0,\n    receivedAt: timestamps.timestamp\n  });\n}\nfunction dedupeSegments(prevSegments, newSegments, windowSize) {\n  return [...prevSegments, ...newSegments].reduceRight((acc, segment) => {\n    if (!acc.find((val) => val.id === segment.id)) {\n      acc.unshift(segment);\n    }\n    return acc;\n  }, []).slice(0 - windowSize);\n}\nfunction didActiveSegmentsChange(prevActive, newActive) {\n  if (newActive.length !== prevActive.length) {\n    return true;\n  }\n  return !newActive.every((newSegment) => {\n    return prevActive.find(\n      (prevSegment) => prevSegment.id === newSegment.id && prevSegment.text === newSegment.text && prevSegment.final === newSegment.final && prevSegment.language === newSegment.language && prevSegment.startTime === newSegment.startTime && prevSegment.endTime === newSegment.endTime\n    );\n  });\n}\n\n// src/types.ts\nvar PIN_DEFAULT_STATE = [];\nvar WIDGET_DEFAULT_STATE = {\n  showChat: false,\n  unreadMessages: 0,\n  showSettings: false\n};\nfunction isSourceWitOptions(source) {\n  return typeof source === \"object\";\n}\nfunction isSourcesWithOptions(sources) {\n  return Array.isArray(sources) && sources.filter(isSourceWitOptions).length > 0;\n}\n\n// src/sorting/sort-track-bundles.ts\n\n\n// src/sorting/base-sort-functions.ts\n\nfunction sortParticipantsByAudioLevel(a, b) {\n  return b.audioLevel - a.audioLevel;\n}\nfunction sortParticipantsByIsSpeaking(a, b) {\n  if (a.isSpeaking === b.isSpeaking) {\n    return 0;\n  } else {\n    return a.isSpeaking ? -1 : 1;\n  }\n}\nfunction sortParticipantsByLastSpokenAT(a, b) {\n  var _a, _b, _c, _d;\n  if (a.lastSpokeAt !== void 0 || b.lastSpokeAt !== void 0) {\n    return ((_b = (_a = b.lastSpokeAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = a.lastSpokeAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n  } else {\n    return 0;\n  }\n}\nfunction sortParticipantsByJoinedAt(a, b) {\n  var _a, _b, _c, _d;\n  return ((_b = (_a = a.joinedAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = b.joinedAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n}\nfunction sortTrackReferencesByType(a, b) {\n  if (isTrackReference(a)) {\n    if (isTrackReference(b)) {\n      return 0;\n    } else {\n      return -1;\n    }\n  } else if (isTrackReference(b)) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction sortTrackRefsByIsCameraEnabled(a, b) {\n  const aVideo = a.participant.isCameraEnabled;\n  const bVideo = b.participant.isCameraEnabled;\n  if (aVideo !== bVideo) {\n    if (aVideo) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return 0;\n  }\n}\n\n// src/sorting/sort-track-bundles.ts\nfunction sortTrackReferences(tracks) {\n  const localTracks = [];\n  const screenShareTracks = [];\n  const cameraTracks = [];\n  const undefinedTracks = [];\n  tracks.forEach((trackRef) => {\n    if (trackRef.participant.isLocal && trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n      localTracks.push(trackRef);\n    } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare) {\n      screenShareTracks.push(trackRef);\n    } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n      cameraTracks.push(trackRef);\n    } else {\n      undefinedTracks.push(trackRef);\n    }\n  });\n  const sortedScreenShareTracks = sortScreenShareTracks(screenShareTracks);\n  const sortedCameraTracks = sortCameraTracks(cameraTracks);\n  return [...localTracks, ...sortedScreenShareTracks, ...sortedCameraTracks, ...undefinedTracks];\n}\nfunction sortScreenShareTracks(screenShareTracks) {\n  const localScreenShares = [];\n  const remoteScreenShares = [];\n  screenShareTracks.forEach((trackRef) => {\n    if (trackRef.participant.isLocal) {\n      localScreenShares.push(trackRef);\n    } else {\n      remoteScreenShares.push(trackRef);\n    }\n  });\n  localScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\n  remoteScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\n  const sortedScreenShareTrackRefs = [...remoteScreenShares, ...localScreenShares];\n  return sortedScreenShareTrackRefs;\n}\nfunction sortCameraTracks(cameraTrackReferences) {\n  const localCameraTracks = [];\n  const remoteCameraTracks = [];\n  cameraTrackReferences.forEach((trackRef) => {\n    if (trackRef.participant.isLocal) {\n      localCameraTracks.push(trackRef);\n    } else {\n      remoteCameraTracks.push(trackRef);\n    }\n  });\n  remoteCameraTracks.sort((a, b) => {\n    if (a.participant.isSpeaking && b.participant.isSpeaking) {\n      return sortParticipantsByAudioLevel(a.participant, b.participant);\n    }\n    if (a.participant.isSpeaking !== b.participant.isSpeaking) {\n      return sortParticipantsByIsSpeaking(a.participant, b.participant);\n    }\n    if (a.participant.lastSpokeAt !== b.participant.lastSpokeAt) {\n      return sortParticipantsByLastSpokenAT(a.participant, b.participant);\n    }\n    if (isTrackReference(a) !== isTrackReference(b)) {\n      return sortTrackReferencesByType(a, b);\n    }\n    if (a.participant.isCameraEnabled !== b.participant.isCameraEnabled) {\n      return sortTrackRefsByIsCameraEnabled(a, b);\n    }\n    return sortParticipantsByJoinedAt(a.participant, b.participant);\n  });\n  return [...localCameraTracks, ...remoteCameraTracks];\n}\n\n// src/sorting/sort-participants.ts\n\nfunction sortParticipants(participants) {\n  const sortedParticipants = [...participants];\n  sortedParticipants.sort((a, b) => {\n    if (a.isSpeaking && b.isSpeaking) {\n      return sortParticipantsByAudioLevel(a, b);\n    }\n    if (a.isSpeaking !== b.isSpeaking) {\n      return sortParticipantsByIsSpeaking(a, b);\n    }\n    if (a.lastSpokeAt !== b.lastSpokeAt) {\n      return sortParticipantsByLastSpokenAT(a, b);\n    }\n    const aVideo = a.videoTrackPublications.size > 0;\n    const bVideo = b.videoTrackPublications.size > 0;\n    if (aVideo !== bVideo) {\n      if (aVideo) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    return sortParticipantsByJoinedAt(a, b);\n  });\n  const localParticipant = sortedParticipants.find((p) => p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant);\n  if (localParticipant) {\n    const localIdx = sortedParticipants.indexOf(localParticipant);\n    if (localIdx >= 0) {\n      sortedParticipants.splice(localIdx, 1);\n      if (sortedParticipants.length > 0) {\n        sortedParticipants.splice(0, 0, localParticipant);\n      } else {\n        sortedParticipants.push(localParticipant);\n      }\n    }\n  }\n  return sortedParticipants;\n}\n\n// src/helper/array-helper.ts\nfunction chunk(input, size) {\n  return input.reduce(\n    (arr, item, idx) => {\n      return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n    },\n    []\n  );\n}\nfunction zip(a1, a2) {\n  const resultLength = Math.max(a1.length, a2.length);\n  return new Array(resultLength).fill([]).map((_val, idx) => [a1[idx], a2[idx]]);\n}\nfunction differenceBy(a1, a2, by) {\n  return a1.filter((c) => !a2.map((v) => by(v)).includes(by(c)));\n}\n\n// src/track-reference/test-utils.ts\n\nfunction flatTrackReferenceArray(list) {\n  return list.map((item) => {\n    if (typeof item === \"string\" || typeof item === \"number\") {\n      return `${item}`;\n    } else {\n      return getTrackReferenceId(item);\n    }\n  });\n}\n\n// src/sorting/tile-array-update.ts\nfunction visualPageChange(state, next) {\n  return {\n    dropped: differenceBy(state, next, getTrackReferenceId),\n    added: differenceBy(next, state, getTrackReferenceId)\n  };\n}\nfunction listNeedsUpdating(changes) {\n  return changes.added.length !== 0 || changes.dropped.length !== 0;\n}\nfunction findIndex(trackReference, trackReferences) {\n  const indexToReplace = trackReferences.findIndex(\n    (trackReference_) => getTrackReferenceId(trackReference_) === getTrackReferenceId(trackReference)\n  );\n  if (indexToReplace === -1) {\n    throw new Error(\n      `Element not part of the array: ${getTrackReferenceId(\n        trackReference\n      )} not in ${flatTrackReferenceArray(trackReferences)}`\n    );\n  }\n  return indexToReplace;\n}\nfunction swapItems(moveForward, moveBack, trackReferences) {\n  const indexToReplace = findIndex(moveForward, trackReferences);\n  const indexReplaceWith = findIndex(moveBack, trackReferences);\n  trackReferences.splice(indexToReplace, 1, moveBack);\n  trackReferences.splice(indexReplaceWith, 1, moveForward);\n  return trackReferences;\n}\nfunction dropItem(itemToDrop, list) {\n  const indexOfElementToDrop = findIndex(itemToDrop, list);\n  list.splice(indexOfElementToDrop, 1);\n  return list;\n}\nfunction addItem(itemToAdd, list) {\n  return [...list, itemToAdd];\n}\nfunction divideIntoPages(list, maxElementsOnPage) {\n  const pages = chunk(list, maxElementsOnPage);\n  return pages;\n}\nfunction updatePages(currentList, nextList, maxItemsOnPage) {\n  let updatedList = refreshList(currentList, nextList);\n  if (updatedList.length < nextList.length) {\n    const addedItems = differenceBy(nextList, updatedList, getTrackReferenceId);\n    updatedList = [...updatedList, ...addedItems];\n  }\n  const currentPages = divideIntoPages(updatedList, maxItemsOnPage);\n  const nextPages = divideIntoPages(nextList, maxItemsOnPage);\n  zip(currentPages, nextPages).forEach(([currentPage, nextPage], pageIndex) => {\n    if (currentPage && nextPage) {\n      const updatedPage = divideIntoPages(updatedList, maxItemsOnPage)[pageIndex];\n      const changes = visualPageChange(updatedPage, nextPage);\n      if (listNeedsUpdating(changes)) {\n        log.debug(\n          `Detected visual changes on page: ${pageIndex}, current: ${flatTrackReferenceArray(\n            currentPage\n          )}, next: ${flatTrackReferenceArray(nextPage)}`,\n          { changes }\n        );\n        if (changes.added.length === changes.dropped.length) {\n          zip(changes.added, changes.dropped).forEach(([added, dropped]) => {\n            if (added && dropped) {\n              updatedList = swapItems(added, dropped, updatedList);\n            } else {\n              throw new Error(\n                `For a swap action we need a addition and a removal one is missing: ${added}, ${dropped}`\n              );\n            }\n          });\n        }\n        if (changes.added.length === 0 && changes.dropped.length > 0) {\n          changes.dropped.forEach((item) => {\n            updatedList = dropItem(item, updatedList);\n          });\n        }\n        if (changes.added.length > 0 && changes.dropped.length === 0) {\n          changes.added.forEach((item) => {\n            updatedList = addItem(item, updatedList);\n          });\n        }\n      }\n    }\n  });\n  if (updatedList.length > nextList.length) {\n    const missingItems = differenceBy(updatedList, nextList, getTrackReferenceId);\n    updatedList = updatedList.filter(\n      (item) => !missingItems.map(getTrackReferenceId).includes(getTrackReferenceId(item))\n    );\n  }\n  return updatedList;\n}\nfunction refreshList(currentList, nextList) {\n  return currentList.map((currentItem) => {\n    const updateForCurrentItem = nextList.find(\n      (newItem_) => (\n        // If the IDs match or ..\n        getTrackReferenceId(currentItem) === getTrackReferenceId(newItem_) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n        typeof currentItem !== \"number\" && isTrackReferencePlaceholder(currentItem) && isTrackReference(newItem_) && isPlaceholderReplacement(currentItem, newItem_)\n      )\n    );\n    return updateForCurrentItem != null ? updateForCurrentItem : currentItem;\n  });\n}\n\n// src/components/mediaToggle.ts\n\n\n\n// src/observables/participant.ts\n\n\n\n// src/components/mediaTrack.ts\n\n\n\n// src/styles-interface/class-prefixer.ts\nfunction prefixClass(unprefixedClassName) {\n  return `${cssPrefix}-${unprefixedClassName}`;\n}\n\n// src/components/mediaTrack.ts\nfunction setupMediaTrack(trackIdentifier) {\n  const initialPub = getTrackByIdentifier(trackIdentifier);\n  const trackObserver = observeParticipantMedia(trackIdentifier.participant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => {\n      return getTrackByIdentifier(trackIdentifier);\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(initialPub)\n  );\n  const className = prefixClass(\n    trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? \"participant-media-video\" : \"participant-media-audio\"\n  );\n  return { className, trackObserver };\n}\nfunction getTrackByIdentifier(options) {\n  if (isTrackReference(options)) {\n    return options.publication;\n  } else {\n    const { source, name, participant } = options;\n    if (source && name) {\n      return participant.getTrackPublications().find((pub) => pub.source === source && pub.trackName === name);\n    } else if (name) {\n      return participant.getTrackPublicationByName(name);\n    } else if (source) {\n      return participant.getTrackPublication(source);\n    } else {\n      throw new Error(\"At least one of source and name needs to be defined\");\n    }\n  }\n}\n\n// src/observables/room.ts\n\n\nfunction observeRoomEvents(room, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const onRoomUpdate = () => {\n      subscribe.next(room);\n    };\n    events.forEach((evt) => {\n      room.on(evt, onRoomUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        room.off(evt, onRoomUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room));\n  return observable;\n}\nfunction roomEventSelector(room, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    room.on(event, update);\n    const unsubscribe = () => {\n      room.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction roomObserver(room) {\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room));\n  return observable;\n}\nfunction connectionStateObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([connectionState]) => connectionState),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.state)\n  );\n}\nfunction screenShareObserver(room) {\n  let screenShareSubscriber;\n  const observers = [];\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber) => {\n    screenShareSubscriber = subscriber;\n    return () => {\n      observers.forEach((observer) => {\n        observer.unsubscribe();\n      });\n    };\n  });\n  const screenShareTracks = [];\n  const handleSub = (publication, participant) => {\n    if (publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare && publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) {\n      return;\n    }\n    let trackMap = screenShareTracks.find((tr) => tr.participant.identity === participant.identity);\n    const getScreenShareTracks = (participant2) => {\n      return participant2.getTrackPublications().filter(\n        (track) => (track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare || track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) && track.track\n      );\n    };\n    if (!trackMap) {\n      trackMap = {\n        participant,\n        tracks: getScreenShareTracks(participant)\n      };\n    } else {\n      const index = screenShareTracks.indexOf(trackMap);\n      screenShareTracks.splice(index, 1);\n      trackMap.tracks = getScreenShareTracks(participant);\n    }\n    if (trackMap.tracks.length > 0) {\n      screenShareTracks.push(trackMap);\n    }\n    screenShareSubscriber.next(screenShareTracks);\n  };\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed).subscribe(\n      ([, ...args]) => handleSub(...args)\n    )\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed).subscribe(\n      ([, ...args]) => handleSub(...args)\n    )\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished).subscribe((args) => handleSub(...args))\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  setTimeout(() => {\n    for (const p of room.remoteParticipants.values()) {\n      p.getTrackPublications().forEach((track) => {\n        handleSub(track, p);\n      });\n    }\n  }, 1);\n  return observable;\n}\nfunction roomInfoObserver(room) {\n  const observer = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((r) => {\n      return { name: r.name, metadata: r.metadata };\n    })\n  );\n  return observer;\n}\nfunction activeSpeakerObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([speakers]) => speakers)\n  );\n}\nfunction createMediaDeviceObserver(kind, onError, requestPermissions = true) {\n  var _a;\n  const onDeviceChange = () => __async(this, null, function* () {\n    try {\n      const newDevices = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions);\n      deviceSubject.next(newDevices);\n    } catch (e) {\n      onError == null ? void 0 : onError(e);\n    }\n  });\n  const deviceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const observable = deviceSubject.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.finalize)(() => {\n      var _a2;\n      (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.removeEventListener(\"devicechange\", onDeviceChange);\n    })\n  );\n  if (typeof window !== \"undefined\") {\n    if (!window.isSecureContext) {\n      throw new Error(\n        `Accessing media devices is available only in secure contexts (HTTPS and localhost), in some or all supporting browsers. See: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices`\n      );\n    }\n    (_a = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a.addEventListener(\"devicechange\", onDeviceChange);\n  }\n  return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.concat)(\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions).catch((e) => {\n      onError == null ? void 0 : onError(e);\n      return [];\n    }),\n    observable\n  );\n}\nfunction createDataObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction roomAudioPlaybackAllowedObservable(room) {\n  const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((room2) => {\n      return { canPlayAudio: room2.canPlaybackAudio };\n    })\n  );\n  return observable;\n}\nfunction roomVideoPlaybackAllowedObservable(room) {\n  const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.VideoPlaybackStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((room2) => {\n      return { canPlayVideo: room2.canPlaybackVideo };\n    })\n  );\n  return observable;\n}\nfunction createActiveDeviceObservable(room, kind) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(([kindOfDevice]) => kindOfDevice === kind),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([kind2, deviceId]) => {\n      log.debug(\"activeDeviceObservable | RoomEvent.ActiveDeviceChanged\", { kind: kind2, deviceId });\n      return deviceId;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.getActiveDevice(kind))\n  );\n}\nfunction encryptionStatusObservable(room, participant) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(\n      ([, p]) => (participant == null ? void 0 : participant.identity) === (p == null ? void 0 : p.identity) || !p && (participant == null ? void 0 : participant.identity) === room.localParticipant.identity\n    ),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([encrypted]) => encrypted),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(\n      participant instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant ? participant.isE2EEEnabled : !!(participant == null ? void 0 : participant.isEncrypted)\n    )\n  );\n}\nfunction recordingStatusObservable(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RecordingStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([recording]) => recording),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.isRecording)\n  );\n}\n\n// src/observables/participant.ts\nfunction observeParticipantEvents(participant, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const onParticipantUpdate = () => {\n      subscribe.next(participant);\n    };\n    events.forEach((evt) => {\n      participant.on(evt, onParticipantUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        participant.off(evt, onParticipantUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(participant));\n  return observable;\n}\nfunction observeParticipantMedia(participant) {\n  const participantObserver = observeParticipantEvents(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n    // ParticipantEvent.ConnectionQualityChanged,\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((p) => {\n      const { isMicrophoneEnabled, isCameraEnabled, isScreenShareEnabled } = p;\n      const microphoneTrack = p.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone);\n      const cameraTrack = p.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n      const participantMedia = {\n        isCameraEnabled,\n        isMicrophoneEnabled,\n        isScreenShareEnabled,\n        cameraTrack,\n        microphoneTrack,\n        participant: p\n      };\n      return participantMedia;\n    })\n  );\n  return participantObserver;\n}\nfunction createTrackObserver(participant, options) {\n  return observeParticipantMedia(participant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => {\n      return { publication: getTrackByIdentifier(options) };\n    })\n  );\n}\nfunction participantInfoObserver(participant) {\n  if (!participant) {\n    return void 0;\n  }\n  const observer = observeParticipantEvents(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantNameChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(({ name, identity, metadata }) => {\n      return {\n        name,\n        identity,\n        metadata\n      };\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)({\n      name: participant.name,\n      identity: participant.identity,\n      metadata: participant.metadata\n    })\n  );\n  return observer;\n}\nfunction createConnectionQualityObserver(participant) {\n  const observer = participantEventSelector(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([quality]) => quality),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(participant.connectionQuality)\n  );\n  return observer;\n}\nfunction participantEventSelector(participant, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    participant.on(event, update);\n    const unsubscribe = () => {\n      participant.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction mutedObserver(trackRef) {\n  var _a, _b, _c, _d;\n  return observeParticipantEvents(\n    trackRef.participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((participant) => {\n      var _a2, _b2;\n      const pub = (_a2 = trackRef.publication) != null ? _a2 : participant.getTrackPublication(trackRef.source);\n      return (_b2 = pub == null ? void 0 : pub.isMuted) != null ? _b2 : true;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(\n      (_d = (_c = (_a = trackRef.publication) == null ? void 0 : _a.isMuted) != null ? _c : (_b = trackRef.participant.getTrackPublication(trackRef.source)) == null ? void 0 : _b.isMuted) != null ? _d : true\n    )\n  );\n}\nfunction createIsSpeakingObserver(participant) {\n  return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([isSpeaking]) => isSpeaking)\n  );\n}\nfunction connectedParticipantsObserver(room, options = {}) {\n  var _a;\n  let subscriber;\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((sub) => {\n    subscriber = sub;\n    return () => listener.unsubscribe();\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(Array.from(room.remoteParticipants.values())));\n  const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n  const roomEvents = Array.from(\n    /* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      ...additionalRoomEvents\n    ])\n  );\n  const listener = observeRoomEvents(room, ...roomEvents).subscribe(\n    (r) => subscriber == null ? void 0 : subscriber.next(Array.from(r.remoteParticipants.values()))\n  );\n  if (room.remoteParticipants.size > 0) {\n    subscriber == null ? void 0 : subscriber.next(Array.from(room.remoteParticipants.values()));\n  }\n  return observable;\n}\nfunction connectedParticipantObserver(room, identity, options = {}) {\n  var _a;\n  const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.switchMap)((r) => {\n      const participant = r.getParticipantByIdentity(identity);\n      if (participant) {\n        return observeParticipantEvents(participant, ...additionalEvents);\n      } else {\n        return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => subscribe.next(void 0));\n      }\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.getParticipantByIdentity(identity))\n  );\n  return observable;\n}\nfunction participantPermissionObserver(participant) {\n  const observer = participantEventSelector(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => participant.permissions),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(participant.permissions)\n  );\n  return observer;\n}\nfunction participantByIdentifierObserver(room, { kind, identity }, options = {}) {\n  var _a;\n  const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n  const matchesIdentifier = (participant) => {\n    let isMatch = true;\n    if (kind) {\n      isMatch = isMatch && participant.kind === kind;\n    }\n    if (identity) {\n      isMatch = isMatch && participant.identity === identity;\n    }\n    return isMatch;\n  };\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.switchMap)((r) => {\n      const participant = Array.from(r.remoteParticipants.values()).find(\n        (p) => matchesIdentifier(p)\n      );\n      if (participant) {\n        return observeParticipantEvents(participant, ...additionalEvents);\n      } else {\n        return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => subscribe.next(void 0));\n      }\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(Array.from(room.remoteParticipants.values()).find((p) => matchesIdentifier(p)))\n  );\n  return observable;\n}\nfunction participantAttributesObserver(participant) {\n  if (typeof participant === \"undefined\") {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable();\n  }\n  return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.AttributesChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([changedAttributes]) => {\n      return {\n        changed: changedAttributes,\n        attributes: participant.attributes\n      };\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)({ changed: participant.attributes, attributes: participant.attributes })\n  );\n}\n\n// src/components/mediaToggle.ts\nfunction setupMediaToggle(source, room, options, publishOptions, onError) {\n  const { localParticipant } = room;\n  const getSourceEnabled = (source2, localParticipant2) => {\n    let isEnabled = false;\n    switch (source2) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n        isEnabled = localParticipant2.isCameraEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n        isEnabled = localParticipant2.isMicrophoneEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n        isEnabled = localParticipant2.isScreenShareEnabled;\n        break;\n      default:\n        break;\n    }\n    return isEnabled;\n  };\n  const enabledObserver = observeParticipantMedia(localParticipant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((media) => {\n      return getSourceEnabled(source, media.participant);\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(getSourceEnabled(source, localParticipant))\n  );\n  const pendingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const toggle = (forceState, captureOptions) => __async(this, null, function* () {\n    try {\n      captureOptions != null ? captureOptions : captureOptions = options;\n      pendingSubject.next(true);\n      switch (source) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n          yield localParticipant.setCameraEnabled(\n            forceState != null ? forceState : !localParticipant.isCameraEnabled,\n            captureOptions,\n            publishOptions\n          );\n          return localParticipant.isCameraEnabled;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n          yield localParticipant.setMicrophoneEnabled(\n            forceState != null ? forceState : !localParticipant.isMicrophoneEnabled,\n            captureOptions,\n            publishOptions\n          );\n          return localParticipant.isMicrophoneEnabled;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n          yield localParticipant.setScreenShareEnabled(\n            forceState != null ? forceState : !localParticipant.isScreenShareEnabled,\n            captureOptions,\n            publishOptions\n          );\n          return localParticipant.isScreenShareEnabled;\n        default:\n          throw new TypeError(\"Tried to toggle unsupported source\");\n      }\n    } catch (e) {\n      if (onError && e instanceof Error) {\n        onError == null ? void 0 : onError(e);\n        return void 0;\n      } else {\n        throw e;\n      }\n    } finally {\n      pendingSubject.next(false);\n    }\n  });\n  const className = prefixClass(\"button\");\n  return {\n    className,\n    toggle,\n    enabledObserver,\n    pendingObserver: pendingSubject.asObservable()\n  };\n}\nfunction setupManualToggle() {\n  let state = false;\n  const enabledSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const pendingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const toggle = (forceState) => __async(this, null, function* () {\n    pendingSubject.next(true);\n    state = forceState != null ? forceState : !state;\n    enabledSubject.next(state);\n    pendingSubject.next(false);\n  });\n  const className = prefixClass(\"button\");\n  return {\n    className,\n    toggle,\n    enabledObserver: enabledSubject.asObservable(),\n    pendingObserver: pendingSubject.asObservable()\n  };\n}\n\n// src/components/mediaDeviceSelect.ts\n\n\nfunction setupDeviceSelector(kind, room, localTrack) {\n  const activeDeviceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(void 0);\n  const activeDeviceObservable = room ? createActiveDeviceObservable(room, kind) : activeDeviceSubject.asObservable();\n  const setActiveMediaDevice = (_0, ..._1) => __async(this, [_0, ..._1], function* (id, options = {}) {\n    var _a, _b, _c;\n    if (room) {\n      log.debug(`Switching active device of kind \"${kind}\" with id ${id}.`);\n      yield room.switchActiveDevice(kind, id, options.exact);\n      const actualDeviceId = (_a = room.getActiveDevice(kind)) != null ? _a : id;\n      if (actualDeviceId !== id && id !== \"default\") {\n        log.info(\n          `We tried to select the device with id (${id}), but the browser decided to select the device with id (${actualDeviceId}) instead.`\n        );\n      }\n      let targetTrack = void 0;\n      if (kind === \"audioinput\")\n        targetTrack = (_b = room.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : _b.track;\n      else if (kind === \"videoinput\") {\n        targetTrack = (_c = room.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : _c.track;\n      }\n      const useDefault = id === \"default\" && !targetTrack || id === \"default\" && (targetTrack == null ? void 0 : targetTrack.mediaStreamTrack.label.startsWith(\"Default\"));\n      activeDeviceSubject.next(useDefault ? id : actualDeviceId);\n    } else if (localTrack) {\n      yield localTrack.setDeviceId(options.exact ? { exact: id } : id);\n      const actualId = yield localTrack.getDeviceId();\n      activeDeviceSubject.next(\n        id === \"default\" && localTrack.mediaStreamTrack.label.startsWith(\"Default\") ? id : actualId\n      );\n    } else if (activeDeviceSubject.value !== id) {\n      log.warn(\n        \"device switch skipped, please provide either a room or a local track to switch on. \"\n      );\n      activeDeviceSubject.next(id);\n    }\n  });\n  const className = prefixClass(\"media-device-select\");\n  return {\n    className,\n    activeDeviceObservable,\n    setActiveMediaDevice\n  };\n}\n\n// src/components/disconnectButton.ts\nfunction setupDisconnectButton(room) {\n  const disconnect = (stopTracks) => {\n    room.disconnect(stopTracks);\n  };\n  const className = prefixClass(\"disconnect-button\");\n  return { className, disconnect };\n}\n\n// src/components/connectionQualityIndicator.ts\nfunction setupConnectionQualityIndicator(participant) {\n  const className = prefixClass(\"connection-quality\");\n  const connectionQualityObserver = createConnectionQualityObserver(participant);\n  return { className, connectionQualityObserver };\n}\n\n// src/components/trackMutedIndicator.ts\n\nfunction setupTrackMutedIndicator(trackRef) {\n  let classForSource = \"track-muted-indicator-camera\";\n  switch (trackRef.source) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n      classForSource = \"track-muted-indicator-camera\";\n      break;\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n      classForSource = \"track-muted-indicator-microphone\";\n      break;\n    default:\n      break;\n  }\n  const className = prefixClass(classForSource);\n  const mediaMutedObserver = mutedObserver(trackRef);\n  return { className, mediaMutedObserver };\n}\n\n// src/components/participantName.ts\nfunction setupParticipantName(participant) {\n  const infoObserver = participantInfoObserver(participant);\n  return { className: \"lk-participant-name\", infoObserver };\n}\n\n// src/components/participantTile.ts\nfunction setupParticipantTile() {\n  const className = prefixClass(\"participant-tile\");\n  return {\n    className\n  };\n}\n\n// src/components/chat.ts\n\n\n\n// src/observables/dataChannel.ts\n\nvar DataTopic = {\n  CHAT: \"lk-chat-topic\",\n  CHAT_UPDATE: \"lk-chat-update-topic\"\n};\nfunction sendMessage(_0, _1) {\n  return __async(this, arguments, function* (localParticipant, payload, options = {}) {\n    const { reliable, destinationIdentities, topic } = options;\n    yield localParticipant.publishData(payload, {\n      destinationIdentities,\n      topic,\n      reliable\n    });\n  });\n}\nfunction setupDataMessageHandler(room, topic, onMessage) {\n  const topics = Array.isArray(topic) ? topic : [topic];\n  const messageObservable = createDataObserver(room).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(\n      ([, , , messageTopic]) => topic === void 0 || messageTopic !== void 0 && topics.includes(messageTopic)\n    ),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([payload, participant, , messageTopic]) => {\n      const msg = {\n        payload,\n        topic: messageTopic,\n        from: participant\n      };\n      onMessage == null ? void 0 : onMessage(msg);\n      return msg;\n    })\n  );\n  let isSendingSubscriber;\n  const isSendingObservable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber) => {\n    isSendingSubscriber = subscriber;\n  });\n  const send = (_0, ..._1) => __async(this, [_0, ..._1], function* (payload, options = {}) {\n    isSendingSubscriber.next(true);\n    try {\n      yield sendMessage(room.localParticipant, payload, __spreadValues({ topic: topics[0] }, options));\n    } finally {\n      isSendingSubscriber.next(false);\n    }\n  });\n  return { messageObservable, isSendingObservable, send };\n}\n\n// src/components/chat.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar topicSubjectMap = /* @__PURE__ */ new Map();\nvar encode = (message) => encoder.encode(JSON.stringify(message));\nvar decode = (message) => JSON.parse(decoder.decode(message));\nfunction setupChat(room, options) {\n  var _a, _b;\n  const onDestroyObservable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const { messageDecoder, messageEncoder, channelTopic, updateChannelTopic } = options != null ? options : {};\n  const topic = channelTopic != null ? channelTopic : DataTopic.CHAT;\n  const updateTopic = updateChannelTopic != null ? updateChannelTopic : DataTopic.CHAT_UPDATE;\n  let needsSetup = false;\n  if (!topicSubjectMap.has(room)) {\n    needsSetup = true;\n  }\n  const topicMap = (_a = topicSubjectMap.get(room)) != null ? _a : /* @__PURE__ */ new Map();\n  const messageSubject = (_b = topicMap.get(topic)) != null ? _b : new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  topicMap.set(topic, messageSubject);\n  topicSubjectMap.set(room, topicMap);\n  if (needsSetup) {\n    const { messageObservable } = setupDataMessageHandler(room, [topic, updateTopic]);\n    messageObservable.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(onDestroyObservable)).subscribe(messageSubject);\n  }\n  const finalMessageDecoder = messageDecoder != null ? messageDecoder : decode;\n  const messagesObservable = messageSubject.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((msg) => {\n      const parsedMessage = finalMessageDecoder(msg.payload);\n      const newMessage = __spreadProps(__spreadValues({}, parsedMessage), { from: msg.from });\n      return newMessage;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.scan)((acc, value) => {\n      if (\"id\" in value && acc.find((msg) => {\n        var _a2, _b2;\n        return ((_a2 = msg.from) == null ? void 0 : _a2.identity) === ((_b2 = value.from) == null ? void 0 : _b2.identity) && msg.id === value.id;\n      })) {\n        const replaceIndex = acc.findIndex((msg) => msg.id === value.id);\n        if (replaceIndex > -1) {\n          const originalMsg = acc[replaceIndex];\n          acc[replaceIndex] = __spreadProps(__spreadValues({}, value), {\n            timestamp: originalMsg.timestamp,\n            editTimestamp: value.timestamp\n          });\n        }\n        return [...acc];\n      }\n      return [...acc, value];\n    }, []),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(onDestroyObservable)\n  );\n  const isSending$ = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(false);\n  const finalMessageEncoder = messageEncoder != null ? messageEncoder : encode;\n  const send = (message) => __async(this, null, function* () {\n    const timestamp = Date.now();\n    const id = crypto.randomUUID();\n    const chatMessage = { id, message, timestamp };\n    const encodedMsg = finalMessageEncoder(chatMessage);\n    isSending$.next(true);\n    try {\n      yield sendMessage(room.localParticipant, encodedMsg, {\n        reliable: true,\n        topic\n      });\n      messageSubject.next({\n        payload: encodedMsg,\n        topic,\n        from: room.localParticipant\n      });\n      return chatMessage;\n    } finally {\n      isSending$.next(false);\n    }\n  });\n  const update = (message, messageId) => __async(this, null, function* () {\n    const timestamp = Date.now();\n    const chatMessage = { id: messageId, message, timestamp };\n    const encodedMsg = finalMessageEncoder(chatMessage);\n    isSending$.next(true);\n    try {\n      yield sendMessage(room.localParticipant, encodedMsg, {\n        topic: updateTopic,\n        reliable: true\n      });\n      messageSubject.next({\n        payload: encodedMsg,\n        topic,\n        from: room.localParticipant\n      });\n      return chatMessage;\n    } finally {\n      isSending$.next(false);\n    }\n  });\n  function destroy() {\n    onDestroyObservable.next();\n    onDestroyObservable.complete();\n    topicSubjectMap.delete(room);\n  }\n  room.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, destroy);\n  return { messageObservable: messagesObservable, isSendingObservable: isSending$, send, update };\n}\n\n// src/components/startAudio.ts\nfunction setupStartAudio() {\n  const handleStartAudioPlayback = (room) => __async(this, null, function* () {\n    log.info(\"Start Audio for room: \", room);\n    yield room.startAudio();\n  });\n  const className = prefixClass(\"start-audio-button\");\n  return { className, roomAudioPlaybackAllowedObservable, handleStartAudioPlayback };\n}\n\n// src/components/startVideo.ts\nfunction setupStartVideo() {\n  const handleStartVideoPlayback = (room) => __async(this, null, function* () {\n    log.info(\"Start Video for room: \", room);\n    yield room.startVideo();\n  });\n  const className = prefixClass(\"start-audio-button\");\n  return { className, roomVideoPlaybackAllowedObservable, handleStartVideoPlayback };\n}\n\n// src/components/chatToggle.ts\nfunction setupChatToggle() {\n  const className = [prefixClass(\"button\"), prefixClass(\"chat-toggle\")].join(\" \");\n  return { className };\n}\n\n// src/components/focusToggle.ts\nfunction setupFocusToggle() {\n  const className = [prefixClass(\"button\"), prefixClass(\"focus-toggle-button\")].join(\" \");\n  return { className };\n}\n\n// src/components/clearPinButton.ts\nfunction setupClearPinButton() {\n  const className = \"lk-clear-pin-button lk-button\";\n  return { className };\n}\n\n// src/components/room.ts\nfunction setupLiveKitRoom() {\n  const className = \"lk-room-container\";\n  return { className };\n}\n\n// src/observables/track.ts\n\n\nfunction trackObservable(track) {\n  const trackObserver = observeTrackEvents(\n    track,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Muted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Subscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unsubscribed\n  );\n  return trackObserver;\n}\nfunction observeTrackEvents(track, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const onTrackUpdate = () => {\n      subscribe.next(track);\n    };\n    events.forEach((evt) => {\n      track.on(evt, onTrackUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        track.off(evt, onTrackUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(track));\n  return observable;\n}\nfunction getTrackReferences(room, sources, onlySubscribedTracks = true) {\n  const localParticipant = room.localParticipant;\n  const allParticipants = [localParticipant, ...Array.from(room.remoteParticipants.values())];\n  const trackReferences = [];\n  allParticipants.forEach((participant) => {\n    sources.forEach((source) => {\n      const sourceReferences = Array.from(\n        participant.trackPublications.values()\n      ).filter(\n        (track) => track.source === source && // either return all or only the ones that are subscribed\n        (!onlySubscribedTracks || track.track)\n      ).map((track) => {\n        return {\n          participant,\n          publication: track,\n          source: track.source\n        };\n      });\n      trackReferences.push(...sourceReferences);\n    });\n  });\n  return { trackReferences, participants: allParticipants };\n}\nfunction getParticipantTrackRefs(participant, identifier, onlySubscribedTracks = false) {\n  const { sources, kind, name } = identifier;\n  const sourceReferences = Array.from(participant.trackPublications.values()).filter(\n    (pub) => (!sources || sources.includes(pub.source)) && (!kind || pub.kind === kind) && (!name || pub.trackName === name) && // either return all or only the ones that are subscribed\n    (!onlySubscribedTracks || pub.track)\n  ).map((track) => {\n    return {\n      participant,\n      publication: track,\n      source: track.source\n    };\n  });\n  return sourceReferences;\n}\nfunction trackReferencesObservable(room, sources, options) {\n  var _a, _b;\n  const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n  const onlySubscribedTracks = (_b = options.onlySubscribed) != null ? _b : true;\n  const roomEvents = Array.from(\n    (/* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n      ...additionalRoomEvents\n    ])).values()\n  );\n  const observable = observeRoomEvents(room, ...roomEvents).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((room2) => {\n      const data = getTrackReferences(room2, sources, onlySubscribedTracks);\n      log.debug(`TrackReference[] was updated. (length ${data.trackReferences.length})`, data);\n      return data;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(getTrackReferences(room, sources, onlySubscribedTracks))\n  );\n  return observable;\n}\nfunction participantTracksObservable(participant, trackIdentifier) {\n  const observable = observeParticipantEvents(participant, ...participantTrackEvents).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((participant2) => {\n      const data = getParticipantTrackRefs(participant2, trackIdentifier);\n      log.debug(`TrackReference[] was updated. (length ${data.length})`, data);\n      return data;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(getParticipantTrackRefs(participant, trackIdentifier))\n  );\n  return observable;\n}\nfunction trackEventSelector(publication, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    publication.on(event, update);\n    const unsubscribe = () => {\n      publication.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction trackTranscriptionObserver(publication) {\n  return trackEventSelector(publication, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TranscriptionReceived);\n}\nfunction trackSyncTimeObserver(track) {\n  return trackEventSelector(track, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TimeSyncUpdate).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([timeUpdate]) => timeUpdate)\n  );\n}\n\n// src/observables/dom-event.ts\n\nfunction createInteractingObservable(htmlElement, inactiveAfter = 1e3) {\n  if (htmlElement === null) return (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.of)(false);\n  const move$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.fromEvent)(htmlElement, \"mousemove\", { passive: true }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => true));\n  const moveAndStop$ = move$.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.timeout)({\n      each: inactiveAfter,\n      with: () => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_14__.of)(false), moveAndStop$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_17__.skipUntil)(move$)))\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)()\n  );\n  return moveAndStop$;\n}\n\n// src/persistent-storage/local-storage-helpers.ts\nfunction saveToLocalStorage(key, value) {\n  if (typeof localStorage === \"undefined\") {\n    log.error(\"Local storage is not available.\");\n    return;\n  }\n  try {\n    if (value) {\n      const nonEmptySettings = Object.entries(value).filter(([, value2]) => value2 !== \"\");\n      localStorage.setItem(key, JSON.stringify(nonEmptySettings));\n    }\n  } catch (error) {\n    log.error(`Error setting item to local storage: ${error}`);\n  }\n}\nfunction loadFromLocalStorage(key) {\n  if (typeof localStorage === \"undefined\") {\n    log.error(\"Local storage is not available.\");\n    return void 0;\n  }\n  try {\n    const item = localStorage.getItem(key);\n    if (!item) {\n      log.warn(`Item with key ${key} does not exist in local storage.`);\n      return void 0;\n    }\n    return JSON.parse(item);\n  } catch (error) {\n    log.error(`Error getting item from local storage: ${error}`);\n    return void 0;\n  }\n}\nfunction createLocalStorageInterface(key) {\n  return {\n    load: () => loadFromLocalStorage(key),\n    save: (value) => saveToLocalStorage(key, value)\n  };\n}\n\n// src/persistent-storage/user-choices.ts\nvar USER_CHOICES_KEY = `${cssPrefix}-user-choices`;\nvar defaultUserChoices = {\n  videoEnabled: true,\n  audioEnabled: true,\n  videoDeviceId: \"\",\n  audioDeviceId: \"\",\n  username: \"\"\n};\nvar { load, save } = createLocalStorageInterface(USER_CHOICES_KEY);\nfunction saveUserChoices(userChoices, preventSave = false) {\n  if (preventSave === true) {\n    return;\n  }\n  save(userChoices);\n}\nfunction loadUserChoices(defaults, preventLoad = false) {\n  var _a, _b, _c, _d, _e;\n  const fallback = {\n    videoEnabled: (_a = defaults == null ? void 0 : defaults.videoEnabled) != null ? _a : defaultUserChoices.videoEnabled,\n    audioEnabled: (_b = defaults == null ? void 0 : defaults.audioEnabled) != null ? _b : defaultUserChoices.audioEnabled,\n    videoDeviceId: (_c = defaults == null ? void 0 : defaults.videoDeviceId) != null ? _c : defaultUserChoices.videoDeviceId,\n    audioDeviceId: (_d = defaults == null ? void 0 : defaults.audioDeviceId) != null ? _d : defaultUserChoices.audioDeviceId,\n    username: (_e = defaults == null ? void 0 : defaults.username) != null ? _e : defaultUserChoices.username\n  };\n  if (preventLoad) {\n    return fallback;\n  } else {\n    const maybeLoadedObject = load();\n    const result = __spreadValues(__spreadValues({}, fallback), maybeLoadedObject != null ? maybeLoadedObject : {});\n    return result;\n  }\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livekit/components-core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livekit/components-react/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@livekit/components-react/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioConference: () => (/* binding */ AudioConference),\n/* harmony export */   AudioTrack: () => (/* binding */ AudioTrack),\n/* harmony export */   AudioVisualizer: () => (/* binding */ AudioVisualizer),\n/* harmony export */   BarVisualizer: () => (/* binding */ BarVisualizer),\n/* harmony export */   CameraDisabledIcon: () => (/* binding */ CameraDisabledIcon_default),\n/* harmony export */   CameraIcon: () => (/* binding */ CameraIcon_default),\n/* harmony export */   CarouselLayout: () => (/* binding */ CarouselLayout),\n/* harmony export */   Chat: () => (/* binding */ Chat),\n/* harmony export */   ChatCloseIcon: () => (/* binding */ ChatCloseIcon_default),\n/* harmony export */   ChatEntry: () => (/* binding */ ChatEntry),\n/* harmony export */   ChatIcon: () => (/* binding */ ChatIcon_default),\n/* harmony export */   ChatToggle: () => (/* binding */ ChatToggle),\n/* harmony export */   Chevron: () => (/* binding */ Chevron_default),\n/* harmony export */   ClearPinButton: () => (/* binding */ ClearPinButton),\n/* harmony export */   ConnectionQualityIndicator: () => (/* binding */ ConnectionQualityIndicator),\n/* harmony export */   ConnectionState: () => (/* binding */ ConnectionState5),\n/* harmony export */   ConnectionStateToast: () => (/* binding */ ConnectionStateToast),\n/* harmony export */   ControlBar: () => (/* binding */ ControlBar),\n/* harmony export */   DisconnectButton: () => (/* binding */ DisconnectButton),\n/* harmony export */   FocusLayout: () => (/* binding */ FocusLayout),\n/* harmony export */   FocusLayoutContainer: () => (/* binding */ FocusLayoutContainer),\n/* harmony export */   FocusToggle: () => (/* binding */ FocusToggle),\n/* harmony export */   FocusToggleIcon: () => (/* binding */ FocusToggleIcon_default),\n/* harmony export */   GearIcon: () => (/* binding */ GearIcon_default),\n/* harmony export */   GridLayout: () => (/* binding */ GridLayout),\n/* harmony export */   LKFeatureContext: () => (/* binding */ LKFeatureContext),\n/* harmony export */   LayoutContext: () => (/* binding */ LayoutContext),\n/* harmony export */   LayoutContextProvider: () => (/* binding */ LayoutContextProvider),\n/* harmony export */   LeaveIcon: () => (/* binding */ LeaveIcon_default),\n/* harmony export */   LiveKitRoom: () => (/* binding */ LiveKitRoom),\n/* harmony export */   LockLockedIcon: () => (/* binding */ LockLockedIcon_default),\n/* harmony export */   MediaDeviceMenu: () => (/* binding */ MediaDeviceMenu),\n/* harmony export */   MediaDeviceSelect: () => (/* binding */ MediaDeviceSelect),\n/* harmony export */   MicDisabledIcon: () => (/* binding */ MicDisabledIcon_default),\n/* harmony export */   MicIcon: () => (/* binding */ MicIcon_default),\n/* harmony export */   ParticipantAudioTile: () => (/* binding */ ParticipantAudioTile),\n/* harmony export */   ParticipantContext: () => (/* binding */ ParticipantContext),\n/* harmony export */   ParticipantContextIfNeeded: () => (/* binding */ ParticipantContextIfNeeded),\n/* harmony export */   ParticipantLoop: () => (/* binding */ ParticipantLoop),\n/* harmony export */   ParticipantName: () => (/* binding */ ParticipantName),\n/* harmony export */   ParticipantPlaceholder: () => (/* binding */ ParticipantPlaceholder_default),\n/* harmony export */   ParticipantTile: () => (/* binding */ ParticipantTile),\n/* harmony export */   PreJoin: () => (/* binding */ PreJoin),\n/* harmony export */   QualityExcellentIcon: () => (/* binding */ QualityExcellentIcon_default),\n/* harmony export */   QualityGoodIcon: () => (/* binding */ QualityGoodIcon_default),\n/* harmony export */   QualityPoorIcon: () => (/* binding */ QualityPoorIcon_default),\n/* harmony export */   QualityUnknownIcon: () => (/* binding */ QualityUnknownIcon_default),\n/* harmony export */   RoomAudioRenderer: () => (/* binding */ RoomAudioRenderer),\n/* harmony export */   RoomContext: () => (/* binding */ RoomContext),\n/* harmony export */   RoomName: () => (/* binding */ RoomName),\n/* harmony export */   ScreenShareIcon: () => (/* binding */ ScreenShareIcon_default),\n/* harmony export */   ScreenShareStopIcon: () => (/* binding */ ScreenShareStopIcon_default),\n/* harmony export */   SpinnerIcon: () => (/* binding */ SpinnerIcon_default),\n/* harmony export */   StartAudio: () => (/* binding */ StartAudio),\n/* harmony export */   Toast: () => (/* binding */ Toast),\n/* harmony export */   TrackLoop: () => (/* binding */ TrackLoop),\n/* harmony export */   TrackMutedIndicator: () => (/* binding */ TrackMutedIndicator),\n/* harmony export */   TrackRefContext: () => (/* binding */ TrackRefContext),\n/* harmony export */   TrackRefContextIfNeeded: () => (/* binding */ TrackRefContextIfNeeded),\n/* harmony export */   TrackToggle: () => (/* binding */ TrackToggle),\n/* harmony export */   UnfocusToggleIcon: () => (/* binding */ UnfocusToggleIcon_default),\n/* harmony export */   VideoConference: () => (/* binding */ VideoConference),\n/* harmony export */   VideoTrack: () => (/* binding */ VideoTrack),\n/* harmony export */   VoiceAssistantContext: () => (/* binding */ VoiceAssistantContext),\n/* harmony export */   VoiceAssistantControlBar: () => (/* binding */ VoiceAssistantControlBar),\n/* harmony export */   formatChatMessageLinks: () => (/* binding */ formatChatMessageLinks),\n/* harmony export */   isTrackReference: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference),\n/* harmony export */   setLogExtension: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setLogExtension),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setLogLevel),\n/* harmony export */   useAudioPlayback: () => (/* binding */ useAudioPlayback),\n/* harmony export */   useAudioWaveform: () => (/* binding */ useAudioWaveform),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useChatToggle: () => (/* binding */ useChatToggle),\n/* harmony export */   useClearPinButton: () => (/* binding */ useClearPinButton),\n/* harmony export */   useConnectionQualityIndicator: () => (/* binding */ useConnectionQualityIndicator),\n/* harmony export */   useConnectionState: () => (/* binding */ useConnectionState),\n/* harmony export */   useCreateLayoutContext: () => (/* binding */ useCreateLayoutContext),\n/* harmony export */   useDataChannel: () => (/* binding */ useDataChannel),\n/* harmony export */   useDisconnectButton: () => (/* binding */ useDisconnectButton),\n/* harmony export */   useEnsureCreateLayoutContext: () => (/* binding */ useEnsureCreateLayoutContext),\n/* harmony export */   useEnsureLayoutContext: () => (/* binding */ useEnsureLayoutContext),\n/* harmony export */   useEnsureParticipant: () => (/* binding */ useEnsureParticipant),\n/* harmony export */   useEnsureRoom: () => (/* binding */ useEnsureRoom),\n/* harmony export */   useEnsureTrackRef: () => (/* binding */ useEnsureTrackRef),\n/* harmony export */   useFacingMode: () => (/* binding */ useFacingMode),\n/* harmony export */   useFeatureContext: () => (/* binding */ useFeatureContext),\n/* harmony export */   useFocusToggle: () => (/* binding */ useFocusToggle),\n/* harmony export */   useGridLayout: () => (/* binding */ useGridLayout),\n/* harmony export */   useIsEncrypted: () => (/* binding */ useIsEncrypted),\n/* harmony export */   useIsMuted: () => (/* binding */ useIsMuted),\n/* harmony export */   useIsRecording: () => (/* binding */ useIsRecording),\n/* harmony export */   useIsSpeaking: () => (/* binding */ useIsSpeaking),\n/* harmony export */   useLayoutContext: () => (/* binding */ useLayoutContext),\n/* harmony export */   useLiveKitRoom: () => (/* binding */ useLiveKitRoom),\n/* harmony export */   useLocalParticipant: () => (/* binding */ useLocalParticipant),\n/* harmony export */   useLocalParticipantPermissions: () => (/* binding */ useLocalParticipantPermissions),\n/* harmony export */   useMaybeLayoutContext: () => (/* binding */ useMaybeLayoutContext),\n/* harmony export */   useMaybeParticipantContext: () => (/* binding */ useMaybeParticipantContext),\n/* harmony export */   useMaybeRoomContext: () => (/* binding */ useMaybeRoomContext),\n/* harmony export */   useMaybeTrackRefContext: () => (/* binding */ useMaybeTrackRefContext),\n/* harmony export */   useMediaDeviceSelect: () => (/* binding */ useMediaDeviceSelect),\n/* harmony export */   useMediaDevices: () => (/* binding */ useMediaDevices),\n/* harmony export */   useMultibandTrackVolume: () => (/* binding */ useMultibandTrackVolume),\n/* harmony export */   usePagination: () => (/* binding */ usePagination),\n/* harmony export */   useParticipantAttribute: () => (/* binding */ useParticipantAttribute),\n/* harmony export */   useParticipantAttributes: () => (/* binding */ useParticipantAttributes),\n/* harmony export */   useParticipantContext: () => (/* binding */ useParticipantContext),\n/* harmony export */   useParticipantInfo: () => (/* binding */ useParticipantInfo),\n/* harmony export */   useParticipantPermissions: () => (/* binding */ useParticipantPermissions),\n/* harmony export */   useParticipantTile: () => (/* binding */ useParticipantTile),\n/* harmony export */   useParticipantTracks: () => (/* binding */ useParticipantTracks),\n/* harmony export */   useParticipants: () => (/* binding */ useParticipants),\n/* harmony export */   usePersistentUserChoices: () => (/* binding */ usePersistentUserChoices),\n/* harmony export */   usePinnedTracks: () => (/* binding */ usePinnedTracks),\n/* harmony export */   usePreviewDevice: () => (/* binding */ usePreviewDevice),\n/* harmony export */   usePreviewTracks: () => (/* binding */ usePreviewTracks),\n/* harmony export */   useRemoteParticipant: () => (/* binding */ useRemoteParticipant),\n/* harmony export */   useRemoteParticipants: () => (/* binding */ useRemoteParticipants),\n/* harmony export */   useRoomContext: () => (/* binding */ useRoomContext),\n/* harmony export */   useRoomInfo: () => (/* binding */ useRoomInfo),\n/* harmony export */   useSortedParticipants: () => (/* binding */ useSortedParticipants),\n/* harmony export */   useSpeakingParticipants: () => (/* binding */ useSpeakingParticipants),\n/* harmony export */   useStartAudio: () => (/* binding */ useStartAudio),\n/* harmony export */   useStartVideo: () => (/* binding */ useStartVideo),\n/* harmony export */   useSwipe: () => (/* binding */ useSwipe),\n/* harmony export */   useToken: () => (/* binding */ useToken),\n/* harmony export */   useTrackByName: () => (/* binding */ useTrackByName),\n/* harmony export */   useTrackMutedIndicator: () => (/* binding */ useTrackMutedIndicator),\n/* harmony export */   useTrackRefContext: () => (/* binding */ useTrackRefContext),\n/* harmony export */   useTrackToggle: () => (/* binding */ useTrackToggle),\n/* harmony export */   useTrackTranscription: () => (/* binding */ useTrackTranscription),\n/* harmony export */   useTrackVolume: () => (/* binding */ useTrackVolume),\n/* harmony export */   useTracks: () => (/* binding */ useTracks),\n/* harmony export */   useVisualStableUpdate: () => (/* binding */ useVisualStableUpdate),\n/* harmony export */   useVoiceAssistant: () => (/* binding */ useVoiceAssistant)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @livekit/components-core */ \"(ssr)/./node_modules/@livekit/components-core/dist/index.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var usehooks_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! usehooks-ts */ \"(ssr)/./node_modules/usehooks-ts/dist/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/components/controls/ClearPinButton.tsx\n\n\n// src/hooks/useAudioPlayback.ts\n\n\n// src/hooks/internal/useResizeObserver.ts\n\nvar useLatest = (current) => {\n  const storedValue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(current);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    storedValue.current = current;\n  });\n  return storedValue;\n};\nfunction useResizeObserver(target, callback) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = useLatest(callback);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    let didUnsubscribe = false;\n    const targetEl = target.current;\n    if (!targetEl) return;\n    function cb(entry, observer) {\n      if (didUnsubscribe) return;\n      storedCallback.current(entry, observer);\n    }\n    resizeObserver == null ? void 0 : resizeObserver.subscribe(targetEl, cb);\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver == null ? void 0 : resizeObserver.unsubscribe(targetEl, cb);\n    };\n  }, [target.current, resizeObserver, storedCallback]);\n  return resizeObserver == null ? void 0 : resizeObserver.observer;\n}\nfunction createResizeObserver() {\n  let ticking = false;\n  let allEntries = [];\n  const callbacks = /* @__PURE__ */ new Map();\n  if (typeof window === \"undefined\") {\n    return;\n  }\n  const observer = new ResizeObserver((entries, obs) => {\n    allEntries = allEntries.concat(entries);\n    if (!ticking) {\n      window.requestAnimationFrame(() => {\n        const triggered = /* @__PURE__ */ new Set();\n        for (let i = 0; i < allEntries.length; i++) {\n          if (triggered.has(allEntries[i].target)) continue;\n          triggered.add(allEntries[i].target);\n          const cbs = callbacks.get(allEntries[i].target);\n          cbs == null ? void 0 : cbs.forEach((cb) => cb(allEntries[i], obs));\n        }\n        allEntries = [];\n        ticking = false;\n      });\n    }\n    ticking = true;\n  });\n  return {\n    observer,\n    subscribe(target, callback) {\n      var _a;\n      observer.observe(target);\n      const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n      cbs.push(callback);\n      callbacks.set(target, cbs);\n    },\n    unsubscribe(target, callback) {\n      var _a;\n      const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n      if (cbs.length === 1) {\n        observer.unobserve(target);\n        callbacks.delete(target);\n        return;\n      }\n      const cbIndex = cbs.indexOf(callback);\n      if (cbIndex !== -1) cbs.splice(cbIndex, 1);\n      callbacks.set(target, cbs);\n    }\n  };\n}\nvar _resizeObserver;\nvar getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\nvar useSize = (target) => {\n  const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_0__.useState({ width: 0, height: 0 });\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (target.current) {\n      const { width, height } = target.current.getBoundingClientRect();\n      setSize({ width, height });\n    }\n  }, [target.current]);\n  const resizeCallback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (entry) => setSize(entry.contentRect),\n    []\n  );\n  useResizeObserver(target, resizeCallback);\n  return size;\n};\n\n// src/hooks/internal/useObservableState.ts\n\nfunction useObservableState(observable, startWith, resetWhenObservableChanges = true) {\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(startWith);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (resetWhenObservableChanges) {\n      setState(startWith);\n    }\n    if (typeof window === \"undefined\" || !observable) return;\n    const subscription = observable.subscribe(setState);\n    return () => subscription.unsubscribe();\n  }, [observable, resetWhenObservableChanges]);\n  return state;\n}\n\n// src/hooks/internal/useMediaQuery.ts\n\nfunction useMediaQuery(query) {\n  const getMatches = (query2) => {\n    if (typeof window !== \"undefined\") {\n      return window.matchMedia(query2).matches;\n    }\n    return false;\n  };\n  const [matches, setMatches] = react__WEBPACK_IMPORTED_MODULE_0__.useState(getMatches(query));\n  function handleChange() {\n    setMatches(getMatches(query));\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const matchMedia = window.matchMedia(query);\n    handleChange();\n    if (matchMedia.addListener) {\n      matchMedia.addListener(handleChange);\n    } else {\n      matchMedia.addEventListener(\"change\", handleChange);\n    }\n    return () => {\n      if (matchMedia.removeListener) {\n        matchMedia.removeListener(handleChange);\n      } else {\n        matchMedia.removeEventListener(\"change\", handleChange);\n      }\n    };\n  }, [query]);\n  return matches;\n}\n\n// src/hooks/useAudioPlayback.ts\n\n\n// src/context/layout-context.ts\n\n\n\n// src/context/chat-context.ts\nfunction chatReducer(state, action) {\n  if (action.msg === \"show_chat\") {\n    return __spreadProps(__spreadValues({}, state), { showChat: true, unreadMessages: 0 });\n  } else if (action.msg === \"hide_chat\") {\n    return __spreadProps(__spreadValues({}, state), { showChat: false });\n  } else if (action.msg === \"toggle_chat\") {\n    const newState = __spreadProps(__spreadValues({}, state), { showChat: !state.showChat });\n    if (newState.showChat === true) {\n      newState.unreadMessages = 0;\n    }\n    return newState;\n  } else if (action.msg === \"unread_msg\") {\n    return __spreadProps(__spreadValues({}, state), { unreadMessages: action.count });\n  } else if (action.msg === \"toggle_settings\") {\n    return __spreadProps(__spreadValues({}, state), { showSettings: !state.showSettings });\n  } else {\n    return __spreadValues({}, state);\n  }\n}\n\n// src/context/pin-context.ts\nfunction pinReducer(state, action) {\n  if (action.msg === \"set_pin\") {\n    return [action.trackReference];\n  } else if (action.msg === \"clear_pin\") {\n    return [];\n  } else {\n    return __spreadValues({}, state);\n  }\n}\n\n// src/context/layout-context.ts\nvar LayoutContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useLayoutContext() {\n  const layoutContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n  if (!layoutContext) {\n    throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n  }\n  return layoutContext;\n}\nfunction useEnsureLayoutContext(layoutContext) {\n  const layout = useMaybeLayoutContext();\n  layoutContext != null ? layoutContext : layoutContext = layout;\n  if (!layoutContext) {\n    throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n  }\n  return layoutContext;\n}\nfunction useCreateLayoutContext() {\n  const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.PIN_DEFAULT_STATE);\n  const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.WIDGET_DEFAULT_STATE);\n  return {\n    pin: { dispatch: pinDispatch, state: pinState },\n    widget: { dispatch: widgetDispatch, state: widgetState }\n  };\n}\nfunction useEnsureCreateLayoutContext(layoutContext) {\n  const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.PIN_DEFAULT_STATE);\n  const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.WIDGET_DEFAULT_STATE);\n  return layoutContext != null ? layoutContext : {\n    pin: { dispatch: pinDispatch, state: pinState },\n    widget: { dispatch: widgetDispatch, state: widgetState }\n  };\n}\nfunction useMaybeLayoutContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n}\n\n// src/context/participant-context.ts\n\n\n// src/context/track-reference-context.ts\n\nvar TrackRefContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(\n  void 0\n);\nfunction useTrackRefContext() {\n  const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n  if (!trackReference) {\n    throw Error(\"tried to access track context outside of track context provider\");\n  }\n  return trackReference;\n}\nfunction useMaybeTrackRefContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n}\nfunction useEnsureTrackRef(trackRef) {\n  const context = useMaybeTrackRefContext();\n  const ref = trackRef != null ? trackRef : context;\n  if (!ref) {\n    throw new Error(\n      \"No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly\"\n    );\n  }\n  return ref;\n}\n\n// src/context/participant-context.ts\nvar ParticipantContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useParticipantContext() {\n  const participant = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n  if (!participant) {\n    throw Error(\"tried to access participant context outside of participant context provider\");\n  }\n  return participant;\n}\nfunction useMaybeParticipantContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n}\nfunction useEnsureParticipant(participant) {\n  var _a;\n  const context = useMaybeParticipantContext();\n  const trackContext = useMaybeTrackRefContext();\n  const p = (_a = participant != null ? participant : context) != null ? _a : trackContext == null ? void 0 : trackContext.participant;\n  if (!p) {\n    throw new Error(\n      \"No participant provided, make sure you are inside a participant context or pass the participant explicitly\"\n    );\n  }\n  return p;\n}\n\n// src/context/room-context.ts\n\nvar RoomContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useRoomContext() {\n  const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n  if (!ctx) {\n    throw Error(\"tried to access room context outside of livekit room component\");\n  }\n  return ctx;\n}\nfunction useMaybeRoomContext() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n}\nfunction useEnsureRoom(room) {\n  const context = useMaybeRoomContext();\n  const r = room != null ? room : context;\n  if (!r) {\n    throw new Error(\n      \"No room provided, make sure you are inside a Room context or pass the room explicitly\"\n    );\n  }\n  return r;\n}\n\n// src/context/feature-context.ts\n\nvar LKFeatureContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useFeatureContext(require2) {\n  const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LKFeatureContext);\n  if (require2 === true) {\n    if (ctx) {\n      return ctx;\n    } else {\n      throw Error(\"tried to access feature context, but none is present\");\n    }\n  }\n  return ctx;\n}\n\n// src/context/voice-assistant-context.ts\n\nvar VoiceAssistantContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\n\n// src/hooks/useAudioPlayback.ts\nfunction useAudioPlayback(room) {\n  const roomEnsured = useEnsureRoom(room);\n  const startAudio = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => __async(this, null, function* () {\n    yield roomEnsured.startAudio();\n  }), [roomEnsured]);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.roomAudioPlaybackAllowedObservable)(roomEnsured),\n    [roomEnsured]\n  );\n  const { canPlayAudio } = useObservableState(observable, {\n    canPlayAudio: roomEnsured.canPlaybackAudio\n  });\n  return { canPlayAudio, startAudio };\n}\n\n// src/hooks/useClearPinButton.ts\n\n\n\n// src/mergeProps.ts\n\nfunction chain(...callbacks) {\n  return (...args) => {\n    for (const callback of callbacks) {\n      if (typeof callback === \"function\") {\n        try {\n          callback(...args);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  };\n}\nfunction mergeProps(...args) {\n  const result = __spreadValues({}, args[0]);\n  for (let i = 1; i < args.length; i++) {\n    const props = args[i];\n    for (const key in props) {\n      const a = result[key];\n      const b = props[key];\n      if (typeof a === \"function\" && typeof b === \"function\" && // This is a lot faster than a regex.\n      key[0] === \"o\" && key[1] === \"n\" && key.charCodeAt(2) >= /* 'A' */\n      65 && key.charCodeAt(2) <= /* 'Z' */\n      90) {\n        result[key] = chain(a, b);\n      } else if ((key === \"className\" || key === \"UNSAFE_className\") && typeof a === \"string\" && typeof b === \"string\") {\n        result[key] = (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(a, b);\n      } else {\n        result[key] = b !== void 0 ? b : a;\n      }\n    }\n  }\n  return result;\n}\n\n// src/hooks/useClearPinButton.ts\nfunction useClearPinButton(props) {\n  const { state, dispatch } = useLayoutContext().pin;\n  const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupClearPinButton)();\n    const mergedProps = mergeProps(props, {\n      className,\n      disabled: !(state == null ? void 0 : state.length),\n      onClick: () => {\n        if (dispatch) dispatch({ msg: \"clear_pin\" });\n      }\n    });\n    return mergedProps;\n  }, [props, dispatch, state]);\n  return { buttonProps };\n}\n\n// src/hooks/useConnectionQualityIndicator.ts\n\n\n\nfunction useConnectionQualityIndicator(options = {}) {\n  const p = useEnsureParticipant(options.participant);\n  const { className, connectionQualityObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupConnectionQualityIndicator)(p),\n    [p]\n  );\n  const quality = useObservableState(connectionQualityObserver, livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionQuality.Unknown);\n  return { className, quality };\n}\n\n// src/hooks/useConnectionStatus.ts\n\n\nfunction useConnectionState(room) {\n  const r = useEnsureRoom(room);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.connectionStateObserver)(r), [r]);\n  const connectionState = useObservableState(observable, r.state);\n  return connectionState;\n}\n\n// src/hooks/useDataChannel.ts\n\n\nfunction useDataChannel(topicOrCallback, callback) {\n  const onMessage = typeof topicOrCallback === \"function\" ? topicOrCallback : callback;\n  const topic = typeof topicOrCallback === \"string\" ? topicOrCallback : void 0;\n  const room = useRoomContext();\n  const { send, messageObservable, isSendingObservable } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupDataMessageHandler)(room, topic, onMessage),\n    [room, topic, onMessage]\n  );\n  const message = useObservableState(messageObservable, void 0);\n  const isSending = useObservableState(isSendingObservable, false);\n  return {\n    message,\n    send,\n    isSending\n  };\n}\n\n// src/hooks/useDisconnectButton.ts\n\n\n\nfunction useDisconnectButton(props) {\n  const room = useRoomContext();\n  const connectionState = useConnectionState(room);\n  const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className, disconnect } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupDisconnectButton)(room);\n    const mergedProps = mergeProps(props, {\n      className,\n      onClick: () => {\n        var _a;\n        return disconnect((_a = props.stopTracks) != null ? _a : true);\n      },\n      disabled: connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Disconnected\n    });\n    return mergedProps;\n  }, [room, props, connectionState]);\n  return { buttonProps };\n}\n\n// src/hooks/useFacingMode.ts\n\nfunction useFacingMode(trackReference) {\n  if (trackReference.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.LocalTrackPublication) {\n    const localTrack = trackReference.publication.track;\n    if (localTrack) {\n      const { facingMode } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.facingModeFromLocalTrack)(localTrack);\n      return facingMode;\n    }\n  }\n  return \"undefined\";\n}\n\n// src/hooks/useFocusToggle.ts\n\n\nfunction useFocusToggle({ trackRef, props }) {\n  const trackReference = useEnsureTrackRef(trackRef);\n  const layoutContext = useMaybeLayoutContext();\n  const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupFocusToggle)(), []);\n  const inFocus = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReferencePinned)(trackReference, layoutContext == null ? void 0 : layoutContext.pin.state);\n  }, [trackReference, layoutContext == null ? void 0 : layoutContext.pin.state]);\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps(props, {\n      className,\n      onClick: (event) => {\n        var _a, _b, _c, _d, _e;\n        (_a = props.onClick) == null ? void 0 : _a.call(props, event);\n        if (inFocus) {\n          (_c = layoutContext == null ? void 0 : (_b = layoutContext.pin).dispatch) == null ? void 0 : _c.call(_b, {\n            msg: \"clear_pin\"\n          });\n        } else {\n          (_e = layoutContext == null ? void 0 : (_d = layoutContext.pin).dispatch) == null ? void 0 : _e.call(_d, {\n            msg: \"set_pin\",\n            trackReference\n          });\n        }\n      }\n    }),\n    [props, className, trackReference, inFocus, layoutContext == null ? void 0 : layoutContext.pin]\n  );\n  return { mergedProps, inFocus };\n}\n\n// src/hooks/useGridLayout.ts\n\n\nfunction useGridLayout(gridElement, trackCount, options = {}) {\n  var _a;\n  const gridLayouts = (_a = options.gridLayouts) != null ? _a : _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.GRID_LAYOUTS;\n  const { width, height } = useSize(gridElement);\n  const layout = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.selectGridLayout)(gridLayouts, trackCount, width, height);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (gridElement.current && layout) {\n      gridElement.current.style.setProperty(\"--lk-col-count\", layout == null ? void 0 : layout.columns.toString());\n      gridElement.current.style.setProperty(\"--lk-row-count\", layout == null ? void 0 : layout.rows.toString());\n    }\n  }, [gridElement, layout]);\n  return {\n    layout,\n    containerWidth: width,\n    containerHeight: height\n  };\n}\n\n// src/hooks/useIsMuted.ts\n\n\nfunction useIsMuted(sourceOrTrackRef, options = {}) {\n  var _a, _b;\n  const passedParticipant = typeof sourceOrTrackRef === \"string\" ? options.participant : sourceOrTrackRef.participant;\n  const p = useEnsureParticipant(passedParticipant);\n  const ref = typeof sourceOrTrackRef === \"string\" ? { participant: p, source: sourceOrTrackRef } : sourceOrTrackRef;\n  const [isMuted, setIsMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    !!(((_a = ref.publication) == null ? void 0 : _a.isMuted) || ((_b = p.getTrackPublication(ref.source)) == null ? void 0 : _b.isMuted))\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.mutedObserver)(ref).subscribe(setIsMuted);\n    return () => listener.unsubscribe();\n  }, [(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackReferenceId)(ref)]);\n  return isMuted;\n}\n\n// src/hooks/useIsSpeaking.ts\n\n\nfunction useIsSpeaking(participant) {\n  const p = useEnsureParticipant(participant);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.createIsSpeakingObserver)(p), [p]);\n  const isSpeaking = useObservableState(observable, p.isSpeaking);\n  return isSpeaking;\n}\n\n// src/hooks/useLiveKitRoom.ts\n\n\n\nvar defaultRoomProps = {\n  connect: true,\n  audio: false,\n  video: false\n};\nfunction useLiveKitRoom(props) {\n  const _a = __spreadValues(__spreadValues({}, defaultRoomProps), props), {\n    token,\n    serverUrl,\n    options,\n    room: passedRoom,\n    connectOptions,\n    connect,\n    audio,\n    video,\n    screen,\n    onConnected,\n    onDisconnected,\n    onError,\n    onMediaDeviceFailure,\n    onEncryptionError,\n    simulateParticipants\n  } = _a, rest = __objRest(_a, [\n    \"token\",\n    \"serverUrl\",\n    \"options\",\n    \"room\",\n    \"connectOptions\",\n    \"connect\",\n    \"audio\",\n    \"video\",\n    \"screen\",\n    \"onConnected\",\n    \"onDisconnected\",\n    \"onError\",\n    \"onMediaDeviceFailure\",\n    \"onEncryptionError\",\n    \"simulateParticipants\"\n  ]);\n  if (options && passedRoom) {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(\n      \"when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.\"\n    );\n  }\n  const [room, setRoom] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setRoom(passedRoom != null ? passedRoom : new livekit_client__WEBPACK_IMPORTED_MODULE_3__.Room(options));\n  }, [passedRoom]);\n  const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupLiveKitRoom)();\n    return mergeProps(rest, { className });\n  }, [rest]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room) return;\n    const onSignalConnected = () => {\n      const localP = room.localParticipant;\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"trying to publish local tracks\");\n      Promise.all([\n        localP.setMicrophoneEnabled(!!audio, typeof audio !== \"boolean\" ? audio : void 0),\n        localP.setCameraEnabled(!!video, typeof video !== \"boolean\" ? video : void 0),\n        localP.setScreenShareEnabled(!!screen, typeof screen !== \"boolean\" ? screen : void 0)\n      ]).catch((e) => {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(e);\n        onError == null ? void 0 : onError(e);\n      });\n    };\n    const handleMediaDeviceError = (e) => {\n      const mediaDeviceFailure = livekit_client__WEBPACK_IMPORTED_MODULE_3__.MediaDeviceFailure.getFailure(e);\n      onMediaDeviceFailure == null ? void 0 : onMediaDeviceFailure(mediaDeviceFailure);\n    };\n    const handleEncryptionError = (e) => {\n      onEncryptionError == null ? void 0 : onEncryptionError(e);\n    };\n    room.on(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.SignalConnected, onSignalConnected).on(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.MediaDevicesError, handleMediaDeviceError).on(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.EncryptionError, handleEncryptionError);\n    return () => {\n      room.off(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.SignalConnected, onSignalConnected).off(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.MediaDevicesError, handleMediaDeviceError).off(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.EncryptionError, handleEncryptionError);\n    };\n  }, [room, audio, video, screen, onError, onEncryptionError, onMediaDeviceFailure]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room) return;\n    if (simulateParticipants) {\n      room.simulateParticipants({\n        participants: {\n          count: simulateParticipants\n        },\n        publish: {\n          audio: true,\n          useRealTracks: true\n        }\n      });\n      return;\n    }\n    if (!token) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"no token yet\");\n      return;\n    }\n    if (!serverUrl) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"no livekit url provided\");\n      onError == null ? void 0 : onError(Error(\"no livekit url provided\"));\n      return;\n    }\n    if (connect) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"connecting\");\n      room.connect(serverUrl, token, connectOptions).catch((e) => {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(e);\n        onError == null ? void 0 : onError(e);\n      });\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"disconnecting because connect is false\");\n      room.disconnect();\n    }\n  }, [\n    connect,\n    token,\n    JSON.stringify(connectOptions),\n    room,\n    onError,\n    serverUrl,\n    simulateParticipants\n  ]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room) return;\n    const connectionStateChangeListener = (state) => {\n      switch (state) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Disconnected:\n          if (onDisconnected) onDisconnected();\n          break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Connected:\n          if (onConnected) onConnected();\n          break;\n        default:\n          break;\n      }\n    };\n    room.on(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n    return () => {\n      room.off(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n    };\n  }, [token, onConnected, onDisconnected, room]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!room) return;\n    return () => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.info(\"disconnecting on onmount\");\n      room.disconnect();\n    };\n  }, [room]);\n  return { room, htmlProps };\n}\n\n// src/hooks/useLocalParticipant.ts\n\n\nfunction useLocalParticipant(options = {}) {\n  const room = useEnsureRoom(options.room);\n  const [localParticipant, setLocalParticipant] = react__WEBPACK_IMPORTED_MODULE_0__.useState(room.localParticipant);\n  const [isMicrophoneEnabled, setIsMicrophoneEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.isMicrophoneEnabled\n  );\n  const [isCameraEnabled, setIsCameraEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.isMicrophoneEnabled\n  );\n  const [lastMicrophoneError, setLastMicrophoneError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.lastMicrophoneError\n  );\n  const [lastCameraError, setLastCameraError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.lastCameraError);\n  const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    localParticipant.isMicrophoneEnabled\n  );\n  const [microphoneTrack, setMicrophoneTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    void 0\n  );\n  const [cameraTrack, setCameraTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  const handleUpdate = (media) => {\n    setIsCameraEnabled(media.isCameraEnabled);\n    setIsMicrophoneEnabled(media.isMicrophoneEnabled);\n    setIsScreenShareEnabled(media.isScreenShareEnabled);\n    setCameraTrack(media.cameraTrack);\n    setMicrophoneTrack(media.microphoneTrack);\n    setLastMicrophoneError(media.participant.lastMicrophoneError);\n    setLastCameraError(media.participant.lastCameraError);\n    setLocalParticipant(media.participant);\n  };\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.observeParticipantMedia)(room.localParticipant).subscribe(handleUpdate);\n    return () => listener.unsubscribe();\n  }, [room]);\n  return {\n    isMicrophoneEnabled,\n    isScreenShareEnabled,\n    isCameraEnabled,\n    microphoneTrack,\n    cameraTrack,\n    lastMicrophoneError,\n    lastCameraError,\n    localParticipant\n  };\n}\n\n// src/hooks/useLocalParticipantPermissions.ts\n\n\nfunction useLocalParticipantPermissions() {\n  const room = useRoomContext();\n  const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantPermissionObserver)(room.localParticipant),\n    [room]\n  );\n  const permissions = useObservableState(permissionObserver, room.localParticipant.permissions);\n  return permissions;\n}\n\n// src/hooks/useMediaDeviceSelect.ts\n\n\nfunction useMediaDeviceSelect({\n  kind,\n  room,\n  track,\n  requestPermissions,\n  onError\n}) {\n  const roomContext = useMaybeRoomContext();\n  const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.createMediaDeviceObserver)(kind, onError, requestPermissions),\n    [kind, requestPermissions, onError]\n  );\n  const devices = useObservableState(deviceObserver, []);\n  const [currentDeviceId, setCurrentDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"\");\n  const { className, activeDeviceObservable, setActiveMediaDevice } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupDeviceSelector)(kind, room != null ? room : roomContext, track),\n    [kind, room, roomContext, track]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = activeDeviceObservable.subscribe((deviceId) => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.info(\"setCurrentDeviceId\", deviceId);\n      if (deviceId) setCurrentDeviceId(deviceId);\n    });\n    return () => {\n      listener == null ? void 0 : listener.unsubscribe();\n    };\n  }, [activeDeviceObservable]);\n  return { devices, className, activeDeviceId: currentDeviceId, setActiveMediaDevice };\n}\n\n// src/hooks/useMediaDevices.ts\n\n\nfunction useMediaDevices({\n  kind,\n  onError\n}) {\n  const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.createMediaDeviceObserver)(kind, onError),\n    [kind, onError]\n  );\n  const devices = useObservableState(deviceObserver, []);\n  return devices;\n}\n\n// src/hooks/usePagination.ts\n\n\n// src/hooks/useVisualStableUpdate.ts\n\n\nfunction useVisualStableUpdate(trackReferences, maxItemsOnPage, options = {}) {\n  const lastTrackRefs = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n  const lastMaxItemsOnPage = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n  const layoutChanged = maxItemsOnPage !== lastMaxItemsOnPage.current;\n  const sortedTrackRefs = typeof options.customSortFunction === \"function\" ? options.customSortFunction(trackReferences) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.sortTrackReferences)(trackReferences);\n  let updatedTrackRefs = [...sortedTrackRefs];\n  if (layoutChanged === false) {\n    try {\n      updatedTrackRefs = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.updatePages)(lastTrackRefs.current, sortedTrackRefs, maxItemsOnPage);\n    } catch (error) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Error while running updatePages(): \", error);\n    }\n  }\n  if (layoutChanged) {\n    lastTrackRefs.current = sortedTrackRefs;\n  } else {\n    lastTrackRefs.current = updatedTrackRefs;\n  }\n  lastMaxItemsOnPage.current = maxItemsOnPage;\n  return updatedTrackRefs;\n}\n\n// src/hooks/usePagination.ts\nfunction usePagination(itemPerPage, trackReferences) {\n  const [currentPage, setCurrentPage] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1);\n  const totalPageCount = Math.max(Math.ceil(trackReferences.length / itemPerPage), 1);\n  if (currentPage > totalPageCount) {\n    setCurrentPage(totalPageCount);\n  }\n  const lastItemIndex = currentPage * itemPerPage;\n  const firstItemIndex = lastItemIndex - itemPerPage;\n  const changePage = (direction) => {\n    setCurrentPage((state) => {\n      if (direction === \"next\") {\n        if (state === totalPageCount) {\n          return state;\n        }\n        return state + 1;\n      } else {\n        if (state === 1) {\n          return state;\n        }\n        return state - 1;\n      }\n    });\n  };\n  const goToPage = (num) => {\n    if (num > totalPageCount) {\n      setCurrentPage(totalPageCount);\n    } else if (num < 1) {\n      setCurrentPage(1);\n    } else {\n      setCurrentPage(num);\n    }\n  };\n  const updatedTrackReferences = useVisualStableUpdate(trackReferences, itemPerPage);\n  const tracksOnPage = updatedTrackReferences.slice(firstItemIndex, lastItemIndex);\n  return {\n    totalPageCount,\n    nextPage: () => changePage(\"next\"),\n    prevPage: () => changePage(\"previous\"),\n    setPage: goToPage,\n    firstItemIndex,\n    lastItemIndex,\n    tracks: tracksOnPage,\n    currentPage\n  };\n}\n\n// src/hooks/useParticipantInfo.ts\n\n\nfunction useParticipantInfo(props = {}) {\n  let p = useMaybeParticipantContext();\n  if (props.participant) {\n    p = props.participant;\n  }\n  const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantInfoObserver)(p), [p]);\n  const { identity, name, metadata } = useObservableState(infoObserver, {\n    name: p == null ? void 0 : p.name,\n    identity: p == null ? void 0 : p.identity,\n    metadata: p == null ? void 0 : p.metadata\n  });\n  return { identity, name, metadata };\n}\n\n// src/hooks/useParticipantPermissions.ts\n\n\nfunction useParticipantPermissions(options = {}) {\n  const p = useEnsureParticipant(options.participant);\n  const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantPermissionObserver)(p), [p]);\n  const permissions = useObservableState(permissionObserver, p.permissions);\n  return permissions;\n}\n\n// src/hooks/useParticipantTile.ts\n\n\n\nfunction useParticipantTile({\n  trackRef,\n  onParticipantClick,\n  disableSpeakingIndicator,\n  htmlProps\n}) {\n  const trackReference = useEnsureTrackRef(trackRef);\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupParticipantTile)();\n    return mergeProps(htmlProps, {\n      className,\n      onClick: (event) => {\n        var _a, _b;\n        (_a = htmlProps.onClick) == null ? void 0 : _a.call(htmlProps, event);\n        if (typeof onParticipantClick === \"function\") {\n          const track = (_b = trackReference.publication) != null ? _b : trackReference.participant.getTrackPublication(trackReference.source);\n          onParticipantClick({ participant: trackReference.participant, track });\n        }\n      }\n    });\n  }, [\n    htmlProps,\n    onParticipantClick,\n    trackReference.publication,\n    trackReference.source,\n    trackReference.participant\n  ]);\n  const micTrack = trackReference.participant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone);\n  const micRef = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return {\n      participant: trackReference.participant,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone,\n      publication: micTrack\n    };\n  }, [micTrack, trackReference.participant]);\n  const isVideoMuted = useIsMuted(trackReference);\n  const isAudioMuted = useIsMuted(micRef);\n  const isSpeaking = useIsSpeaking(trackReference.participant);\n  const facingMode = useFacingMode(trackReference);\n  return {\n    elementProps: __spreadValues({\n      \"data-lk-audio-muted\": isAudioMuted,\n      \"data-lk-video-muted\": isVideoMuted,\n      \"data-lk-speaking\": disableSpeakingIndicator === true ? false : isSpeaking,\n      \"data-lk-local-participant\": trackReference.participant.isLocal,\n      \"data-lk-source\": trackReference.source,\n      \"data-lk-facing-mode\": facingMode\n    }, mergedProps)\n  };\n}\n\n// src/hooks/useRemoteParticipants.ts\n\n\nfunction useRemoteParticipants(options = {}) {\n  const room = useEnsureRoom(options.room);\n  const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.connectedParticipantsObserver)(room, {\n      additionalRoomEvents: options.updateOnlyOn\n    }).subscribe(setParticipants);\n    return () => listener.unsubscribe();\n  }, [room, JSON.stringify(options.updateOnlyOn)]);\n  return participants;\n}\n\n// src/hooks/useParticipants.ts\n\nfunction useParticipants(options = {}) {\n  const remoteParticipants = useRemoteParticipants(options);\n  const { localParticipant } = useLocalParticipant(options);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => [localParticipant, ...remoteParticipants],\n    [localParticipant, remoteParticipants]\n  );\n}\n\n// src/hooks/usePinnedTracks.ts\n\nfunction usePinnedTracks(layoutContext) {\n  layoutContext = useEnsureLayoutContext(layoutContext);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if ((layoutContext == null ? void 0 : layoutContext.pin.state) !== void 0 && layoutContext.pin.state.length >= 1) {\n      return layoutContext.pin.state;\n    }\n    return [];\n  }, [layoutContext.pin.state]);\n}\n\n// src/hooks/useRemoteParticipant.ts\n\n\nfunction useRemoteParticipant(identityOrIdentifier, options = {}) {\n  const room = useRoomContext();\n  const [updateOnlyOn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(options.updateOnlyOn);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (typeof identityOrIdentifier === \"string\") {\n      return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.connectedParticipantObserver)(room, identityOrIdentifier, {\n        additionalEvents: updateOnlyOn\n      });\n    } else {\n      return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantByIdentifierObserver)(room, identityOrIdentifier, {\n        additionalEvents: updateOnlyOn\n      });\n    }\n  }, [room, JSON.stringify(identityOrIdentifier), updateOnlyOn]);\n  const [participantWrapper, setParticipantWrapper] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    p: void 0\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = observable.subscribe((p) => setParticipantWrapper({ p }));\n    return () => listener.unsubscribe();\n  }, [observable]);\n  return participantWrapper.p;\n}\n\n// src/hooks/useRoomInfo.ts\n\n\nfunction useRoomInfo(options = {}) {\n  const room = useEnsureRoom(options.room);\n  const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.roomInfoObserver)(room), [room]);\n  const { name, metadata } = useObservableState(infoObserver, {\n    name: room.name,\n    metadata: room.metadata\n  });\n  return { name, metadata };\n}\n\n// src/hooks/useSortedParticipants.ts\n\n\n\n// src/hooks/useSpeakingParticipants.ts\n\n\nfunction useSpeakingParticipants() {\n  const room = useRoomContext();\n  const speakerObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.activeSpeakerObserver)(room), [room]);\n  const activeSpeakers = useObservableState(speakerObserver, room.activeSpeakers);\n  return activeSpeakers;\n}\n\n// src/hooks/useSortedParticipants.ts\nfunction useSortedParticipants(participants) {\n  const [sortedParticipants, setSortedParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.sortParticipants)(participants)\n  );\n  const activeSpeakers = useSpeakingParticipants();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setSortedParticipants((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.sortParticipants)(participants));\n  }, [activeSpeakers, participants]);\n  return sortedParticipants;\n}\n\n// src/hooks/useStartAudio.ts\n\n\nfunction useStartAudio({ room, props }) {\n  const roomEnsured = useEnsureRoom(room);\n  const { className, roomAudioPlaybackAllowedObservable: roomAudioPlaybackAllowedObservable2, handleStartAudioPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupStartAudio)(),\n    []\n  );\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => roomAudioPlaybackAllowedObservable2(roomEnsured),\n    [roomEnsured, roomAudioPlaybackAllowedObservable2]\n  );\n  const { canPlayAudio } = useObservableState(observable, {\n    canPlayAudio: roomEnsured.canPlaybackAudio\n  });\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps(props, {\n      className,\n      onClick: () => {\n        handleStartAudioPlayback(roomEnsured);\n      },\n      style: { display: canPlayAudio ? \"none\" : \"block\" }\n    }),\n    [props, className, canPlayAudio, handleStartAudioPlayback, roomEnsured]\n  );\n  return { mergedProps, canPlayAudio };\n}\n\n// src/hooks/useStartVideo.ts\n\n\nfunction useStartVideo({ room, props }) {\n  const roomEnsured = useEnsureRoom(room);\n  const { className, roomVideoPlaybackAllowedObservable, handleStartVideoPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupStartVideo)(),\n    []\n  );\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => roomVideoPlaybackAllowedObservable(roomEnsured),\n    [roomEnsured, roomVideoPlaybackAllowedObservable]\n  );\n  const { canPlayVideo } = useObservableState(observable, {\n    canPlayVideo: roomEnsured.canPlaybackVideo\n  });\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps(props, {\n      className,\n      onClick: () => {\n        handleStartVideoPlayback(roomEnsured);\n      },\n      style: { display: canPlayVideo ? \"none\" : \"block\" }\n    }),\n    [props, className, canPlayVideo, handleStartVideoPlayback, roomEnsured]\n  );\n  return { mergedProps, canPlayVideo };\n}\n\n// src/hooks/useSwipe.ts\n\nfunction useSwipe(element, options = {}) {\n  var _a;\n  const touchStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const touchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const minSwipeDistance = (_a = options.minSwipeDistance) != null ? _a : 50;\n  const onTouchStart = (event) => {\n    touchEnd.current = null;\n    touchStart.current = event.targetTouches[0].clientX;\n  };\n  const onTouchMove = (event) => {\n    touchEnd.current = event.targetTouches[0].clientX;\n  };\n  const onTouchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (!touchStart.current || !touchEnd.current) {\n      return;\n    }\n    const distance = touchStart.current - touchEnd.current;\n    const isLeftSwipe = distance > minSwipeDistance;\n    const isRightSwipe = distance < -minSwipeDistance;\n    if (isLeftSwipe && options.onLeftSwipe) options.onLeftSwipe();\n    if (isRightSwipe && options.onRightSwipe) options.onRightSwipe();\n  }, [minSwipeDistance, options]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const elementCopy = element.current;\n    if (elementCopy) {\n      elementCopy.addEventListener(\"touchstart\", onTouchStart, { passive: true });\n      elementCopy.addEventListener(\"touchmove\", onTouchMove, { passive: true });\n      elementCopy.addEventListener(\"touchend\", onTouchEnd, { passive: true });\n    }\n    return () => {\n      if (elementCopy) {\n        elementCopy.removeEventListener(\"touchstart\", onTouchStart);\n        elementCopy.removeEventListener(\"touchmove\", onTouchMove);\n        elementCopy.removeEventListener(\"touchend\", onTouchEnd);\n      }\n    };\n  }, [element, onTouchEnd]);\n}\n\n// src/hooks/useChatToggle.ts\n\n\nfunction useChatToggle({ props }) {\n  const { dispatch, state } = useLayoutContext().widget;\n  const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupChatToggle)(), []);\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return mergeProps(props, {\n      className,\n      onClick: () => {\n        if (dispatch) dispatch({ msg: \"toggle_chat\" });\n      },\n      \"aria-pressed\": (state == null ? void 0 : state.showChat) ? \"true\" : \"false\",\n      \"data-lk-unread-msgs\": state ? state.unreadMessages < 10 ? state.unreadMessages.toFixed(0) : \"9+\" : \"0\"\n    });\n  }, [props, className, dispatch, state]);\n  return { mergedProps };\n}\n\n// src/hooks/useToken.ts\n\n\nfunction useToken(tokenEndpoint, roomName, options = {}) {\n  const [token, setToken] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a;\n    if (tokenEndpoint === void 0) {\n      throw Error(\"token endpoint needs to be defined\");\n    }\n    if (((_a = options.userInfo) == null ? void 0 : _a.identity) === void 0) {\n      return;\n    }\n    const tokenFetcher = () => __async(this, null, function* () {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"fetching token\");\n      const params = new URLSearchParams(__spreadProps(__spreadValues({}, options.userInfo), { roomName }));\n      const res = yield fetch(`${tokenEndpoint}?${params.toString()}`);\n      if (!res.ok) {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.error(\n          `Could not fetch token. Server responded with status ${res.status}: ${res.statusText}`\n        );\n        return;\n      }\n      const { accessToken } = yield res.json();\n      setToken(accessToken);\n    });\n    tokenFetcher();\n  }, [tokenEndpoint, roomName, JSON.stringify(options)]);\n  return token;\n}\n\n// src/hooks/useTrackMutedIndicator.ts\n\n\nfunction useTrackMutedIndicator(trackRef) {\n  var _a, _b;\n  const trackReference = useEnsureTrackRef(trackRef);\n  const { className, mediaMutedObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupTrackMutedIndicator)(trackReference),\n    [(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackReferenceId)(trackReference)]\n  );\n  const isMuted = useObservableState(\n    mediaMutedObserver,\n    !!(((_a = trackReference.publication) == null ? void 0 : _a.isMuted) || ((_b = trackReference.participant.getTrackPublication(trackReference.source)) == null ? void 0 : _b.isMuted))\n  );\n  return { isMuted, className };\n}\n\n// src/hooks/useTrackToggle.ts\n\n\nfunction useTrackToggle(_a) {\n  var _b = _a, {\n    source,\n    onChange,\n    initialState,\n    captureOptions,\n    publishOptions,\n    onDeviceError\n  } = _b, rest = __objRest(_b, [\n    \"source\",\n    \"onChange\",\n    \"initialState\",\n    \"captureOptions\",\n    \"publishOptions\",\n    \"onDeviceError\"\n  ]);\n  var _a2;\n  const room = useMaybeRoomContext();\n  const track = (_a2 = room == null ? void 0 : room.localParticipant) == null ? void 0 : _a2.getTrackPublication(source);\n  const userInteractionRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const { toggle, className, pendingObserver, enabledObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => room ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupMediaToggle)(source, room, captureOptions, publishOptions, onDeviceError) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupManualToggle)(),\n    [room, source, JSON.stringify(captureOptions), publishOptions]\n  );\n  const pending = useObservableState(pendingObserver, false);\n  const enabled = useObservableState(enabledObserver, initialState != null ? initialState : !!(track == null ? void 0 : track.isEnabled));\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    onChange == null ? void 0 : onChange(enabled, userInteractionRef.current);\n    userInteractionRef.current = false;\n  }, [enabled, onChange]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (initialState !== void 0) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"forcing initial toggle state\", source, initialState);\n      toggle(initialState);\n    }\n  }, []);\n  const newProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => mergeProps(rest, { className }), [rest, className]);\n  const clickHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (evt) => {\n      var _a3;\n      userInteractionRef.current = true;\n      toggle().catch(() => userInteractionRef.current = false);\n      (_a3 = rest.onClick) == null ? void 0 : _a3.call(rest, evt);\n    },\n    [rest, toggle]\n  );\n  return {\n    toggle,\n    enabled,\n    pending,\n    track,\n    buttonProps: __spreadProps(__spreadValues({}, newProps), {\n      \"aria-pressed\": enabled,\n      \"data-lk-source\": source,\n      \"data-lk-enabled\": enabled,\n      disabled: pending,\n      onClick: clickHandler\n    })\n  };\n}\n\n// src/hooks/useTracks.ts\n\n\n\nfunction useTracks(sources = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera,\n  livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone,\n  livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare,\n  livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShareAudio,\n  livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Unknown\n], options = {}) {\n  const room = useEnsureRoom(options.room);\n  const [trackReferences, setTrackReferences] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const sources_ = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return sources.map((s) => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isSourceWitOptions)(s) ? s.source : s);\n  }, [JSON.stringify(sources)]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.trackReferencesObservable)(room, sources_, {\n      additionalRoomEvents: options.updateOnlyOn,\n      onlySubscribed: options.onlySubscribed\n    }).subscribe(({ trackReferences: trackReferences2, participants: participants2 }) => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"setting track bundles\", trackReferences2, participants2);\n      setTrackReferences(trackReferences2);\n      setParticipants(participants2);\n    });\n    return () => subscription.unsubscribe();\n  }, [\n    room,\n    JSON.stringify(options.onlySubscribed),\n    JSON.stringify(options.updateOnlyOn),\n    JSON.stringify(sources)\n  ]);\n  const maybeTrackReferences = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isSourcesWithOptions)(sources)) {\n      const requirePlaceholder = requiredPlaceholders(sources, participants);\n      const trackReferencesWithPlaceholders = Array.from(trackReferences);\n      participants.forEach((participant) => {\n        var _a;\n        if (requirePlaceholder.has(participant.identity)) {\n          const sourcesToAddPlaceholder = (_a = requirePlaceholder.get(participant.identity)) != null ? _a : [];\n          sourcesToAddPlaceholder.forEach((placeholderSource) => {\n            if (trackReferences.find(\n              ({ participant: p, publication }) => participant.identity === p.identity && publication.source === placeholderSource\n            )) {\n              return;\n            }\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\n              `Add ${placeholderSource} placeholder for participant ${participant.identity}.`\n            );\n            const placeholder = {\n              participant,\n              source: placeholderSource\n            };\n            trackReferencesWithPlaceholders.push(placeholder);\n          });\n        }\n      });\n      return trackReferencesWithPlaceholders;\n    } else {\n      return trackReferences;\n    }\n  }, [trackReferences, participants, sources]);\n  return maybeTrackReferences;\n}\nfunction difference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\nfunction requiredPlaceholders(sources, participants) {\n  const placeholderMap = /* @__PURE__ */ new Map();\n  if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isSourcesWithOptions)(sources)) {\n    const sourcesThatNeedPlaceholder = sources.filter((sourceWithOption) => sourceWithOption.withPlaceholder).map((sourceWithOption) => sourceWithOption.source);\n    participants.forEach((participant) => {\n      const sourcesOfSubscribedTracks = participant.getTrackPublications().map((pub) => {\n        var _a;\n        return (_a = pub.track) == null ? void 0 : _a.source;\n      }).filter((trackSource) => trackSource !== void 0);\n      const placeholderNeededForThisParticipant = Array.from(\n        difference(new Set(sourcesThatNeedPlaceholder), new Set(sourcesOfSubscribedTracks))\n      );\n      if (placeholderNeededForThisParticipant.length > 0) {\n        placeholderMap.set(participant.identity, placeholderNeededForThisParticipant);\n      }\n    });\n  }\n  return placeholderMap;\n}\n\n// src/hooks/useTrackRefBySourceOrName.ts\n\n\n\nfunction useTrackRefBySourceOrName(source) {\n  var _a, _b;\n  const [publication, setPublication] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackByIdentifier)(source));\n  const { trackObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupMediaTrack)(source);\n  }, [(_a = source.participant.sid) != null ? _a : source.participant.identity, source.source]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const subscription = trackObserver.subscribe((publication2) => {\n      setPublication(publication2);\n    });\n    return () => subscription == null ? void 0 : subscription.unsubscribe();\n  }, [trackObserver]);\n  return {\n    participant: source.participant,\n    source: (_b = source.source) != null ? _b : livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Unknown,\n    publication\n  };\n}\n\n// src/hooks/useTrackByName.ts\nfunction useTrackByName(name, participant) {\n  const p = useEnsureParticipant(participant);\n  return useTrackRefBySourceOrName({ name, participant: p });\n}\n\n// src/hooks/useChat.ts\n\n\n\nfunction useChat(options) {\n  const room = useRoomContext();\n  const connectionState = useConnectionState(room);\n  const isDisconnected = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Disconnected,\n    [connectionState]\n  );\n  const setup = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupChat)(room, options),\n    [room, options, isDisconnected]\n  );\n  const isSending = useObservableState(setup.isSendingObservable, false);\n  const chatMessages = useObservableState(setup.messageObservable, []);\n  return { send: setup.send, update: setup.update, chatMessages, isSending };\n}\n\n// src/hooks/usePersistentUserChoices.ts\n\n\nfunction usePersistentUserChoices(options = {}) {\n  var _a;\n  const [userChoices, setSettings] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.loadUserChoices)(options.defaults, (_a = options.preventLoad) != null ? _a : false)\n  );\n  const saveAudioInputEnabled = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((isEnabled) => {\n    setSettings((prev) => __spreadProps(__spreadValues({}, prev), { audioEnabled: isEnabled }));\n  }, []);\n  const saveVideoInputEnabled = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((isEnabled) => {\n    setSettings((prev) => __spreadProps(__spreadValues({}, prev), { videoEnabled: isEnabled }));\n  }, []);\n  const saveAudioInputDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((deviceId) => {\n    setSettings((prev) => __spreadProps(__spreadValues({}, prev), { audioDeviceId: deviceId }));\n  }, []);\n  const saveVideoInputDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((deviceId) => {\n    setSettings((prev) => __spreadProps(__spreadValues({}, prev), { videoDeviceId: deviceId }));\n  }, []);\n  const saveUsername = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((username) => {\n    setSettings((prev) => __spreadProps(__spreadValues({}, prev), { username }));\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2;\n    (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.saveUserChoices)(userChoices, (_a2 = options.preventSave) != null ? _a2 : false);\n  }, [userChoices, options.preventSave]);\n  return {\n    userChoices,\n    saveAudioInputEnabled,\n    saveVideoInputEnabled,\n    saveAudioInputDeviceId,\n    saveVideoInputDeviceId,\n    saveUsername\n  };\n}\n\n// src/hooks/useIsEncrypted.ts\n\n\n\nfunction useIsEncrypted(participant, options = {}) {\n  const p = useEnsureParticipant(participant);\n  const room = useEnsureRoom(options.room);\n  const observer = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.encryptionStatusObservable)(room, p), [room, p]);\n  const isEncrypted = useObservableState(\n    observer,\n    p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.LocalParticipant ? p.isE2EEEnabled : !!(p == null ? void 0 : p.isEncrypted)\n  );\n  return isEncrypted;\n}\n\n// src/hooks/useTrackVolume.ts\n\n\n\nfunction useTrackVolume(trackOrTrackReference, options = { fftSize: 32, smoothingTimeConstant: 0 }) {\n  const track = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(trackOrTrackReference) ? trackOrTrackReference.publication.track : trackOrTrackReference;\n  const [volume, setVolume] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!track || !track.mediaStream) {\n      return;\n    }\n    const { cleanup, analyser } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.createAudioAnalyser)(track, options);\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const updateVolume = () => {\n      analyser.getByteFrequencyData(dataArray);\n      let sum = 0;\n      for (let i = 0; i < dataArray.length; i++) {\n        const a = dataArray[i];\n        sum += a * a;\n      }\n      setVolume(Math.sqrt(sum / dataArray.length) / 255);\n    };\n    const interval = setInterval(updateVolume, 1e3 / 30);\n    return () => {\n      cleanup();\n      clearInterval(interval);\n    };\n  }, [track, track == null ? void 0 : track.mediaStream, JSON.stringify(options)]);\n  return volume;\n}\nvar normalizeFrequencies = (frequencies) => {\n  const normalizeDb = (value) => {\n    const minDb = -100;\n    const maxDb = -10;\n    let db = 1 - Math.max(minDb, Math.min(maxDb, value)) * -1 / 100;\n    db = Math.sqrt(db);\n    return db;\n  };\n  return frequencies.map((value) => {\n    if (value === -Infinity) {\n      return 0;\n    }\n    return normalizeDb(value);\n  });\n};\nvar multibandDefaults = {\n  bands: 5,\n  loPass: 100,\n  hiPass: 600,\n  updateInterval: 32,\n  analyserOptions: { fftSize: 2048 }\n};\nfunction useMultibandTrackVolume(trackOrTrackReference, options = {}) {\n  var _a;\n  const track = trackOrTrackReference instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track ? trackOrTrackReference : (_a = trackOrTrackReference == null ? void 0 : trackOrTrackReference.publication) == null ? void 0 : _a.track;\n  const opts = __spreadValues(__spreadValues({}, multibandDefaults), options);\n  const [frequencyBands, setFrequencyBands] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    new Array(opts.bands).fill(0)\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!track || !(track == null ? void 0 : track.mediaStream)) {\n      return;\n    }\n    const { analyser, cleanup } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.createAudioAnalyser)(track, opts.analyserOptions);\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    const updateVolume = () => {\n      analyser.getFloatFrequencyData(dataArray);\n      let frequencies = new Float32Array(dataArray.length);\n      for (let i = 0; i < dataArray.length; i++) {\n        frequencies[i] = dataArray[i];\n      }\n      frequencies = frequencies.slice(options.loPass, options.hiPass);\n      const normalizedFrequencies = normalizeFrequencies(frequencies);\n      const chunkSize = Math.ceil(normalizedFrequencies.length / opts.bands);\n      const chunks = [];\n      for (let i = 0; i < opts.bands; i++) {\n        const summedVolumes = normalizedFrequencies.slice(i * chunkSize, (i + 1) * chunkSize).reduce((acc, val) => acc += val, 0);\n        chunks.push(summedVolumes / chunkSize);\n      }\n      setFrequencyBands(chunks);\n    };\n    const interval = setInterval(updateVolume, opts.updateInterval);\n    return () => {\n      cleanup();\n      clearInterval(interval);\n    };\n  }, [track, track == null ? void 0 : track.mediaStream, JSON.stringify(options)]);\n  return frequencyBands;\n}\nvar waveformDefaults = {\n  barCount: 120,\n  volMultiplier: 5,\n  updateInterval: 20\n};\nfunction useAudioWaveform(trackOrTrackReference, options = {}) {\n  var _a;\n  const track = trackOrTrackReference instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track ? trackOrTrackReference : (_a = trackOrTrackReference == null ? void 0 : trackOrTrackReference.publication) == null ? void 0 : _a.track;\n  const opts = __spreadValues(__spreadValues({}, waveformDefaults), options);\n  const aggregateWave = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new Float32Array());\n  const timeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(performance.now());\n  const updates = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n  const [bars, setBars] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const onUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((wave) => {\n    setBars(\n      Array.from(\n        filterData(wave, opts.barCount).map((v) => Math.sqrt(v) * opts.volMultiplier)\n        // wave.slice(0, opts.barCount).map((v) => sigmoid(v * opts.volMultiplier, 0.08, 0.2)),\n      )\n    );\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!track || !(track == null ? void 0 : track.mediaStream)) {\n      return;\n    }\n    const { analyser, cleanup } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.createAudioAnalyser)(track, {\n      fftSize: getFFTSizeValue(opts.barCount)\n    });\n    const bufferLength = getFFTSizeValue(opts.barCount);\n    const dataArray = new Float32Array(bufferLength);\n    const update = () => {\n      updateWaveform = requestAnimationFrame(update);\n      analyser.getFloatTimeDomainData(dataArray);\n      aggregateWave.current.map((v, i) => v + dataArray[i]);\n      updates.current += 1;\n      if (performance.now() - timeRef.current >= opts.updateInterval) {\n        const newData = dataArray.map((v) => v / updates.current);\n        onUpdate(newData);\n        timeRef.current = performance.now();\n        updates.current = 0;\n      }\n    };\n    let updateWaveform = requestAnimationFrame(update);\n    return () => {\n      cleanup();\n      cancelAnimationFrame(updateWaveform);\n    };\n  }, [track, track == null ? void 0 : track.mediaStream, JSON.stringify(options), onUpdate]);\n  return {\n    bars\n  };\n}\nfunction getFFTSizeValue(x) {\n  if (x < 32) return 32;\n  else return pow2ceil(x);\n}\nfunction pow2ceil(v) {\n  let p = 2;\n  while (v >>= 1) {\n    p <<= 1;\n  }\n  return p;\n}\nfunction filterData(audioData, numSamples) {\n  const blockSize = Math.floor(audioData.length / numSamples);\n  const filteredData = new Float32Array(numSamples);\n  for (let i = 0; i < numSamples; i++) {\n    const blockStart = blockSize * i;\n    let sum = 0;\n    for (let j = 0; j < blockSize; j++) {\n      sum = sum + Math.abs(audioData[blockStart + j]);\n    }\n    filteredData[i] = sum / blockSize;\n  }\n  return filteredData;\n}\n\n// src/hooks/useParticipantTracks.ts\n\n\nfunction useParticipantTracks(sources, participantIdentity) {\n  const room = useRoomContext();\n  const participantContext = useMaybeParticipantContext();\n  const p = participantIdentity ? room.getParticipantByIdentity(participantIdentity) : participantContext;\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => p ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantTracksObservable)(p, { sources }) : void 0,\n    [p == null ? void 0 : p.sid, p == null ? void 0 : p.identity, JSON.stringify(sources)]\n  );\n  const trackRefs = useObservableState(observable, []);\n  return trackRefs;\n}\n\n// src/hooks/useTrackTranscription.ts\n\n\n\n// src/hooks/useTrackSyncTime.ts\n\n\nfunction useTrackSyncTime(ref) {\n  var _a, _b, _c;\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => {\n      var _a2;\n      return ((_a2 = ref == null ? void 0 : ref.publication) == null ? void 0 : _a2.track) ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.trackSyncTimeObserver)(ref == null ? void 0 : ref.publication.track) : void 0;\n    },\n    [(_a = ref == null ? void 0 : ref.publication) == null ? void 0 : _a.track]\n  );\n  return useObservableState(observable, {\n    timestamp: Date.now(),\n    rtpTimestamp: (_c = (_b = ref == null ? void 0 : ref.publication) == null ? void 0 : _b.track) == null ? void 0 : _c.rtpTimestamp\n  });\n}\n\n// src/hooks/useTrackTranscription.ts\nvar TRACK_TRANSCRIPTION_DEFAULTS = {\n  bufferSize: 100\n  // maxAge: 2_000,\n};\nfunction useTrackTranscription(trackRef, options) {\n  const opts = __spreadValues(__spreadValues({}, TRACK_TRANSCRIPTION_DEFAULTS), options);\n  const [segments, setSegments] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const syncTimestamps = useTrackSyncTime(trackRef);\n  const handleSegmentMessage = (newSegments) => {\n    var _a;\n    (_a = opts.onTranscription) == null ? void 0 : _a.call(opts, newSegments);\n    setSegments(\n      (prevSegments) => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.dedupeSegments)(\n        prevSegments,\n        // when first receiving a segment, add the current media timestamp to it\n        newSegments.map((s) => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.addMediaTimestampToTranscription)(s, syncTimestamps)),\n        opts.bufferSize\n      )\n    );\n  };\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!(trackRef == null ? void 0 : trackRef.publication)) {\n      return;\n    }\n    const subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.trackTranscriptionObserver)(trackRef.publication).subscribe((evt) => {\n      handleSegmentMessage(...evt);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [trackRef && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackReferenceId)(trackRef), handleSegmentMessage]);\n  return { segments };\n}\n\n// src/hooks/useVoiceAssistant.ts\n\n\n\n// src/hooks/useParticipantAttributes.ts\n\n\nfunction useParticipantAttributes(props = {}) {\n  var _a;\n  const participantContext = useMaybeParticipantContext();\n  const p = (_a = props.participant) != null ? _a : participantContext;\n  const attributeObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    // weird typescript constraint\n    () => p ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantAttributesObserver)(p) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantAttributesObserver)(p),\n    [p]\n  );\n  const attributeState = useObservableState(attributeObserver, {\n    attributes: p == null ? void 0 : p.attributes\n  });\n  return attributeState;\n}\nfunction useParticipantAttribute(attributeKey, options = {}) {\n  const p = useEnsureParticipant(options.participant);\n  const [attribute, setAttribute] = react__WEBPACK_IMPORTED_MODULE_0__.useState(p.attributes[attributeKey]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!p) {\n      return;\n    }\n    const subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.participantAttributesObserver)(p).subscribe((val) => {\n      if (val.changed[attributeKey] !== void 0) {\n        setAttribute(val.changed[attributeKey]);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [p, attributeKey]);\n  return attribute;\n}\n\n// src/hooks/useVoiceAssistant.ts\nvar state_attribute = \"voice_assistant.state\";\nfunction useVoiceAssistant() {\n  const agent = useRemoteParticipants().find((p) => p.kind === livekit_client__WEBPACK_IMPORTED_MODULE_3__.ParticipantKind.AGENT);\n  const audioTrack = useParticipantTracks([livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone], agent == null ? void 0 : agent.identity)[0];\n  const { segments: agentTranscriptions } = useTrackTranscription(audioTrack);\n  const connectionState = useConnectionState();\n  const { attributes } = useParticipantAttributes({ participant: agent });\n  const state = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Disconnected) {\n      return \"disconnected\";\n    } else if (connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Connecting || !agent || !(attributes == null ? void 0 : attributes[state_attribute])) {\n      return \"connecting\";\n    } else {\n      return attributes[state_attribute];\n    }\n  }, [attributes, agent, connectionState]);\n  return {\n    agent,\n    state,\n    audioTrack,\n    agentTranscriptions,\n    agentAttributes: attributes\n  };\n}\n\n// src/hooks/useIsRecording.ts\n\n\nfunction useIsRecording(room) {\n  const r = useEnsureRoom(room);\n  const connectionState = useConnectionState(r);\n  const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.recordingStatusObservable)(r), [r, connectionState]);\n  const isRecording = useObservableState(observable, r.isRecording);\n  return isRecording;\n}\n\n// src/components/controls/ClearPinButton.tsx\nvar ClearPinButton = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ClearPinButton2(props, ref) {\n    const { buttonProps } = useClearPinButton(props);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, buttonProps), props.children);\n  }\n);\n\n// src/components/ConnectionState.tsx\n\nvar ConnectionState5 = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ConnectionState6(_a, ref) {\n    var _b = _a, { room } = _b, props = __objRest(_b, [\"room\"]);\n    const connectionState = useConnectionState(room);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref }, props), connectionState);\n  }\n);\n\n// src/components/controls/ChatToggle.tsx\n\nvar ChatToggle = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ChatToggle2(props, ref) {\n    const { mergedProps } = useChatToggle({ props });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, mergedProps), props.children);\n  }\n);\n\n// src/components/controls/DisconnectButton.tsx\n\nvar DisconnectButton = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function DisconnectButton2(props, ref) {\n    const { buttonProps } = useDisconnectButton(props);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, buttonProps), props.children);\n  }\n);\n\n// src/components/controls/FocusToggle.tsx\n\n\n// src/assets/icons/CameraDisabledIcon.tsx\n\nvar SvgCameraDisabledIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\" }));\nvar CameraDisabledIcon_default = SvgCameraDisabledIcon;\n\n// src/assets/icons/CameraIcon.tsx\n\nvar SvgCameraIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\" }));\nvar CameraIcon_default = SvgCameraIcon;\n\n// src/assets/icons/ChatCloseIcon.tsx\n\nvar SvgChatCloseIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, viewBox: \"0 0 24 24\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"#FFF\",\n    d: \"M4.99 3.99a1 1 0 0 0-.697 1.717L10.586 12l-6.293 6.293a1 1 0 1 0 1.414 1.414L12 13.414l6.293 6.293a1 1 0 1 0 1.414-1.414L13.414 12l6.293-6.293a1 1 0 0 0-.727-1.717 1 1 0 0 0-.687.303L12 10.586 5.707 4.293a1 1 0 0 0-.717-.303z\"\n  }\n));\nvar ChatCloseIcon_default = SvgChatCloseIcon;\n\n// src/assets/icons/ChatIcon.tsx\n\nvar SvgChatIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 18, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar ChatIcon_default = SvgChatIcon;\n\n// src/assets/icons/Chevron.tsx\n\nvar SvgChevron = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar Chevron_default = SvgChevron;\n\n// src/assets/icons/FocusToggleIcon.tsx\n\nvar SvgFocusToggleIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 1.5 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9\" })));\nvar FocusToggleIcon_default = SvgFocusToggleIcon;\n\n// src/assets/icons/GearIcon.tsx\n\nvar SvgGearIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M8.961.894C8.875-.298 7.125-.298 7.04.894c-.066.912-1.246 1.228-1.76.472-.67-.99-2.186-.115-1.664.96.399.824-.465 1.688-1.288 1.289-1.076-.522-1.95.994-.961 1.665.756.513.44 1.693-.472 1.759-1.192.086-1.192 1.836 0 1.922.912.066 1.228 1.246.472 1.76-.99.67-.115 2.186.96 1.664.824-.399 1.688.465 1.289 1.288-.522 1.076.994 1.95 1.665.961.513-.756 1.693-.44 1.759.472.086 1.192 1.836 1.192 1.922 0 .066-.912 1.246-1.228 1.76-.472.67.99 2.186.115 1.664-.96-.399-.824.465-1.688 1.288-1.289 1.076.522 1.95-.994.961-1.665-.756-.513-.44-1.693.472-1.759 1.192-.086 1.192-1.836 0-1.922-.912-.066-1.228-1.246-.472-1.76.99-.67.115-2.186-.96-1.664-.824.399-1.688-.465-1.289-1.288.522-1.076-.994-1.95-1.665-.961-.513.756-1.693.44-1.759-.472ZM8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar GearIcon_default = SvgGearIcon;\n\n// src/assets/icons/LeaveIcon.tsx\n\nvar SvgLeaveIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar LeaveIcon_default = SvgLeaveIcon;\n\n// src/assets/icons/LockLockedIcon.tsx\n\nvar SvgLockLockedIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar LockLockedIcon_default = SvgLockLockedIcon;\n\n// src/assets/icons/MicDisabledIcon.tsx\n\nvar SvgMicDisabledIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z\" }));\nvar MicDisabledIcon_default = SvgMicDisabledIcon;\n\n// src/assets/icons/MicIcon.tsx\n\nvar SvgMicIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fillRule: \"evenodd\",\n    d: \"M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z\" }));\nvar MicIcon_default = SvgMicIcon;\n\n// src/assets/icons/QualityExcellentIcon.tsx\n\nvar SvgQualityExcellentIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }));\nvar QualityExcellentIcon_default = SvgQualityExcellentIcon;\n\n// src/assets/icons/QualityGoodIcon.tsx\n\nvar SvgQualityGoodIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" })));\nvar QualityGoodIcon_default = SvgQualityGoodIcon;\n\n// src/assets/icons/QualityPoorIcon.tsx\n\nvar SvgQualityPoorIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" })));\nvar QualityPoorIcon_default = SvgQualityPoorIcon;\n\n// src/assets/icons/QualityUnknownIcon.tsx\n\nvar SvgQualityUnknownIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\" })));\nvar QualityUnknownIcon_default = SvgQualityUnknownIcon;\n\n// src/assets/icons/ScreenShareIcon.tsx\n\nvar SvgScreenShareIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 20, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z\",\n    clipRule: \"evenodd\"\n  }\n));\nvar ScreenShareIcon_default = SvgScreenShareIcon;\n\n// src/assets/icons/ScreenShareStopIcon.tsx\n\nvar SvgScreenShareStopIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 20, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { fill: \"currentColor\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fillRule: \"evenodd\",\n    d: \"M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z\",\n    clipRule: \"evenodd\"\n  }\n)));\nvar ScreenShareStopIcon_default = SvgScreenShareStopIcon;\n\n// src/assets/icons/SpinnerIcon.tsx\n\nvar SvgSpinnerIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.7\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.6\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.5\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.4\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.9\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.3\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.8\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.2\n  }\n));\nvar SpinnerIcon_default = SvgSpinnerIcon;\n\n// src/assets/icons/UnfocusToggleIcon.tsx\n\nvar SvgUnfocusToggleIcon = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 1.5 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25\" })));\nvar UnfocusToggleIcon_default = SvgUnfocusToggleIcon;\n\n// src/components/controls/FocusToggle.tsx\nvar FocusToggle = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function FocusToggle2(_a, ref) {\n    var _b = _a, { trackRef } = _b, props = __objRest(_b, [\"trackRef\"]);\n    const trackRefFromContext = useMaybeTrackRefContext();\n    const { mergedProps, inFocus } = useFocusToggle({\n      trackRef: trackRef != null ? trackRef : trackRefFromContext,\n      props\n    });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Consumer, null, (layoutContext) => layoutContext !== void 0 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, mergedProps), props.children ? props.children : inFocus ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UnfocusToggleIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggleIcon_default, null)));\n  }\n);\n\n// src/components/controls/MediaDeviceSelect.tsx\n\n\n// src/utils.ts\n\n\nfunction isProp(prop) {\n  return prop !== void 0;\n}\nfunction mergeProps2(...props) {\n  return mergeProps(...props.filter(isProp));\n}\nfunction cloneSingleChild(children, props, key) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child) => {\n    if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children)) {\n      return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, __spreadProps(__spreadValues({}, props), { key }));\n    }\n    return child;\n  });\n}\nfunction warnAboutMissingStyles(el) {\n  var _a, _b;\n  if (typeof window !== \"undefined\" && typeof process !== \"undefined\" && // eslint-disable-next-line turbo/no-undeclared-env-vars\n  (((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.NODE_ENV) === \"dev\" || // eslint-disable-next-line turbo/no-undeclared-env-vars\n  ((_b = process == null ? void 0 : process.env) == null ? void 0 : _b.NODE_ENV) === \"development\")) {\n    const target = el != null ? el : document.querySelector(\".lk-room-container\");\n    if (target && !getComputedStyle(target).getPropertyValue(\"--lk-has-imported-styles\")) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(\n        \"It looks like you're not using the `@livekit/components-styles package`. To render the UI with the default styling, please import it in your layout or page.\"\n      );\n    }\n  }\n}\n\n// src/components/controls/MediaDeviceSelect.tsx\n\nvar MediaDeviceSelect = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function MediaDeviceSelect2(_a, ref) {\n    var _b = _a, {\n      kind,\n      initialSelection,\n      onActiveDeviceChange,\n      onDeviceListChange,\n      onDeviceSelectError,\n      exactMatch,\n      track,\n      requestPermissions,\n      onError\n    } = _b, props = __objRest(_b, [\n      \"kind\",\n      \"initialSelection\",\n      \"onActiveDeviceChange\",\n      \"onDeviceListChange\",\n      \"onDeviceSelectError\",\n      \"exactMatch\",\n      \"track\",\n      \"requestPermissions\",\n      \"onError\"\n    ]);\n    const room = useMaybeRoomContext();\n    const handleError = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n      (e) => {\n        if (room) {\n          room.emit(livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.MediaDevicesError, e);\n        }\n        onError == null ? void 0 : onError(e);\n      },\n      [room, onError]\n    );\n    const { devices, activeDeviceId, setActiveMediaDevice, className } = useMediaDeviceSelect({\n      kind,\n      room,\n      track,\n      requestPermissions,\n      onError: handleError\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (initialSelection !== void 0) {\n        setActiveMediaDevice(initialSelection);\n      }\n    }, [setActiveMediaDevice]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (typeof onDeviceListChange === \"function\") {\n        onDeviceListChange(devices);\n      }\n    }, [onDeviceListChange, devices]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (activeDeviceId && activeDeviceId !== \"\") {\n        onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(activeDeviceId);\n      }\n    }, [activeDeviceId]);\n    const handleActiveDeviceChange = (deviceId) => __async(this, null, function* () {\n      try {\n        yield setActiveMediaDevice(deviceId, { exact: exactMatch });\n      } catch (e) {\n        if (e instanceof Error) {\n          onDeviceSelectError == null ? void 0 : onDeviceSelectError(e);\n        } else {\n          throw e;\n        }\n      }\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n      () => mergeProps2(props, { className }, { className: \"lk-list\" }),\n      [className, props]\n    );\n    function isActive(deviceId, activeDeviceId2, index) {\n      return deviceId === activeDeviceId2 || index === 0 && activeDeviceId2 === \"default\";\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", __spreadValues({ ref }, mergedProps), devices.map((device, index) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"li\",\n      {\n        key: device.deviceId,\n        id: device.deviceId,\n        \"data-lk-active\": isActive(device.deviceId, activeDeviceId, index),\n        \"aria-selected\": isActive(device.deviceId, activeDeviceId, index),\n        role: \"option\"\n      },\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: () => handleActiveDeviceChange(device.deviceId) }, device.label)\n    )));\n  }\n);\n\n// src/components/controls/StartAudio.tsx\n\nvar StartAudio = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function StartAudio2(_a, ref) {\n    var _b = _a, { label = \"Allow Audio\" } = _b, props = __objRest(_b, [\"label\"]);\n    const room = useRoomContext();\n    const { mergedProps } = useStartAudio({ room, props });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, mergedProps), label);\n  }\n);\n\n// src/components/controls/TrackToggle.tsx\n\n\n// src/assets/icons/util.tsx\n\n\nfunction getSourceIcon(source, enabled) {\n  switch (source) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone:\n      return enabled ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicDisabledIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera:\n      return enabled ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraDisabledIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare:\n      return enabled ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareStopIcon_default, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, null);\n    default:\n      return void 0;\n  }\n}\nfunction getConnectionQualityIcon(quality) {\n  switch (quality) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionQuality.Excellent:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityExcellentIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionQuality.Good:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityGoodIcon_default, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionQuality.Poor:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityPoorIcon_default, null);\n    default:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityUnknownIcon_default, null);\n  }\n}\n\n// src/components/controls/TrackToggle.tsx\nvar TrackToggle = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function TrackToggle2(_a, ref) {\n  var _b = _a, { showIcon } = _b, props = __objRest(_b, [\"showIcon\"]);\n  const { buttonProps, enabled } = useTrackToggle(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, buttonProps), (showIcon != null ? showIcon : true) && getSourceIcon(props.source, enabled), props.children);\n});\n\n// src/components/layout/FocusLayout.tsx\n\n\n// src/components/participant/ParticipantTile.tsx\n\n\n\n\n// src/components/participant/ConnectionQualityIndicator.tsx\n\nvar ConnectionQualityIndicator = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function ConnectionQualityIndicator2(props, ref) {\n  var _a;\n  const { className, quality } = useConnectionQualityIndicator(props);\n  const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return __spreadProps(__spreadValues({}, mergeProps2(props, { className })), { \"data-lk-quality\": quality });\n  }, [quality, props, className]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref }, elementProps), (_a = props.children) != null ? _a : getConnectionQualityIcon(quality));\n});\n\n// src/components/participant/ParticipantName.tsx\n\n\nvar ParticipantName = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ParticipantName2(_a, ref) {\n    var _b = _a, { participant } = _b, props = __objRest(_b, [\"participant\"]);\n    const p = useEnsureParticipant(participant);\n    const { className, infoObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n      return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupParticipantName)(p);\n    }, [p]);\n    const { identity, name } = useObservableState(infoObserver, {\n      name: p.name,\n      identity: p.identity,\n      metadata: p.metadata\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n      return mergeProps2(props, { className, \"data-lk-participant-name\": name });\n    }, [props, className, name]);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({ ref }, mergedProps), name !== \"\" ? name : identity, props.children);\n  }\n);\n\n// src/components/participant/TrackMutedIndicator.tsx\n\nvar TrackMutedIndicator = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function TrackMutedIndicator2(_a, ref) {\n    var _b = _a, { trackRef, show = \"always\" } = _b, props = __objRest(_b, [\"trackRef\", \"show\"]);\n    var _a2;\n    const { className, isMuted } = useTrackMutedIndicator(trackRef);\n    const showIndicator = show === \"always\" || show === \"muted\" && isMuted || show === \"unmuted\" && !isMuted;\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n      () => mergeProps2(props, {\n        className\n      }),\n      [className, props]\n    );\n    if (!showIndicator) {\n      return null;\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({ ref }, htmlProps), { \"data-lk-muted\": isMuted }), (_a2 = props.children) != null ? _a2 : getSourceIcon(trackRef.source, !isMuted));\n  }\n);\n\n// src/assets/images/ParticipantPlaceholder.tsx\n\nvar SvgParticipantPlaceholder = (props) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"svg\",\n  __spreadValues({\n    width: 320,\n    height: 320,\n    viewBox: \"0 0 320 320\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props),\n  /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"path\",\n    {\n      d: \"M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z\",\n      fill: \"white\",\n      fillOpacity: 0.25\n    }\n  ),\n  /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"path\",\n    {\n      d: \"M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z\",\n      fill: \"white\",\n      fillOpacity: 0.25\n    }\n  )\n);\nvar ParticipantPlaceholder_default = SvgParticipantPlaceholder;\n\n// src/components/participant/VideoTrack.tsx\n\n\n\n// src/hooks/useMediaTrackBySourceOrName.ts\n\n\n\nfunction useMediaTrackBySourceOrName(observerOptions, options = {}) {\n  var _a;\n  const [publication, setPublication] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackByIdentifier)(observerOptions));\n  const [isMuted, setMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isMuted);\n  const [isSubscribed, setSubscribed] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isSubscribed);\n  const [track, setTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.track);\n  const [orientation, setOrientation] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"landscape\");\n  const previousElement = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const { className, trackObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.setupMediaTrack)(observerOptions);\n  }, [\n    (_a = observerOptions.participant.sid) != null ? _a : observerOptions.participant.identity,\n    observerOptions.source,\n    (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(observerOptions) && observerOptions.publication.trackSid\n  ]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const subscription = trackObserver.subscribe((publication2) => {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"update track\", publication2);\n      setPublication(publication2);\n      setMuted(publication2 == null ? void 0 : publication2.isMuted);\n      setSubscribed(publication2 == null ? void 0 : publication2.isSubscribed);\n      setTrack(publication2 == null ? void 0 : publication2.track);\n    });\n    return () => subscription == null ? void 0 : subscription.unsubscribe();\n  }, [trackObserver]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2, _b;\n    if (track) {\n      if (previousElement.current) {\n        track.detach(previousElement.current);\n      }\n      if (((_a2 = options.element) == null ? void 0 : _a2.current) && !((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isLocal)(observerOptions.participant) && (track == null ? void 0 : track.kind) === \"audio\")) {\n        track.attach(options.element.current);\n      }\n    }\n    previousElement.current = (_b = options.element) == null ? void 0 : _b.current;\n    return () => {\n      if (previousElement.current) {\n        track == null ? void 0 : track.detach(previousElement.current);\n      }\n    };\n  }, [track, options.element]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2, _b;\n    if (typeof ((_a2 = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _a2.width) === \"number\" && typeof ((_b = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _b.height) === \"number\") {\n      const orientation_ = publication.dimensions.width > publication.dimensions.height ? \"landscape\" : \"portrait\";\n      setOrientation(orientation_);\n    }\n  }, [publication]);\n  return {\n    publication,\n    isMuted,\n    isSubscribed,\n    track,\n    elementProps: mergeProps2(options.props, __spreadValues({\n      className,\n      \"data-lk-local-participant\": observerOptions.participant.isLocal,\n      \"data-lk-source\": publication == null ? void 0 : publication.source\n    }, (publication == null ? void 0 : publication.kind) === \"video\" && { \"data-lk-orientation\": orientation }))\n  };\n}\n\n// src/components/participant/VideoTrack.tsx\n\nvar VideoTrack = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function VideoTrack2(_a, ref) {\n    var _b = _a, {\n      onTrackClick,\n      onClick,\n      onSubscriptionStatusChanged,\n      trackRef,\n      manageSubscription\n    } = _b, props = __objRest(_b, [\n      \"onTrackClick\",\n      \"onClick\",\n      \"onSubscriptionStatusChanged\",\n      \"trackRef\",\n      \"manageSubscription\"\n    ]);\n    const trackReference = useEnsureTrackRef(trackRef);\n    const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(ref, () => mediaEl.current);\n    const intersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_4__.useIntersectionObserver({ root: mediaEl.current });\n    const [debouncedIntersectionEntry] = usehooks_ts__WEBPACK_IMPORTED_MODULE_4__.useDebounceValue(intersectionEntry, 3e3);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (manageSubscription && trackReference.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.RemoteTrackPublication && (debouncedIntersectionEntry == null ? void 0 : debouncedIntersectionEntry.isIntersecting) === false && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === false) {\n        trackReference.publication.setSubscribed(false);\n      }\n    }, [debouncedIntersectionEntry, trackReference, manageSubscription]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (manageSubscription && trackReference.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.RemoteTrackPublication && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === true) {\n        trackReference.publication.setSubscribed(true);\n      }\n    }, [intersectionEntry, trackReference, manageSubscription]);\n    const {\n      elementProps,\n      publication: pub,\n      isSubscribed\n    } = useMediaTrackBySourceOrName(trackReference, {\n      element: mediaEl,\n      props\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n    }, [isSubscribed, onSubscriptionStatusChanged]);\n    const clickHandler = (evt) => {\n      onClick == null ? void 0 : onClick(evt);\n      onTrackClick == null ? void 0 : onTrackClick({ participant: trackReference == null ? void 0 : trackReference.participant, track: pub });\n    };\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", __spreadProps(__spreadValues({ ref: mediaEl }, elementProps), { muted: true, onClick: clickHandler }));\n  }\n);\n\n// src/components/participant/AudioTrack.tsx\n\n\n\nvar AudioTrack = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function AudioTrack2(_a, ref) {\n    var _b = _a, { trackRef, onSubscriptionStatusChanged, volume, muted } = _b, props = __objRest(_b, [\"trackRef\", \"onSubscriptionStatusChanged\", \"volume\", \"muted\"]);\n    const trackReference = useEnsureTrackRef(trackRef);\n    const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(ref, () => mediaEl.current);\n    const {\n      elementProps,\n      isSubscribed,\n      track,\n      publication: pub\n    } = useMediaTrackBySourceOrName(trackReference, {\n      element: mediaEl,\n      props\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n    }, [isSubscribed, onSubscriptionStatusChanged]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (track === void 0 || volume === void 0) {\n        return;\n      }\n      if (track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.RemoteAudioTrack) {\n        track.setVolume(volume);\n      } else {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Volume can only be set on remote audio tracks.\");\n      }\n    }, [volume, track]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      if (pub === void 0 || muted === void 0) {\n        return;\n      }\n      if (pub instanceof livekit_client__WEBPACK_IMPORTED_MODULE_3__.RemoteTrackPublication) {\n        pub.setEnabled(!muted);\n      } else {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Can only call setEnabled on remote track publications.\");\n      }\n    }, [muted, pub, track]);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"audio\", __spreadValues({ ref: mediaEl }, elementProps));\n  }\n);\n\n// src/components/participant/ParticipantTile.tsx\nfunction ParticipantContextIfNeeded(props) {\n  const hasContext = !!useMaybeParticipantContext();\n  return props.participant && !hasContext ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, { value: props.participant }, props.children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction TrackRefContextIfNeeded(props) {\n  const hasContext = !!useMaybeTrackRefContext();\n  return props.trackRef && !hasContext ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, { value: props.trackRef }, props.children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nvar ParticipantTile = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ParticipantTile2(_a, ref) {\n    var _b = _a, {\n      trackRef,\n      children,\n      onParticipantClick,\n      disableSpeakingIndicator\n    } = _b, htmlProps = __objRest(_b, [\n      \"trackRef\",\n      \"children\",\n      \"onParticipantClick\",\n      \"disableSpeakingIndicator\"\n    ]);\n    var _a2, _b2;\n    const trackReference = useEnsureTrackRef(trackRef);\n    const { elementProps } = useParticipantTile({\n      htmlProps,\n      disableSpeakingIndicator,\n      onParticipantClick,\n      trackRef: trackReference\n    });\n    const isEncrypted = useIsEncrypted(trackReference.participant);\n    const layoutContext = useMaybeLayoutContext();\n    const autoManageSubscription = (_a2 = useFeatureContext()) == null ? void 0 : _a2.autoSubscription;\n    const handleSubscribe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n      (subscribed) => {\n        if (trackReference.source && !subscribed && layoutContext && layoutContext.pin.dispatch && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReferencePinned)(trackReference, layoutContext.pin.state)) {\n          layoutContext.pin.dispatch({ msg: \"clear_pin\" });\n        }\n      },\n      [trackReference, layoutContext]\n    );\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref, style: { position: \"relative\" } }, elementProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContextIfNeeded, { trackRef: trackReference }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, { participant: trackReference.participant }, children != null ? children : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(trackReference) && (((_b2 = trackReference.publication) == null ? void 0 : _b2.kind) === \"video\" || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare) ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      VideoTrack,\n      {\n        trackRef: trackReference,\n        onSubscriptionStatusChanged: handleSubscribe,\n        manageSubscription: autoManageSubscription\n      }\n    ) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(trackReference) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      AudioTrack,\n      {\n        trackRef: trackReference,\n        onSubscriptionStatusChanged: handleSubscribe\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-placeholder\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata-item\" }, trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, isEncrypted && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LockLockedIcon_default, { style: { marginRight: \"0.25rem\" } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      TrackMutedIndicator,\n      {\n        trackRef: {\n          participant: trackReference.participant,\n          source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone\n        },\n        show: \"muted\"\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, { style: { marginRight: \"0.25rem\" } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null, \"'s screen\"))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, { className: \"lk-participant-metadata-item\" }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggle, { trackRef: trackReference }))));\n  }\n);\n\n// src/components/layout/FocusLayout.tsx\nfunction FocusLayoutContainer(props) {\n  const elementProps = mergeProps2(props, { className: \"lk-focus-layout\" });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, elementProps), props.children);\n}\nfunction FocusLayout(_a) {\n  var _b = _a, { trackRef } = _b, htmlProps = __objRest(_b, [\"trackRef\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, __spreadValues({ trackRef }, htmlProps));\n}\n\n// src/components/layout/GridLayout.tsx\n\n\n// src/components/TrackLoop.tsx\n\n\nfunction TrackLoop(_a) {\n  var _b = _a, { tracks } = _b, props = __objRest(_b, [\"tracks\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, tracks.map((trackReference) => {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      TrackRefContext.Provider,\n      {\n        value: trackReference,\n        key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackReferenceId)(trackReference)\n      },\n      cloneSingleChild(props.children)\n    );\n  }));\n}\n\n// src/components/controls/PaginationControl.tsx\n\n\nfunction PaginationControl({\n  totalPageCount,\n  nextPage,\n  prevPage,\n  currentPage,\n  pagesContainer: connectedElement\n}) {\n  const [interactive, setInteractive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let subscription;\n    if (connectedElement) {\n      subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.createInteractingObservable)(connectedElement.current, 2e3).subscribe(\n        setInteractive\n      );\n    }\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [connectedElement]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-pagination-control\", \"data-lk-user-interaction\": interactive }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: prevPage }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-pagination-count\" }, `${currentPage} of ${totalPageCount}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: nextPage }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)));\n}\n\n// src/components/controls/PaginationIndicator.tsx\n\nvar PaginationIndicator = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function PaginationIndicator2({ totalPageCount, currentPage }, ref) {\n    const bubbles = new Array(totalPageCount).fill(\"\").map((_, index) => {\n      if (index + 1 === currentPage) {\n        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { \"data-lk-active\": true, key: index });\n      } else {\n        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { key: index });\n      }\n    });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref, className: \"lk-pagination-indicator\" }, bubbles);\n  }\n);\n\n// src/components/layout/GridLayout.tsx\nfunction GridLayout(_a) {\n  var _b = _a, { tracks } = _b, props = __objRest(_b, [\"tracks\"]);\n  const gridEl = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n  const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => mergeProps2(props, { className: \"lk-grid-layout\" }),\n    [props]\n  );\n  const { layout } = useGridLayout(gridEl, tracks.length);\n  const pagination = usePagination(layout.maxTiles, tracks);\n  useSwipe(gridEl, {\n    onLeftSwipe: pagination.nextPage,\n    onRightSwipe: pagination.prevPage\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref: gridEl, \"data-lk-pagination\": pagination.totalPageCount > 1 }, elementProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, { tracks: pagination.tracks }, props.children), tracks.length > layout.maxTiles && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    PaginationIndicator,\n    {\n      totalPageCount: pagination.totalPageCount,\n      currentPage: pagination.currentPage\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PaginationControl, __spreadValues({ pagesContainer: gridEl }, pagination))));\n}\n\n// src/components/layout/CarouselLayout.tsx\n\n\nvar MIN_HEIGHT = 130;\nvar MIN_WIDTH = 140;\nvar MIN_VISIBLE_TILES = 1;\nvar ASPECT_RATIO = 16 / 10;\nvar ASPECT_RATIO_INVERT = (1 - ASPECT_RATIO) * -1;\nfunction CarouselLayout(_a) {\n  var _b = _a, { tracks, orientation } = _b, props = __objRest(_b, [\"tracks\", \"orientation\"]);\n  const asideEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const [prevTiles, setPrevTiles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n  const { width, height } = useSize(asideEl);\n  const carouselOrientation = orientation ? orientation : height >= width ? \"vertical\" : \"horizontal\";\n  const tileSpan = carouselOrientation === \"vertical\" ? Math.max(width * ASPECT_RATIO_INVERT, MIN_HEIGHT) : Math.max(height * ASPECT_RATIO, MIN_WIDTH);\n  const scrollBarWidth = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getScrollBarWidth)();\n  const tilesThatFit = carouselOrientation === \"vertical\" ? Math.max((height - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES) : Math.max((width - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES);\n  let maxVisibleTiles = Math.round(tilesThatFit);\n  if (Math.abs(tilesThatFit - prevTiles) < 0.5) {\n    maxVisibleTiles = Math.round(prevTiles);\n  } else if (prevTiles !== tilesThatFit) {\n    setPrevTiles(tilesThatFit);\n  }\n  const sortedTiles = useVisualStableUpdate(tracks, maxVisibleTiles);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (asideEl.current) {\n      asideEl.current.dataset.lkOrientation = carouselOrientation;\n      asideEl.current.style.setProperty(\"--lk-max-visible-tiles\", maxVisibleTiles.toString());\n    }\n  }, [maxVisibleTiles, carouselOrientation]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"aside\", __spreadValues({ key: carouselOrientation, className: \"lk-carousel\", ref: asideEl }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, { tracks: sortedTiles }, props.children));\n}\n\n// src/components/layout/LayoutContextProvider.tsx\n\n\nfunction LayoutContextProvider({\n  value,\n  onPinChange,\n  onWidgetChange,\n  children\n}) {\n  const layoutContextValue = useEnsureCreateLayoutContext(value);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"PinState Updated\", { state: layoutContextValue.pin.state });\n    if (onPinChange && layoutContextValue.pin.state) onPinChange(layoutContextValue.pin.state);\n  }, [layoutContextValue.pin.state, onPinChange]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"Widget Updated\", { widgetState: layoutContextValue.widget.state });\n    if (onWidgetChange && layoutContextValue.widget.state) {\n      onWidgetChange(layoutContextValue.widget.state);\n    }\n  }, [onWidgetChange, layoutContextValue.widget.state]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Provider, { value: layoutContextValue }, children);\n}\n\n// src/components/LiveKitRoom.tsx\n\nvar LiveKitRoom = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function LiveKitRoom2(props, ref) {\n  const { room, htmlProps } = useLiveKitRoom(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref }, htmlProps), room && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, { value: room }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LKFeatureContext.Provider, { value: props.featureFlags }, props.children)));\n});\n\n// src/components/participant/AudioVisualizer.tsx\n\nvar AudioVisualizer = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function AudioVisualizer2(_a, ref) {\n    var _b = _a, { trackRef } = _b, props = __objRest(_b, [\"trackRef\"]);\n    const svgWidth = 200;\n    const svgHeight = 90;\n    const barWidth = 6;\n    const barSpacing = 4;\n    const volMultiplier = 50;\n    const barCount = 7;\n    const trackReference = useEnsureTrackRef(trackRef);\n    const volumes = useMultibandTrackVolume(trackReference, { bands: 7, loPass: 300 });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"svg\",\n      __spreadProps(__spreadValues({\n        ref,\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: `0 0 ${svgWidth} ${svgHeight}`\n      }, props), {\n        className: \"lk-audio-visualizer\"\n      }),\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\" }),\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n        \"g\",\n        {\n          style: {\n            transform: `translate(${(svgWidth - barCount * (barWidth + barSpacing)) / 2}px, 0)`\n          }\n        },\n        volumes.map((vol, idx) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n          \"rect\",\n          {\n            key: idx,\n            x: idx * (barWidth + barSpacing),\n            y: svgHeight / 2 - vol * volMultiplier / 2,\n            width: barWidth,\n            height: vol * volMultiplier\n          }\n        ))\n      )\n    );\n  }\n);\n\n// src/components/ParticipantLoop.tsx\n\nfunction ParticipantLoop(_a) {\n  var _b = _a, { participants } = _b, props = __objRest(_b, [\"participants\"]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, participants.map((participant) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, { value: participant, key: participant.identity }, cloneSingleChild(props.children))));\n}\n\n// src/components/RoomAudioRenderer.tsx\n\n\n\nfunction RoomAudioRenderer({ volume, muted }) {\n  const tracks = useTracks(\n    [livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone, livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShareAudio, livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Unknown],\n    {\n      updateOnlyOn: [],\n      onlySubscribed: true\n    }\n  ).filter((ref) => !(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isLocal)(ref.participant) && ref.publication.kind === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Kind.Audio);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { display: \"none\" } }, tracks.map((trackRef) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    AudioTrack,\n    {\n      key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.getTrackReferenceId)(trackRef),\n      trackRef,\n      volume,\n      muted\n    }\n  )));\n}\n\n// src/components/RoomName.tsx\n\nvar RoomName = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function RoomName2(_a, ref) {\n  var _b = _a, { childrenPosition = \"before\", children } = _b, htmlAttributes = __objRest(_b, [\"childrenPosition\", \"children\"]);\n  const { name } = useRoomInfo();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({ ref }, htmlAttributes), childrenPosition === \"before\" && children, name, childrenPosition === \"after\" && children);\n});\n\n// src/components/Toast.tsx\n\nfunction Toast(props) {\n  const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => mergeProps2(props, { className: \"lk-toast\" }), [props]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), props.children);\n}\n\n// src/components/participant/ParticipantAudioTile.tsx\n\n\n\n// src/components/participant/BarVisualizer.tsx\n\n\n// src/components/participant/animators/useBarAnimator.ts\n\n\n// src/components/participant/animationSequences/connectingSequence.ts\nvar generateConnectingSequenceBar = (columns) => {\n  const seq = [];\n  for (let x = 0; x <= columns; x++) {\n    seq.push([x, columns - 1 - x]);\n  }\n  return seq;\n};\n\n// src/components/participant/animationSequences/listeningSequence.ts\nvar generateListeningSequenceBar = (columns) => {\n  const center = Math.floor(columns / 2);\n  const noIndex = -1;\n  return [[center], [noIndex]];\n};\n\n// src/components/participant/animators/useBarAnimator.ts\nvar useBarAnimator = (state, columns, interval) => {\n  const [index, setIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [sequence, setSequence] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([[]]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (state === \"thinking\") {\n      setSequence(generateListeningSequenceBar(columns));\n    } else if (state === \"connecting\" || state === \"initializing\") {\n      const sequence2 = [...generateConnectingSequenceBar(columns)];\n      setSequence(sequence2);\n    } else if (state === \"listening\") {\n      setSequence(generateListeningSequenceBar(columns));\n    } else if (state === void 0) {\n      setSequence([new Array(columns).fill(0).map((_, idx) => idx)]);\n    } else {\n      setSequence([[]]);\n    }\n    setIndex(0);\n  }, [state, columns]);\n  const animationFrameId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    let startTime = performance.now();\n    const animate = (time) => {\n      const timeElapsed = time - startTime;\n      if (timeElapsed >= interval) {\n        setIndex((prev) => prev + 1);\n        startTime = time;\n      }\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n    animationFrameId.current = requestAnimationFrame(animate);\n    return () => {\n      if (animationFrameId.current !== null) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [interval, columns, state, sequence.length]);\n  return sequence[index % sequence.length];\n};\n\n// src/components/participant/BarVisualizer.tsx\nvar sequencerIntervals = /* @__PURE__ */ new Map([\n  [\"connecting\", 25 * 15],\n  [\"listening\", 500],\n  [\"thinking\", 150]\n]);\nvar getSequencerInterval = (state, barCount) => {\n  if (state === void 0) {\n    return 1e3;\n  }\n  let interval = sequencerIntervals.get(state);\n  if (interval) {\n    switch (state) {\n      case \"connecting\":\n        interval /= barCount;\n        break;\n      default:\n        break;\n    }\n  }\n  return interval;\n};\nvar BarVisualizer = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function BarVisualizer2(_a, ref) {\n    var _b = _a, { state, options, barCount = 15, trackRef } = _b, props = __objRest(_b, [\"state\", \"options\", \"barCount\", \"trackRef\"]);\n    var _a2, _b2, _c;\n    const elementProps = mergeProps2(props, { className: \"lk-audio-bar-visualizer\" });\n    let trackReference = useMaybeTrackRefContext();\n    if (trackRef) {\n      trackReference = trackRef;\n    }\n    const volumeBands = useMultibandTrackVolume(trackReference, {\n      bands: barCount,\n      loPass: 100,\n      hiPass: 200\n    });\n    const minHeight = (_a2 = options == null ? void 0 : options.minHeight) != null ? _a2 : 20;\n    const maxHeight = (_b2 = options == null ? void 0 : options.maxHeight) != null ? _b2 : 100;\n    const highlightedIndices = useBarAnimator(\n      state,\n      barCount,\n      (_c = getSequencerInterval(state, barCount)) != null ? _c : 100\n    );\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({ ref }, elementProps), { \"data-lk-va-state\": state }), volumeBands.map((volume, idx) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"span\",\n      {\n        key: idx,\n        className: `lk-audio-bar ${highlightedIndices.includes(idx) && \"lk-highlighted\"}`,\n        style: {\n          // TODO transform animations would be more performant, however the border-radius gets distorted when using scale transforms. a 9-slice approach (or 3 in this case) could work\n          // transform: `scale(1, ${Math.min(maxHeight, Math.max(minHeight, volume))}`,\n          height: `${Math.min(maxHeight, Math.max(minHeight, volume * 100 + 5))}%`\n        }\n      }\n    )));\n  }\n);\n\n// src/components/participant/ParticipantAudioTile.tsx\nvar ParticipantAudioTile = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ParticipantAudioTile2(_a, ref) {\n    var _b = _a, {\n      children,\n      disableSpeakingIndicator,\n      onParticipantClick,\n      trackRef\n    } = _b, htmlProps = __objRest(_b, [\n      \"children\",\n      \"disableSpeakingIndicator\",\n      \"onParticipantClick\",\n      \"trackRef\"\n    ]);\n    const trackReference = useEnsureTrackRef(trackRef);\n    const { elementProps } = useParticipantTile({\n      trackRef: trackReference,\n      htmlProps,\n      disableSpeakingIndicator,\n      onParticipantClick\n    });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ ref, style: { position: \"relative\", minHeight: \"160px\" } }, elementProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, { value: trackReference }, children != null ? children : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(trackReference) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, { trackRef: trackReference }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(BarVisualizer, { barCount: 7, options: { minHeight: 8 } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata-item\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackMutedIndicator, { trackRef: trackReference }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, { className: \"lk-participant-metadata-item\" })))));\n  }\n);\n\n// src/components/ConnectionStateToast.tsx\n\n\nfunction ConnectionStateToast(props) {\n  const [notification, setNotification] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  const state = useConnectionState(props.room);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    switch (state) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Reconnecting:\n        setNotification(\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, { className: \"lk-spinner\" }), \" Reconnecting\")\n        );\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Connecting:\n        setNotification(\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, { className: \"lk-spinner\" }), \" Connecting\")\n        );\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_3__.ConnectionState.Disconnected:\n        setNotification(/* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"Disconnected\"));\n        break;\n      default:\n        setNotification(void 0);\n        break;\n    }\n  }, [state]);\n  return notification ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Toast, { className: \"lk-toast-connection-state\" }, notification) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}\n\n// src/components/ChatEntry.tsx\n\n\nvar ChatEntry = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function ChatEntry2(_a, ref) {\n    var _b = _a, { entry, hideName = false, hideTimestamp = false, messageFormatter } = _b, props = __objRest(_b, [\"entry\", \"hideName\", \"hideTimestamp\", \"messageFormatter\"]);\n    var _a2, _b2, _c, _d;\n    const formattedMessage = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n      return messageFormatter ? messageFormatter(entry.message) : entry.message;\n    }, [entry.message, messageFormatter]);\n    const hasBeenEdited = !!entry.editTimestamp;\n    const time = new Date(entry.timestamp);\n    const locale = navigator ? navigator.language : \"en-US\";\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"li\",\n      __spreadValues({\n        ref,\n        className: \"lk-chat-entry\",\n        title: time.toLocaleTimeString(locale, { timeStyle: \"full\" }),\n        \"data-lk-message-origin\": ((_a2 = entry.from) == null ? void 0 : _a2.isLocal) ? \"local\" : \"remote\"\n      }, props),\n      (!hideTimestamp || !hideName || hasBeenEdited) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-meta-data\" }, !hideName && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", { className: \"lk-participant-name\" }, (_d = (_b2 = entry.from) == null ? void 0 : _b2.name) != null ? _d : (_c = entry.from) == null ? void 0 : _c.identity), (!hideTimestamp || hasBeenEdited) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-timestamp\" }, hasBeenEdited && \"edited \", time.toLocaleTimeString(locale, { timeStyle: \"short\" }))),\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-message-body\" }, formattedMessage)\n    );\n  }\n);\nfunction formatChatMessageLinks(message) {\n  return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.tokenize)(message, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.createDefaultGrammar)()).map((tok, i) => {\n    if (typeof tok === `string`) {\n      return tok;\n    } else {\n      const content = tok.content.toString();\n      const href = tok.type === `url` ? /^http(s?):\\/\\//.test(content) ? content : `https://${content}` : `mailto:${content}`;\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", { className: \"lk-chat-link\", key: i, href, target: \"_blank\", rel: \"noreferrer\" }, content);\n    }\n  });\n}\n\n// src/prefabs/Chat.tsx\n\nfunction Chat(_a) {\n  var _b = _a, {\n    messageFormatter,\n    messageDecoder,\n    messageEncoder,\n    channelTopic\n  } = _b, props = __objRest(_b, [\n    \"messageFormatter\",\n    \"messageDecoder\",\n    \"messageEncoder\",\n    \"channelTopic\"\n  ]);\n  const inputRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const ulRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const chatOptions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return { messageDecoder, messageEncoder, channelTopic };\n  }, [messageDecoder, messageEncoder, channelTopic]);\n  const { send, chatMessages, isSending } = useChat(chatOptions);\n  const layoutContext = useMaybeLayoutContext();\n  const lastReadMsgAt = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n  function handleSubmit(event) {\n    return __async(this, null, function* () {\n      event.preventDefault();\n      if (inputRef.current && inputRef.current.value.trim() !== \"\") {\n        if (send) {\n          yield send(inputRef.current.value);\n          inputRef.current.value = \"\";\n          inputRef.current.focus();\n        }\n      }\n    });\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2;\n    if (ulRef) {\n      (_a2 = ulRef.current) == null ? void 0 : _a2.scrollTo({ top: ulRef.current.scrollHeight });\n    }\n  }, [ulRef, chatMessages]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a2, _b2, _c, _d, _e;\n    if (!layoutContext || chatMessages.length === 0) {\n      return;\n    }\n    if (((_a2 = layoutContext.widget.state) == null ? void 0 : _a2.showChat) && chatMessages.length > 0 && lastReadMsgAt.current !== ((_b2 = chatMessages[chatMessages.length - 1]) == null ? void 0 : _b2.timestamp)) {\n      lastReadMsgAt.current = (_c = chatMessages[chatMessages.length - 1]) == null ? void 0 : _c.timestamp;\n      return;\n    }\n    const unreadMessageCount = chatMessages.filter(\n      (msg) => !lastReadMsgAt.current || msg.timestamp > lastReadMsgAt.current\n    ).length;\n    const { widget } = layoutContext;\n    if (unreadMessageCount > 0 && ((_d = widget.state) == null ? void 0 : _d.unreadMessages) !== unreadMessageCount) {\n      (_e = widget.dispatch) == null ? void 0 : _e.call(widget, { msg: \"unread_msg\", count: unreadMessageCount });\n    }\n  }, [chatMessages, layoutContext == null ? void 0 : layoutContext.widget]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({}, props), { className: \"lk-chat\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-chat-header\" }, \"Messages\", /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, { className: \"lk-close-button\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatCloseIcon_default, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: \"lk-list lk-chat-messages\", ref: ulRef }, props.children ? chatMessages.map(\n    (msg, idx) => {\n      var _a2;\n      return cloneSingleChild(props.children, {\n        entry: msg,\n        key: (_a2 = msg.id) != null ? _a2 : idx,\n        messageFormatter\n      });\n    }\n  ) : chatMessages.map((msg, idx, allMsg) => {\n    var _a2;\n    const hideName = idx >= 1 && allMsg[idx - 1].from === msg.from;\n    const hideTimestamp = idx >= 1 && msg.timestamp - allMsg[idx - 1].timestamp < 6e4;\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      ChatEntry,\n      {\n        key: (_a2 = msg.id) != null ? _a2 : idx,\n        hideName,\n        hideTimestamp: hideName === false ? false : hideTimestamp,\n        entry: msg,\n        messageFormatter\n      }\n    );\n  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", { className: \"lk-chat-form\", onSubmit: handleSubmit }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      className: \"lk-form-control lk-chat-form-input\",\n      disabled: isSending,\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Enter a message...\",\n      onInput: (ev) => ev.stopPropagation(),\n      onKeyDown: (ev) => ev.stopPropagation(),\n      onKeyUp: (ev) => ev.stopPropagation()\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { type: \"submit\", className: \"lk-button lk-chat-form-button\", disabled: isSending }, \"Send\")));\n}\n\n// src/prefabs/PreJoin.tsx\n\n\n\n// src/prefabs/MediaDeviceMenu.tsx\n\n\n\nfunction MediaDeviceMenu(_a) {\n  var _b = _a, {\n    kind,\n    initialSelection,\n    onActiveDeviceChange,\n    tracks,\n    requestPermissions = false\n  } = _b, props = __objRest(_b, [\n    \"kind\",\n    \"initialSelection\",\n    \"onActiveDeviceChange\",\n    \"tracks\",\n    \"requestPermissions\"\n  ]);\n  const [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const [devices, setDevices] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const [updateRequired, setUpdateRequired] = react__WEBPACK_IMPORTED_MODULE_0__.useState(true);\n  const [needPermissions, setNeedPermissions] = react__WEBPACK_IMPORTED_MODULE_0__.useState(requestPermissions);\n  const handleActiveDeviceChange = (kind2, deviceId) => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"handle device change\");\n    setIsOpen(false);\n    onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(kind2, deviceId);\n  };\n  const button = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const tooltip = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (isOpen) {\n      setNeedPermissions(true);\n    }\n  }, [isOpen]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (button.current && tooltip.current && (devices || updateRequired)) {\n      (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.computeMenuPosition)(button.current, tooltip.current).then(({ x, y }) => {\n        if (tooltip.current) {\n          Object.assign(tooltip.current.style, { left: `${x}px`, top: `${y}px` });\n        }\n      });\n    }\n    setUpdateRequired(false);\n  }, [button, tooltip, devices, updateRequired]);\n  const handleClickOutside = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (event) => {\n      if (!tooltip.current) {\n        return;\n      }\n      if (event.target === button.current) {\n        return;\n      }\n      if (isOpen && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.wasClickOutside)(tooltip.current, event)) {\n        setIsOpen(false);\n      }\n    },\n    [isOpen, tooltip, button]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside);\n    window.addEventListener(\"resize\", () => setUpdateRequired(true));\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside);\n      window.removeEventListener(\"resize\", () => setUpdateRequired(true));\n    };\n  }, [handleClickOutside, setUpdateRequired]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"button\",\n    __spreadProps(__spreadValues({\n      className: \"lk-button lk-button-menu\",\n      \"aria-pressed\": isOpen\n    }, props), {\n      onClick: () => setIsOpen(!isOpen),\n      ref: button\n    }),\n    props.children\n  ), !props.disabled && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"div\",\n    {\n      className: \"lk-device-menu\",\n      ref: tooltip,\n      style: { visibility: isOpen ? \"visible\" : \"hidden\" }\n    },\n    kind ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      MediaDeviceSelect,\n      {\n        initialSelection,\n        onActiveDeviceChange: (deviceId) => handleActiveDeviceChange(kind, deviceId),\n        onDeviceListChange: setDevices,\n        kind,\n        track: tracks == null ? void 0 : tracks[kind],\n        requestPermissions: needPermissions\n      }\n    ) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-device-menu-heading\" }, \"Audio inputs\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      MediaDeviceSelect,\n      {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (deviceId) => handleActiveDeviceChange(\"audioinput\", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.audioinput,\n        requestPermissions: needPermissions\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-device-menu-heading\" }, \"Video inputs\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      MediaDeviceSelect,\n      {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (deviceId) => handleActiveDeviceChange(\"videoinput\", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.videoinput,\n        requestPermissions: needPermissions\n      }\n    ))\n  ));\n}\n\n// src/prefabs/PreJoin.tsx\n\n\n// src/hooks/useWarnAboutMissingStyles.ts\n\nfunction useWarnAboutMissingStyles() {\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    warnAboutMissingStyles();\n  }, []);\n}\n\n// src/prefabs/PreJoin.tsx\n\nfunction usePreviewTracks(options, onError) {\n  const [tracks, setTracks] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const trackLock = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => new livekit_client__WEBPACK_IMPORTED_MODULE_3__.Mutex(), []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let needsCleanup = false;\n    let localTracks = [];\n    trackLock.lock().then((unlock) => __async(this, null, function* () {\n      try {\n        if (options.audio || options.video) {\n          localTracks = yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.createLocalTracks)(options);\n          if (needsCleanup) {\n            localTracks.forEach((tr) => tr.stop());\n          } else {\n            setTracks(localTracks);\n          }\n        }\n      } catch (e) {\n        if (onError && e instanceof Error) {\n          onError(e);\n        } else {\n          _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.error(e);\n        }\n      } finally {\n        unlock();\n      }\n    }));\n    return () => {\n      needsCleanup = true;\n      localTracks.forEach((track) => {\n        track.stop();\n      });\n    };\n  }, [JSON.stringify(options), onError, trackLock]);\n  return tracks;\n}\nfunction usePreviewDevice(enabled, deviceId, kind) {\n  const [deviceError, setDeviceError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const [isCreatingTrack, setIsCreatingTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const devices = useMediaDevices({ kind });\n  const [selectedDevice, setSelectedDevice] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    void 0\n  );\n  const [localTrack, setLocalTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const [localDeviceId, setLocalDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(deviceId);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setLocalDeviceId(deviceId);\n  }, [deviceId]);\n  const createTrack = (deviceId2, kind2) => __async(this, null, function* () {\n    try {\n      const track = kind2 === \"videoinput\" ? yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.createLocalVideoTrack)({\n        deviceId: deviceId2,\n        resolution: livekit_client__WEBPACK_IMPORTED_MODULE_3__.VideoPresets.h720.resolution\n      }) : yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.createLocalAudioTrack)({ deviceId: deviceId2 });\n      const newDeviceId = yield track.getDeviceId();\n      if (newDeviceId && deviceId2 !== newDeviceId) {\n        prevDeviceId.current = newDeviceId;\n        setLocalDeviceId(newDeviceId);\n      }\n      setLocalTrack(track);\n    } catch (e) {\n      if (e instanceof Error) {\n        setDeviceError(e);\n      }\n    }\n  });\n  const switchDevice = (track, id) => __async(this, null, function* () {\n    yield track.setDeviceId(id);\n    prevDeviceId.current = id;\n  });\n  const prevDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useRef(localDeviceId);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (enabled && !localTrack && !deviceError && !isCreatingTrack) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"creating track\", kind);\n      setIsCreatingTrack(true);\n      createTrack(localDeviceId, kind).finally(() => {\n        setIsCreatingTrack(false);\n      });\n    }\n  }, [enabled, localTrack, deviceError, isCreatingTrack]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!localTrack) {\n      return;\n    }\n    if (!enabled) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(`muting ${kind} track`);\n      localTrack.mute().then(() => _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(localTrack.mediaStreamTrack));\n    } else if ((selectedDevice == null ? void 0 : selectedDevice.deviceId) && prevDeviceId.current !== (selectedDevice == null ? void 0 : selectedDevice.deviceId)) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(`switching ${kind} device from`, prevDeviceId.current, selectedDevice.deviceId);\n      switchDevice(localTrack, selectedDevice.deviceId);\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(`unmuting local ${kind} track`);\n      localTrack.unmute();\n    }\n  }, [localTrack, selectedDevice, enabled, kind]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return () => {\n      if (localTrack) {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(`stopping local ${kind} track`);\n        localTrack.stop();\n        localTrack.mute();\n      }\n    };\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setSelectedDevice(devices == null ? void 0 : devices.find((dev) => dev.deviceId === localDeviceId));\n  }, [localDeviceId, devices]);\n  return {\n    selectedDevice,\n    localTrack,\n    deviceError\n  };\n}\nfunction PreJoin(_a) {\n  var _b = _a, {\n    defaults = {},\n    onValidate,\n    onSubmit,\n    onError,\n    debug,\n    joinLabel = \"Join Room\",\n    micLabel = \"Microphone\",\n    camLabel = \"Camera\",\n    userLabel = \"Username\",\n    persistUserChoices = true\n  } = _b, htmlProps = __objRest(_b, [\n    \"defaults\",\n    \"onValidate\",\n    \"onSubmit\",\n    \"onError\",\n    \"debug\",\n    \"joinLabel\",\n    \"micLabel\",\n    \"camLabel\",\n    \"userLabel\",\n    \"persistUserChoices\"\n  ]);\n  const [userChoices, setUserChoices] = react__WEBPACK_IMPORTED_MODULE_0__.useState(_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.defaultUserChoices);\n  const partialDefaults = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, defaults.audioDeviceId !== void 0 && { audioDeviceId: defaults.audioDeviceId }), defaults.videoDeviceId !== void 0 && { videoDeviceId: defaults.videoDeviceId }), defaults.audioEnabled !== void 0 && { audioEnabled: defaults.audioEnabled }), defaults.videoEnabled !== void 0 && { videoEnabled: defaults.videoEnabled }), defaults.username !== void 0 && { username: defaults.username });\n  const {\n    userChoices: initialUserChoices,\n    saveAudioInputDeviceId,\n    saveAudioInputEnabled,\n    saveVideoInputDeviceId,\n    saveVideoInputEnabled,\n    saveUsername\n  } = usePersistentUserChoices({\n    defaults: partialDefaults,\n    preventSave: !persistUserChoices,\n    preventLoad: !persistUserChoices\n  });\n  const [audioEnabled, setAudioEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.audioEnabled);\n  const [videoEnabled, setVideoEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.videoEnabled);\n  const [audioDeviceId, setAudioDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    initialUserChoices.audioDeviceId\n  );\n  const [videoDeviceId, setVideoDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    initialUserChoices.videoDeviceId\n  );\n  const [username, setUsername] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.username);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    saveAudioInputEnabled(audioEnabled);\n  }, [audioEnabled, saveAudioInputEnabled]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    saveVideoInputEnabled(videoEnabled);\n  }, [videoEnabled, saveVideoInputEnabled]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    saveAudioInputDeviceId(audioDeviceId);\n  }, [audioDeviceId, saveAudioInputDeviceId]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    saveVideoInputDeviceId(videoDeviceId);\n  }, [videoDeviceId, saveVideoInputDeviceId]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    saveUsername(username);\n  }, [username, saveUsername]);\n  const tracks = usePreviewTracks(\n    {\n      audio: audioEnabled ? { deviceId: initialUserChoices.audioDeviceId } : false,\n      video: videoEnabled ? { deviceId: initialUserChoices.videoDeviceId } : false\n    },\n    onError\n  );\n  const videoEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const videoTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => tracks == null ? void 0 : tracks.filter((track) => track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Kind.Video)[0],\n    [tracks]\n  );\n  const facingMode = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (videoTrack) {\n      const { facingMode: facingMode2 } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_3__.facingModeFromLocalTrack)(videoTrack);\n      return facingMode2;\n    } else {\n      return \"undefined\";\n    }\n  }, [videoTrack]);\n  const audioTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => tracks == null ? void 0 : tracks.filter((track) => track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Kind.Audio)[0],\n    [tracks]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (videoEl.current && videoTrack) {\n      videoTrack.unmute();\n      videoTrack.attach(videoEl.current);\n    }\n    return () => {\n      videoTrack == null ? void 0 : videoTrack.detach();\n    };\n  }, [videoTrack]);\n  const [isValid, setIsValid] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const handleValidation = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (values) => {\n      if (typeof onValidate === \"function\") {\n        return onValidate(values);\n      } else {\n        return values.username !== \"\";\n      }\n    },\n    [onValidate]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const newUserChoices = {\n      username,\n      videoEnabled,\n      videoDeviceId,\n      audioEnabled,\n      audioDeviceId\n    };\n    setUserChoices(newUserChoices);\n    setIsValid(handleValidation(newUserChoices));\n  }, [username, videoEnabled, handleValidation, audioEnabled, audioDeviceId, videoDeviceId]);\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (handleValidation(userChoices)) {\n      if (typeof onSubmit === \"function\") {\n        onSubmit(userChoices);\n      }\n    } else {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Validation failed with: \", userChoices);\n    }\n  }\n  useWarnAboutMissingStyles();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ className: \"lk-prejoin\" }, htmlProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-container\" }, videoTrack && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", { ref: videoEl, width: \"1280\", height: \"720\", \"data-lk-facing-mode\": facingMode }), (!videoTrack || !videoEnabled) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-camera-off-note\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-container\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group audio\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      initialState: audioEnabled,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone,\n      onChange: (enabled) => setAudioEnabled(enabled)\n    },\n    micLabel\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      initialSelection: audioDeviceId,\n      kind: \"audioinput\",\n      disabled: !audioTrack,\n      tracks: { audioinput: audioTrack },\n      onActiveDeviceChange: (_, id) => setAudioDeviceId(id)\n    }\n  ))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group video\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      initialState: videoEnabled,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera,\n      onChange: (enabled) => setVideoEnabled(enabled)\n    },\n    camLabel\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      initialSelection: videoDeviceId,\n      kind: \"videoinput\",\n      disabled: !videoTrack,\n      tracks: { videoinput: videoTrack },\n      onActiveDeviceChange: (_, id) => setVideoDeviceId(id)\n    }\n  )))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", { className: \"lk-username-container\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      className: \"lk-form-control\",\n      id: \"username\",\n      name: \"username\",\n      type: \"text\",\n      defaultValue: username,\n      placeholder: userLabel,\n      onChange: (inputEl) => setUsername(inputEl.target.value),\n      autoComplete: \"off\"\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"button\",\n    {\n      className: \"lk-button lk-join-button\",\n      type: \"submit\",\n      onClick: handleSubmit,\n      disabled: !isValid\n    },\n    joinLabel\n  )), debug && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"User Choices:\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: \"lk-list\", style: { overflow: \"hidden\", maxWidth: \"15rem\" } }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Username: \", `${userChoices.username}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Enabled: \", `${userChoices.videoEnabled}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Enabled: \", `${userChoices.audioEnabled}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Device: \", `${userChoices.videoDeviceId}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Device: \", `${userChoices.audioDeviceId}`))));\n}\n\n// src/prefabs/VideoConference.tsx\n\n\n\n\n// src/prefabs/ControlBar.tsx\n\n\n\n\n// src/components/controls/StartMediaButton.tsx\n\nvar StartMediaButton = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function StartMediaButton2(_a, ref) {\n    var _b = _a, { label } = _b, props = __objRest(_b, [\"label\"]);\n    const room = useRoomContext();\n    const { mergedProps: audioProps, canPlayAudio } = useStartAudio({ room, props });\n    const { mergedProps, canPlayVideo } = useStartVideo({ room, props: audioProps });\n    const _a2 = mergedProps, { style } = _a2, restProps = __objRest(_a2, [\"style\"]);\n    style.display = canPlayAudio && canPlayVideo ? \"none\" : \"block\";\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref, style }, restProps), label != null ? label : `Start ${!canPlayAudio ? \"Audio\" : \"Video\"}`);\n  }\n);\n\n// src/components/controls/SettingsMenuToggle.tsx\n\n\n// src/hooks/useSettingsToggle.ts\n\nfunction useSettingsToggle({ props }) {\n  const { dispatch, state } = useLayoutContext().widget;\n  const className = \"lk-button lk-settings-toggle\";\n  const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return mergeProps(props, {\n      className,\n      onClick: () => {\n        if (dispatch) dispatch({ msg: \"toggle_settings\" });\n      },\n      \"aria-pressed\": (state == null ? void 0 : state.showSettings) ? \"true\" : \"false\"\n    });\n  }, [props, className, dispatch, state]);\n  return { mergedProps };\n}\n\n// src/components/controls/SettingsMenuToggle.tsx\nvar SettingsMenuToggle = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function SettingsMenuToggle2(props, ref) {\n    const { mergedProps } = useSettingsToggle({ props });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({ ref }, mergedProps), props.children);\n  }\n);\n\n// src/prefabs/ControlBar.tsx\nfunction ControlBar(_a) {\n  var _b = _a, {\n    variation,\n    controls,\n    saveUserChoices: saveUserChoices2 = true,\n    onDeviceError\n  } = _b, props = __objRest(_b, [\n    \"variation\",\n    \"controls\",\n    \"saveUserChoices\",\n    \"onDeviceError\"\n  ]);\n  var _a2, _b2, _c, _d, _e;\n  const [isChatOpen, setIsChatOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const layoutContext = useMaybeLayoutContext();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a3, _b3;\n    if (((_a3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a3.showChat) !== void 0) {\n      setIsChatOpen((_b3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _b3.showChat);\n    }\n  }, [(_a2 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a2.showChat]);\n  const isTooLittleSpace = useMediaQuery(`(max-width: ${isChatOpen ? 1e3 : 760}px)`);\n  const defaultVariation = isTooLittleSpace ? \"minimal\" : \"verbose\";\n  variation != null ? variation : variation = defaultVariation;\n  const visibleControls = __spreadValues({ leave: true }, controls);\n  const localPermissions = useLocalParticipantPermissions();\n  if (!localPermissions) {\n    visibleControls.camera = false;\n    visibleControls.chat = false;\n    visibleControls.microphone = false;\n    visibleControls.screenShare = false;\n  } else {\n    (_b2 = visibleControls.camera) != null ? _b2 : visibleControls.camera = localPermissions.canPublish;\n    (_c = visibleControls.microphone) != null ? _c : visibleControls.microphone = localPermissions.canPublish;\n    (_d = visibleControls.screenShare) != null ? _d : visibleControls.screenShare = localPermissions.canPublish;\n    (_e = visibleControls.chat) != null ? _e : visibleControls.chat = localPermissions.canPublishData && (controls == null ? void 0 : controls.chat);\n  }\n  const showIcon = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => variation === \"minimal\" || variation === \"verbose\",\n    [variation]\n  );\n  const showText = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => variation === \"textOnly\" || variation === \"verbose\",\n    [variation]\n  );\n  const browserSupportsScreenSharing = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.supportsScreenSharing)();\n  const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const onScreenShareChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (enabled) => {\n      setIsScreenShareEnabled(enabled);\n    },\n    [setIsScreenShareEnabled]\n  );\n  const htmlProps = mergeProps2({ className: \"lk-control-bar\" }, props);\n  const {\n    saveAudioInputEnabled,\n    saveVideoInputEnabled,\n    saveAudioInputDeviceId,\n    saveVideoInputDeviceId\n  } = usePersistentUserChoices({ preventSave: !saveUserChoices2 });\n  const microphoneOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (enabled, isUserInitiated) => isUserInitiated ? saveAudioInputEnabled(enabled) : null,\n    [saveAudioInputEnabled]\n  );\n  const cameraOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (enabled, isUserInitiated) => isUserInitiated ? saveVideoInputEnabled(enabled) : null,\n    [saveVideoInputEnabled]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), visibleControls.microphone && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone,\n      showIcon,\n      onChange: microphoneOnChange,\n      onDeviceError: (error) => onDeviceError == null ? void 0 : onDeviceError({ source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone, error })\n    },\n    showText && \"Microphone\"\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      kind: \"audioinput\",\n      onActiveDeviceChange: (_kind, deviceId) => saveAudioInputDeviceId(deviceId != null ? deviceId : \"\")\n    }\n  ))), visibleControls.camera && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera,\n      showIcon,\n      onChange: cameraOnChange,\n      onDeviceError: (error) => onDeviceError == null ? void 0 : onDeviceError({ source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera, error })\n    },\n    showText && \"Camera\"\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      kind: \"videoinput\",\n      onActiveDeviceChange: (_kind, deviceId) => saveVideoInputDeviceId(deviceId != null ? deviceId : \"\")\n    }\n  ))), visibleControls.screenShare && browserSupportsScreenSharing && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare,\n      captureOptions: { audio: true, selfBrowserSurface: \"include\" },\n      showIcon,\n      onChange: onScreenShareChange,\n      onDeviceError: (error) => onDeviceError == null ? void 0 : onDeviceError({ source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare, error })\n    },\n    showText && (isScreenShareEnabled ? \"Stop screen share\" : \"Share screen\")\n  ), visibleControls.chat && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, null, showIcon && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatIcon_default, null), showText && \"Chat\"), visibleControls.settings && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SettingsMenuToggle, null, showIcon && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GearIcon_default, null), showText && \"Settings\"), visibleControls.leave && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DisconnectButton, null, showIcon && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LeaveIcon_default, null), showText && \"Leave\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(StartMediaButton, null));\n}\n\n// src/prefabs/VideoConference.tsx\nfunction VideoConference(_a) {\n  var _b = _a, {\n    chatMessageFormatter,\n    chatMessageDecoder,\n    chatMessageEncoder,\n    SettingsComponent\n  } = _b, props = __objRest(_b, [\n    \"chatMessageFormatter\",\n    \"chatMessageDecoder\",\n    \"chatMessageEncoder\",\n    \"SettingsComponent\"\n  ]);\n  var _a2, _b2;\n  const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    showChat: false,\n    unreadMessages: 0,\n    showSettings: false\n  });\n  const lastAutoFocusedScreenShareTrack = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const tracks = useTracks(\n    [\n      { source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Camera, withPlaceholder: true },\n      { source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare, withPlaceholder: false }\n    ],\n    { updateOnlyOn: [livekit_client__WEBPACK_IMPORTED_MODULE_3__.RoomEvent.ActiveSpeakersChanged], onlySubscribed: false }\n  );\n  const widgetUpdate = (state) => {\n    _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"updating widget state\", state);\n    setWidgetState(state);\n  };\n  const layoutContext = useCreateLayoutContext();\n  const screenShareTracks = tracks.filter(_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference).filter((track) => track.publication.source === livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.ScreenShare);\n  const focusTrack = (_a2 = usePinnedTracks(layoutContext)) == null ? void 0 : _a2[0];\n  const carouselTracks = tracks.filter((track) => !(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isEqualTrackRef)(track, focusTrack));\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _a3, _b3, _c, _d, _e, _f;\n    if (screenShareTracks.some((track) => track.publication.isSubscribed) && lastAutoFocusedScreenShareTrack.current === null) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"Auto set screen share focus:\", { newScreenShareTrack: screenShareTracks[0] });\n      (_b3 = (_a3 = layoutContext.pin).dispatch) == null ? void 0 : _b3.call(_a3, { msg: \"set_pin\", trackReference: screenShareTracks[0] });\n      lastAutoFocusedScreenShareTrack.current = screenShareTracks[0];\n    } else if (lastAutoFocusedScreenShareTrack.current && !screenShareTracks.some(\n      (track) => {\n        var _a4, _b4;\n        return track.publication.trackSid === ((_b4 = (_a4 = lastAutoFocusedScreenShareTrack.current) == null ? void 0 : _a4.publication) == null ? void 0 : _b4.trackSid);\n      }\n    )) {\n      _livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"Auto clearing screen share focus.\");\n      (_d = (_c = layoutContext.pin).dispatch) == null ? void 0 : _d.call(_c, { msg: \"clear_pin\" });\n      lastAutoFocusedScreenShareTrack.current = null;\n    }\n    if (focusTrack && !(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(focusTrack)) {\n      const updatedFocusTrack = tracks.find(\n        (tr) => tr.participant.identity === focusTrack.participant.identity && tr.source === focusTrack.source\n      );\n      if (updatedFocusTrack !== focusTrack && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isTrackReference)(updatedFocusTrack)) {\n        (_f = (_e = layoutContext.pin).dispatch) == null ? void 0 : _f.call(_e, { msg: \"set_pin\", trackReference: updatedFocusTrack });\n      }\n    }\n  }, [\n    screenShareTracks.map((ref) => `${ref.publication.trackSid}_${ref.publication.isSubscribed}`).join(),\n    (_b2 = focusTrack == null ? void 0 : focusTrack.publication) == null ? void 0 : _b2.trackSid,\n    tracks\n  ]);\n  useWarnAboutMissingStyles();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ className: \"lk-video-conference\" }, props), (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_1__.isWeb)() && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    LayoutContextProvider,\n    {\n      value: layoutContext,\n      onWidgetChange: widgetUpdate\n    },\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-conference-inner\" }, !focusTrack ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-grid-layout-wrapper\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GridLayout, { tracks }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null))) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-focus-layout-wrapper\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayoutContainer, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CarouselLayout, { tracks: carouselTracks }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null)), focusTrack && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayout, { trackRef: focusTrack }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBar, { controls: { chat: true, settings: !!SettingsComponent } })),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      Chat,\n      {\n        style: { display: widgetState.showChat ? \"grid\" : \"none\" },\n        messageFormatter: chatMessageFormatter,\n        messageEncoder: chatMessageEncoder,\n        messageDecoder: chatMessageDecoder\n      }\n    ),\n    SettingsComponent && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"div\",\n      {\n        className: \"lk-settings-menu-modal\",\n        style: { display: widgetState.showSettings ? \"block\" : \"none\" }\n      },\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SettingsComponent, null)\n    )\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomAudioRenderer, null), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionStateToast, null));\n}\n\n// src/prefabs/AudioConference.tsx\n\n\nfunction AudioConference(_a) {\n  var props = __objRest(_a, []);\n  const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    showChat: false,\n    unreadMessages: 0\n  });\n  const audioTracks = useTracks([livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone]);\n  useWarnAboutMissingStyles();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContextProvider, { onWidgetChange: setWidgetState }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({ className: \"lk-audio-conference\" }, props), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-audio-conference-stage\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, { tracks: audioTracks }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantAudioTile, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    ControlBar,\n    {\n      controls: { microphone: true, screenShare: false, camera: false, chat: true }\n    }\n  ), widgetState.showChat && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chat, null)));\n}\n\n// src/prefabs/VoiceAssistantControlBar.tsx\n\n\nfunction VoiceAssistantControlBar(_a) {\n  var _b = _a, {\n    controls,\n    saveUserChoices: saveUserChoices2 = true,\n    onDeviceError\n  } = _b, props = __objRest(_b, [\n    \"controls\",\n    \"saveUserChoices\",\n    \"onDeviceError\"\n  ]);\n  var _a2;\n  const visibleControls = __spreadValues({ leave: true, microphone: true }, controls);\n  const localPermissions = useLocalParticipantPermissions();\n  const { microphoneTrack, localParticipant } = useLocalParticipant();\n  const micTrackRef = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return {\n      participant: localParticipant,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone,\n      publication: microphoneTrack\n    };\n  }, [localParticipant, microphoneTrack]);\n  if (!localPermissions) {\n    visibleControls.microphone = false;\n  } else {\n    (_a2 = visibleControls.microphone) != null ? _a2 : visibleControls.microphone = localPermissions.canPublish;\n  }\n  const htmlProps = mergeProps2({ className: \"lk-agent-control-bar\" }, props);\n  const { saveAudioInputEnabled, saveAudioInputDeviceId } = usePersistentUserChoices({\n    preventSave: !saveUserChoices2\n  });\n  const microphoneOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (enabled, isUserInitiated) => {\n      if (isUserInitiated) {\n        saveAudioInputEnabled(enabled);\n      }\n    },\n    [saveAudioInputEnabled]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), visibleControls.microphone && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    TrackToggle,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone,\n      showIcon: true,\n      onChange: microphoneOnChange,\n      onDeviceError: (error) => onDeviceError == null ? void 0 : onDeviceError({ source: livekit_client__WEBPACK_IMPORTED_MODULE_3__.Track.Source.Microphone, error })\n    },\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(BarVisualizer, { trackRef: micTrackRef, barCount: 7, options: { minHeight: 5 } })\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MediaDeviceMenu,\n    {\n      kind: \"audioinput\",\n      onActiveDeviceChange: (_kind, deviceId) => saveAudioInputDeviceId(deviceId != null ? deviceId : \"\")\n    }\n  ))), visibleControls.leave && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DisconnectButton, null, \"Disconnect\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(StartMediaButton, null));\n}\n\n// src/index.ts\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livekit/components-react/dist/index.mjs\n");

/***/ })

};
;