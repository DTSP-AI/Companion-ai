"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/api/api_chain.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIChain: () => (/* binding */ APIChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/prompts.js\");\n\n\n\n/**\n * Class that extends BaseChain and represents a chain specifically\n * designed for making API requests and processing API responses.\n */\nclass APIChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"apiAnswerChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiRequestChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiDocs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"question\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        this.apiRequestChain = fields.apiRequestChain;\n        this.apiAnswerChain = fields.apiAnswerChain;\n        this.apiDocs = fields.apiDocs;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.headers = fields.headers ?? this.headers;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const question = values[this.inputKey];\n        const api_url = await this.apiRequestChain.predict({ question, api_docs: this.apiDocs }, runManager?.getChild(\"request\"));\n        const res = await fetch(api_url, { headers: this.headers });\n        const api_response = await res.text();\n        const answer = await this.apiAnswerChain.predict({ question, api_docs: this.apiDocs, api_url, api_response }, runManager?.getChild(\"response\"));\n        return { [this.outputKey]: answer };\n    }\n    _chainType() {\n        return \"api_chain\";\n    }\n    static async deserialize(data) {\n        const { api_request_chain, api_answer_chain, api_docs } = data;\n        if (!api_request_chain) {\n            throw new Error(\"LLMChain must have api_request_chain\");\n        }\n        if (!api_answer_chain) {\n            throw new Error(\"LLMChain must have api_answer_chain\");\n        }\n        if (!api_docs) {\n            throw new Error(\"LLMChain must have api_docs\");\n        }\n        return new APIChain({\n            apiAnswerChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_answer_chain),\n            apiRequestChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_request_chain),\n            apiDocs: api_docs,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            api_answer_chain: this.apiAnswerChain.serialize(),\n            api_request_chain: this.apiRequestChain.serialize(),\n            api_docs: this.apiDocs,\n        };\n    }\n    /**\n     * Static method to create a new APIChain from a BaseLanguageModel and API\n     * documentation.\n     * @param llm BaseLanguageModel instance.\n     * @param apiDocs API documentation.\n     * @param options Optional configuration options for the APIChain.\n     * @returns New APIChain instance.\n     */\n    static fromLLMAndAPIDocs(llm, apiDocs, options = {}) {\n        const { apiUrlPrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_URL_PROMPT_TEMPLATE, apiResponsePrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_RESPONSE_PROMPT_TEMPLATE, } = options;\n        const apiRequestChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ prompt: apiUrlPrompt, llm });\n        const apiAnswerChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ prompt: apiResponsePrompt, llm });\n        return new this({\n            apiAnswerChain,\n            apiRequestChain,\n            apiDocs,\n            ...options,\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9hcGlfY2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNJO0FBQzJDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ08sdUJBQXVCLCtDQUFTO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxrQ0FBa0M7QUFDL0YsMkNBQTJDLHVCQUF1QjtBQUNsRTtBQUNBLDJEQUEyRCx5REFBeUQ7QUFDcEgsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0RBQWdEO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1EQUFRO0FBQzFDLG1DQUFtQyxtREFBUTtBQUMzQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELGdCQUFnQixlQUFlLGdFQUF1QixzQkFBc0IscUVBQTRCLElBQUk7QUFDNUcsb0NBQW9DLG1EQUFRLEdBQUcsMkJBQTJCO0FBQzFFLG1DQUFtQyxtREFBUSxHQUFHLGdDQUFnQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9hcGlfY2hhaW4uanM/MjMzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ2hhaW4gfSBmcm9tIFwiLi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG5pbXBvcnQgeyBBUElfVVJMX1BST01QVF9URU1QTEFURSwgQVBJX1JFU1BPTlNFX1BST01QVF9URU1QTEFURSwgfSBmcm9tIFwiLi9wcm9tcHRzLmpzXCI7XG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyBCYXNlQ2hhaW4gYW5kIHJlcHJlc2VudHMgYSBjaGFpbiBzcGVjaWZpY2FsbHlcbiAqIGRlc2lnbmVkIGZvciBtYWtpbmcgQVBJIHJlcXVlc3RzIGFuZCBwcm9jZXNzaW5nIEFQSSByZXNwb25zZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBUElDaGFpbiBleHRlbmRzIEJhc2VDaGFpbiB7XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmlucHV0S2V5XTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5vdXRwdXRLZXldO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpQW5zd2VyQ2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpUmVxdWVzdENoYWluXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFwaURvY3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaGVhZGVyc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZToge31cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInF1ZXN0aW9uXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dEtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJvdXRwdXRcIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcGlSZXF1ZXN0Q2hhaW4gPSBmaWVsZHMuYXBpUmVxdWVzdENoYWluO1xuICAgICAgICB0aGlzLmFwaUFuc3dlckNoYWluID0gZmllbGRzLmFwaUFuc3dlckNoYWluO1xuICAgICAgICB0aGlzLmFwaURvY3MgPSBmaWVsZHMuYXBpRG9jcztcbiAgICAgICAgdGhpcy5pbnB1dEtleSA9IGZpZWxkcy5pbnB1dEtleSA/PyB0aGlzLmlucHV0S2V5O1xuICAgICAgICB0aGlzLm91dHB1dEtleSA9IGZpZWxkcy5vdXRwdXRLZXkgPz8gdGhpcy5vdXRwdXRLZXk7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGZpZWxkcy5oZWFkZXJzID8/IHRoaXMuaGVhZGVycztcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBhc3luYyBfY2FsbCh2YWx1ZXMsIHJ1bk1hbmFnZXIpIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb24gPSB2YWx1ZXNbdGhpcy5pbnB1dEtleV07XG4gICAgICAgIGNvbnN0IGFwaV91cmwgPSBhd2FpdCB0aGlzLmFwaVJlcXVlc3RDaGFpbi5wcmVkaWN0KHsgcXVlc3Rpb24sIGFwaV9kb2NzOiB0aGlzLmFwaURvY3MgfSwgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJyZXF1ZXN0XCIpKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYXBpX3VybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgIGNvbnN0IGFwaV9yZXNwb25zZSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuYXBpQW5zd2VyQ2hhaW4ucHJlZGljdCh7IHF1ZXN0aW9uLCBhcGlfZG9jczogdGhpcy5hcGlEb2NzLCBhcGlfdXJsLCBhcGlfcmVzcG9uc2UgfSwgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJyZXNwb25zZVwiKSk7XG4gICAgICAgIHJldHVybiB7IFt0aGlzLm91dHB1dEtleV06IGFuc3dlciB9O1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJhcGlfY2hhaW5cIjtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBhcGlfcmVxdWVzdF9jaGFpbiwgYXBpX2Fuc3dlcl9jaGFpbiwgYXBpX2RvY3MgfSA9IGRhdGE7XG4gICAgICAgIGlmICghYXBpX3JlcXVlc3RfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTUNoYWluIG11c3QgaGF2ZSBhcGlfcmVxdWVzdF9jaGFpblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFwaV9hbnN3ZXJfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTUNoYWluIG11c3QgaGF2ZSBhcGlfYW5zd2VyX2NoYWluXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXBpX2RvY3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTUNoYWluIG11c3QgaGF2ZSBhcGlfZG9jc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFQSUNoYWluKHtcbiAgICAgICAgICAgIGFwaUFuc3dlckNoYWluOiBhd2FpdCBMTE1DaGFpbi5kZXNlcmlhbGl6ZShhcGlfYW5zd2VyX2NoYWluKSxcbiAgICAgICAgICAgIGFwaVJlcXVlc3RDaGFpbjogYXdhaXQgTExNQ2hhaW4uZGVzZXJpYWxpemUoYXBpX3JlcXVlc3RfY2hhaW4pLFxuICAgICAgICAgICAgYXBpRG9jczogYXBpX2RvY3MsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogdGhpcy5fY2hhaW5UeXBlKCksXG4gICAgICAgICAgICBhcGlfYW5zd2VyX2NoYWluOiB0aGlzLmFwaUFuc3dlckNoYWluLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgYXBpX3JlcXVlc3RfY2hhaW46IHRoaXMuYXBpUmVxdWVzdENoYWluLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgYXBpX2RvY3M6IHRoaXMuYXBpRG9jcyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgQVBJQ2hhaW4gZnJvbSBhIEJhc2VMYW5ndWFnZU1vZGVsIGFuZCBBUElcbiAgICAgKiBkb2N1bWVudGF0aW9uLlxuICAgICAqIEBwYXJhbSBsbG0gQmFzZUxhbmd1YWdlTW9kZWwgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIGFwaURvY3MgQVBJIGRvY3VtZW50YXRpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgQVBJQ2hhaW4uXG4gICAgICogQHJldHVybnMgTmV3IEFQSUNoYWluIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTExNQW5kQVBJRG9jcyhsbG0sIGFwaURvY3MsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGFwaVVybFByb21wdCA9IEFQSV9VUkxfUFJPTVBUX1RFTVBMQVRFLCBhcGlSZXNwb25zZVByb21wdCA9IEFQSV9SRVNQT05TRV9QUk9NUFRfVEVNUExBVEUsIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBhcGlSZXF1ZXN0Q2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IGFwaVVybFByb21wdCwgbGxtIH0pO1xuICAgICAgICBjb25zdCBhcGlBbnN3ZXJDaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdDogYXBpUmVzcG9uc2VQcm9tcHQsIGxsbSB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHtcbiAgICAgICAgICAgIGFwaUFuc3dlckNoYWluLFxuICAgICAgICAgICAgYXBpUmVxdWVzdENoYWluLFxuICAgICAgICAgICAgYXBpRG9jcyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/api/prompts.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/api/prompts.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_RESPONSE_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_PROMPT_TEMPLATE),\n/* harmony export */   API_RESPONSE_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_RAW_PROMPT_TEMPLATE),\n/* harmony export */   API_URL_PROMPT_TEMPLATE: () => (/* binding */ API_URL_PROMPT_TEMPLATE),\n/* harmony export */   API_URL_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_URL_RAW_PROMPT_TEMPLATE)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* eslint-disable spaced-comment */\n\nconst API_URL_RAW_PROMPT_TEMPLATE = `You are given the below API Documentation:\n{api_docs}\nUsing this documentation, generate the full API url to call for answering the user question.\nYou should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.\n\nQuestion:{question}\nAPI url:`;\nconst API_URL_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"api_docs\", \"question\"],\n    template: API_URL_RAW_PROMPT_TEMPLATE,\n});\nconst API_RESPONSE_RAW_PROMPT_TEMPLATE = `${API_URL_RAW_PROMPT_TEMPLATE} {api_url}\n\nHere is the response from the API:\n\n{api_response}\n\nSummarize this response to answer the original question.\n\nSummary:`;\nconst API_RESPONSE_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"api_docs\", \"question\", \"api_url\", \"api_response\"],\n    template: API_RESPONSE_RAW_PROMPT_TEMPLATE,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDeUQ7QUFDbEQ7QUFDUCxDQUFDO0FBQ0Q7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7QUFDTyxvREFBb0QsbUVBQWM7QUFDekU7QUFDQTtBQUNBLENBQUM7QUFDTSw0Q0FBNEMsOEJBQThCOztBQUVqRjs7QUFFQSxDQUFDOztBQUVEOztBQUVBO0FBQ08seURBQXlELG1FQUFjO0FBQzlFO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9hcGkvcHJvbXB0cy5qcz9jZmVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHNwYWNlZC1jb21tZW50ICovXG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuZXhwb3J0IGNvbnN0IEFQSV9VUkxfUkFXX1BST01QVF9URU1QTEFURSA9IGBZb3UgYXJlIGdpdmVuIHRoZSBiZWxvdyBBUEkgRG9jdW1lbnRhdGlvbjpcbnthcGlfZG9jc31cblVzaW5nIHRoaXMgZG9jdW1lbnRhdGlvbiwgZ2VuZXJhdGUgdGhlIGZ1bGwgQVBJIHVybCB0byBjYWxsIGZvciBhbnN3ZXJpbmcgdGhlIHVzZXIgcXVlc3Rpb24uXG5Zb3Ugc2hvdWxkIGJ1aWxkIHRoZSBBUEkgdXJsIGluIG9yZGVyIHRvIGdldCBhIHJlc3BvbnNlIHRoYXQgaXMgYXMgc2hvcnQgYXMgcG9zc2libGUsIHdoaWxlIHN0aWxsIGdldHRpbmcgdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uLiBQYXkgYXR0ZW50aW9uIHRvIGRlbGliZXJhdGVseSBleGNsdWRlIGFueSB1bm5lY2Vzc2FyeSBwaWVjZXMgb2YgZGF0YSBpbiB0aGUgQVBJIGNhbGwuXG5cblF1ZXN0aW9uOntxdWVzdGlvbn1cbkFQSSB1cmw6YDtcbmV4cG9ydCBjb25zdCBBUElfVVJMX1BST01QVF9URU1QTEFURSA9IC8qICNfX1BVUkVfXyAqLyBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIGlucHV0VmFyaWFibGVzOiBbXCJhcGlfZG9jc1wiLCBcInF1ZXN0aW9uXCJdLFxuICAgIHRlbXBsYXRlOiBBUElfVVJMX1JBV19QUk9NUFRfVEVNUExBVEUsXG59KTtcbmV4cG9ydCBjb25zdCBBUElfUkVTUE9OU0VfUkFXX1BST01QVF9URU1QTEFURSA9IGAke0FQSV9VUkxfUkFXX1BST01QVF9URU1QTEFURX0ge2FwaV91cmx9XG5cbkhlcmUgaXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIEFQSTpcblxue2FwaV9yZXNwb25zZX1cblxuU3VtbWFyaXplIHRoaXMgcmVzcG9uc2UgdG8gYW5zd2VyIHRoZSBvcmlnaW5hbCBxdWVzdGlvbi5cblxuU3VtbWFyeTpgO1xuZXhwb3J0IGNvbnN0IEFQSV9SRVNQT05TRV9QUk9NUFRfVEVNUExBVEUgPSAvKiAjX19QVVJFX18gKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICBpbnB1dFZhcmlhYmxlczogW1wiYXBpX2RvY3NcIiwgXCJxdWVzdGlvblwiLCBcImFwaV91cmxcIiwgXCJhcGlfcmVzcG9uc2VcIl0sXG4gICAgdGVtcGxhdGU6IEFQSV9SRVNQT05TRV9SQVdfUFJPTVBUX1RFTVBMQVRFLFxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/api/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/base.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/chains/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChain: () => (/* binding */ BaseChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/callbacks/manager */ \"(rsc)/./node_modules/@langchain/core/callbacks/manager.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n\n\n\n\n/**\n * Base interface that all chains must implement.\n */\nclass BaseChain extends _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__.BaseLangChain {\n    get lc_namespace() {\n        return [\"langchain\", \"chains\", this._chainType()];\n    }\n    constructor(fields, \n    /** @deprecated */\n    verbose, \n    /** @deprecated */\n    callbacks) {\n        if (arguments.length === 1 &&\n            typeof fields === \"object\" &&\n            !(\"saveContext\" in fields)) {\n            // fields is not a BaseMemory\n            const { memory, callbackManager, ...rest } = fields;\n            super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\n            this.memory = memory;\n        }\n        else {\n            // fields is a BaseMemory\n            super({ verbose, callbacks });\n            this.memory = fields;\n        }\n    }\n    /** @ignore */\n    _selectMemoryInputs(values) {\n        const valuesForMemory = { ...values };\n        if (\"signal\" in valuesForMemory) {\n            delete valuesForMemory.signal;\n        }\n        if (\"timeout\" in valuesForMemory) {\n            delete valuesForMemory.timeout;\n        }\n        return valuesForMemory;\n    }\n    /**\n     * Invoke the chain with the provided input and returns the output.\n     * @param input Input values for the chain run.\n     * @param config Optional configuration for the Runnable.\n     * @returns Promise that resolves with the output of the chain run.\n     */\n    async invoke(input, options) {\n        const config = (0,_langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        const fullValues = await this._formatValues(input);\n        const callbackManager_ = await _langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n        let outputValues;\n        try {\n            outputValues = await (fullValues.signal\n                ? Promise.race([\n                    this._call(fullValues, runManager, config),\n                    new Promise((_, reject) => {\n                        fullValues.signal?.addEventListener(\"abort\", () => {\n                            reject(new Error(\"AbortError\"));\n                        });\n                    }),\n                ])\n                : this._call(fullValues, runManager, config));\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n        }\n        await runManager?.handleChainEnd(outputValues);\n        // add the runManager's currentRunId to the outputValues\n        Object.defineProperty(outputValues, _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY, {\n            value: runManager ? { runId: runManager?.runId } : undefined,\n            configurable: true,\n        });\n        return outputValues;\n    }\n    _validateOutputs(outputs) {\n        const missingKeys = this.outputKeys.filter((k) => !(k in outputs));\n        if (missingKeys.length) {\n            throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n        }\n    }\n    async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n        this._validateOutputs(outputs);\n        if (this.memory) {\n            await this.memory.saveContext(inputs, outputs);\n        }\n        if (returnOnlyOutputs) {\n            return outputs;\n        }\n        return { ...inputs, ...outputs };\n    }\n    /**\n     * Return a json-like object representing this chain.\n     */\n    serialize() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n    async run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, config) {\n        const inputKeys = this.inputKeys.filter((k) => !this.memory?.memoryKeys.includes(k) ?? true);\n        const isKeylessInput = inputKeys.length <= 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const values = inputKeys.length ? { [inputKeys[0]]: input } : {};\n        const returnValues = await this.call(values, config);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            return returnValues[keys[0]];\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    async _formatValues(values) {\n        const fullValues = { ...values };\n        if (fullValues.timeout && !fullValues.signal) {\n            fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n            delete fullValues.timeout;\n        }\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n            for (const [key, value] of Object.entries(newValues)) {\n                fullValues[key] = value;\n            }\n        }\n        return fullValues;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    async call(values, config, \n    /** @deprecated */\n    tags) {\n        const parsedConfig = { tags, ...(0,_langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__.parseCallbackConfigArg)(config) };\n        return this.invoke(values, parsedConfig);\n    }\n    /**\n     * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n     *\n     * Call the chain on all inputs in the list\n     */\n    async apply(inputs, config) {\n        return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static async deserialize(data, values = {}) {\n        switch (data._type) {\n            case \"llm_chain\": {\n                const { LLMChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\"));\n                return LLMChain.deserialize(data);\n            }\n            case \"sequential_chain\": {\n                const { SequentialChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\"));\n                return SequentialChain.deserialize(data);\n            }\n            case \"simple_sequential_chain\": {\n                const { SimpleSequentialChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\"));\n                return SimpleSequentialChain.deserialize(data);\n            }\n            case \"stuff_documents_chain\": {\n                const { StuffDocumentsChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                return StuffDocumentsChain.deserialize(data);\n            }\n            case \"map_reduce_documents_chain\": {\n                const { MapReduceDocumentsChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                return MapReduceDocumentsChain.deserialize(data);\n            }\n            case \"refine_documents_chain\": {\n                const { RefineDocumentsChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                return RefineDocumentsChain.deserialize(data);\n            }\n            case \"vector_db_qa\": {\n                const { VectorDBQAChain } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/langchain\"), __webpack_require__.e(\"vendor-chunks/@langchain\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./vector_db_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\"));\n                return VectorDBQAChain.deserialize(data, values);\n            }\n            case \"api_chain\": {\n                const { APIChain } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/langchain\").then(__webpack_require__.bind(__webpack_require__, /*! ./api/api_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\"));\n                return APIChain.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/combine_docs_chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapReduceDocumentsChain: () => (/* binding */ MapReduceDocumentsChain),\n/* harmony export */   RefineDocumentsChain: () => (/* binding */ RefineDocumentsChain),\n/* harmony export */   StuffDocumentsChain: () => (/* binding */ StuffDocumentsChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nclass StuffDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nclass MapReduceDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nclass RefineDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/llm_chain.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/llm_chain.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMChain: () => (/* binding */ LLMChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../output_parsers/noop.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/noop.js\");\n\n\n\n\n\nfunction isBaseLanguageModel(llmLike) {\n    return typeof llmLike._llmType === \"function\";\n}\nfunction _getLanguageModel(llmLike) {\n    if (isBaseLanguageModel(llmLike)) {\n        return llmLike;\n    }\n    else if (\"bound\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.bound)) {\n        return _getLanguageModel(llmLike.bound);\n    }\n    else if (\"runnable\" in llmLike &&\n        \"fallbacks\" in llmLike &&\n        _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.runnable)) {\n        return _getLanguageModel(llmLike.runnable);\n    }\n    else if (\"default\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.default)) {\n        return _getLanguageModel(llmLike.default);\n    }\n    else {\n        throw new Error(\"Unable to extract BaseLanguageModel from llmLike object.\");\n    }\n}\n/**\n * @deprecated This class will be removed in 0.3.0. Use the LangChain Expression Language (LCEL) instead.\n * See the example below for how to use LCEL with the LLMChain class:\n *\n * Chain to run queries against LLMs.\n *\n * @example\n * ```ts\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * const prompt = ChatPromptTemplate.fromTemplate(\"Tell me a {adjective} joke\");\n * const llm = new ChatOpenAI();\n * const chain = prompt.pipe(llm);\n *\n * const response = await chain.invoke({ adjective: \"funny\" });\n * ```\n */\nclass LLMChain extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"LLMChain\";\n    }\n    get inputKeys() {\n        return this.prompt.inputVariables;\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llmKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text\"\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        this.llm = fields.llm;\n        this.llmKwargs = fields.llmKwargs;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.outputParser =\n            fields.outputParser ?? new _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_4__.NoOpOutputParser();\n        if (this.prompt.outputParser) {\n            if (fields.outputParser) {\n                throw new Error(\"Cannot set both outputParser and prompt.outputParser\");\n            }\n            this.outputParser = this.prompt.outputParser;\n        }\n    }\n    getCallKeys() {\n        const callKeys = \"callKeys\" in this.llm ? this.llm.callKeys : [];\n        return callKeys;\n    }\n    /** @ignore */\n    _selectMemoryInputs(values) {\n        const valuesForMemory = super._selectMemoryInputs(values);\n        const callKeys = this.getCallKeys();\n        for (const key of callKeys) {\n            if (key in values) {\n                delete valuesForMemory[key];\n            }\n        }\n        return valuesForMemory;\n    }\n    /** @ignore */\n    async _getFinalOutput(generations, promptValue, runManager) {\n        let finalCompletion;\n        if (this.outputParser) {\n            finalCompletion = await this.outputParser.parseResultWithPrompt(generations, promptValue, runManager?.getChild());\n        }\n        else {\n            finalCompletion = generations[0].text;\n        }\n        return finalCompletion;\n    }\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    call(values, config) {\n        return super.call(values, config);\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const valuesForPrompt = { ...values };\n        const valuesForLLM = {\n            ...this.llmKwargs,\n        };\n        const callKeys = this.getCallKeys();\n        for (const key of callKeys) {\n            if (key in values) {\n                if (valuesForLLM) {\n                    valuesForLLM[key] =\n                        values[key];\n                    delete valuesForPrompt[key];\n                }\n            }\n        }\n        const promptValue = await this.prompt.formatPromptValue(valuesForPrompt);\n        if (\"generatePrompt\" in this.llm) {\n            const { generations } = await this.llm.generatePrompt([promptValue], valuesForLLM, runManager?.getChild());\n            return {\n                [this.outputKey]: await this._getFinalOutput(generations[0], promptValue, runManager),\n            };\n        }\n        const modelWithParser = this.outputParser\n            ? this.llm.pipe(this.outputParser)\n            : this.llm;\n        const response = await modelWithParser.invoke(promptValue, runManager?.getChild());\n        return {\n            [this.outputKey]: response,\n        };\n    }\n    /**\n     * Format prompt with values and pass to LLM\n     *\n     * @param values - keys to pass to prompt template\n     * @param callbackManager - CallbackManager to use\n     * @returns Completion from LLM.\n     *\n     * @example\n     * ```ts\n     * llm.predict({ adjective: \"funny\" })\n     * ```\n     */\n    async predict(values, callbackManager) {\n        const output = await this.call(values, callbackManager);\n        return output[this.outputKey];\n    }\n    _chainType() {\n        return \"llm\";\n    }\n    static async deserialize(data) {\n        const { llm, prompt } = data;\n        if (!llm) {\n            throw new Error(\"LLMChain must have llm\");\n        }\n        if (!prompt) {\n            throw new Error(\"LLMChain must have prompt\");\n        }\n        return new LLMChain({\n            llm: await _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel.deserialize(llm),\n            prompt: await _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.BasePromptTemplate.deserialize(prompt),\n        });\n    }\n    /** @deprecated */\n    serialize() {\n        const serialize = \"serialize\" in this.llm ? this.llm.serialize() : undefined;\n        return {\n            _type: `${this._chainType()}_chain`,\n            llm: serialize,\n            prompt: this.prompt.serialize(),\n        };\n    }\n    _getNumTokens(text) {\n        return _getLanguageModel(this.llm).getNumTokens(text);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js":
/*!***********************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/load.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadQAChain: () => (/* binding */ loadQAChain),\n/* harmony export */   loadQAMapReduceChain: () => (/* binding */ loadQAMapReduceChain),\n/* harmony export */   loadQARefineChain: () => (/* binding */ loadQARefineChain),\n/* harmony export */   loadQAStuffChain: () => (/* binding */ loadQAStuffChain)\n/* harmony export */ });\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\");\n/* harmony import */ var _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stuff_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js\");\n/* harmony import */ var _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map_reduce_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js\");\n/* harmony import */ var _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./refine_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js\");\n\n\n\n\n\nconst loadQAChain = (llm, params = { type: \"stuff\" }) => {\n    const { type } = params;\n    if (type === \"stuff\") {\n        return loadQAStuffChain(llm, params);\n    }\n    if (type === \"map_reduce\") {\n        return loadQAMapReduceChain(llm, params);\n    }\n    if (type === \"refine\") {\n        return loadQARefineChain(llm, params);\n    }\n    throw new Error(`Invalid _type: ${type}`);\n};\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */\nfunction loadQAStuffChain(llm, params = {}) {\n    const { prompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.QA_PROMPT_SELECTOR.getPrompt(llm), verbose } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt, llm, verbose });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({ llmChain, verbose });\n    return chain;\n}\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */\nfunction loadQAMapReduceChain(llm, params = {}) {\n    const { combineMapPrompt = _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__.COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm), combinePrompt = _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__.COMBINE_PROMPT_SELECTOR.getPrompt(llm), verbose, combineLLM, returnIntermediateSteps, } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt: combineMapPrompt, llm, verbose });\n    const combineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: combinePrompt,\n        llm: combineLLM ?? llm,\n        verbose,\n    });\n    const combineDocumentChain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({\n        llmChain: combineLLMChain,\n        documentVariableName: \"summaries\",\n        verbose,\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.MapReduceDocumentsChain({\n        llmChain,\n        combineDocumentChain,\n        returnIntermediateSteps,\n        verbose,\n    });\n    return chain;\n}\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */\nfunction loadQARefineChain(llm, params = {}) {\n    const { questionPrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__.QUESTION_PROMPT_SELECTOR.getPrompt(llm), refinePrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__.REFINE_PROMPT_SELECTOR.getPrompt(llm), refineLLM, verbose, } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt: questionPrompt, llm, verbose });\n    const refineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: refinePrompt,\n        llm: refineLLM ?? llm,\n        verbose,\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.RefineDocumentsChain({\n        llmChain,\n        refineLLMChain,\n        verbose,\n    });\n    return chain;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUEyQztBQUNvRTtBQUN2RDtBQUN1QztBQUNQO0FBQ2pGLHFDQUFxQyxlQUFlO0FBQzNELFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsS0FBSztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMENBQTBDO0FBQ2pELFlBQVksU0FBUyxpRUFBa0IsMkJBQTJCO0FBQ2xFLHlCQUF5QixtREFBUSxHQUFHLHNCQUFzQjtBQUMxRCxzQkFBc0IsdUVBQW1CLEdBQUcsbUJBQW1CO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhDQUE4QztBQUNyRCxZQUFZLG1CQUFtQiw4RUFBMEIsaUNBQWlDLDJFQUF1QixpRUFBaUU7QUFDbEwseUJBQXlCLG1EQUFRLEdBQUcsd0NBQXdDO0FBQzVFLGdDQUFnQyxtREFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDLHVFQUFtQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCLDJFQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkM7QUFDbEQsWUFBWSxpQkFBaUIsd0VBQXdCLGdDQUFnQyxzRUFBc0IsdUNBQXVDO0FBQ2xKLHlCQUF5QixtREFBUSxHQUFHLHNDQUFzQztBQUMxRSwrQkFBK0IsbURBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHNCQUFzQix3RUFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzPzE2NTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG5pbXBvcnQgeyBTdHVmZkRvY3VtZW50c0NoYWluLCBNYXBSZWR1Y2VEb2N1bWVudHNDaGFpbiwgUmVmaW5lRG9jdW1lbnRzQ2hhaW4sIH0gZnJvbSBcIi4uL2NvbWJpbmVfZG9jc19jaGFpbi5qc1wiO1xuaW1wb3J0IHsgUUFfUFJPTVBUX1NFTEVDVE9SIH0gZnJvbSBcIi4vc3R1ZmZfcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgQ09NQklORV9QUk9NUFRfU0VMRUNUT1IsIENPTUJJTkVfUUFfUFJPTVBUX1NFTEVDVE9SLCB9IGZyb20gXCIuL21hcF9yZWR1Y2VfcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgUVVFU1RJT05fUFJPTVBUX1NFTEVDVE9SLCBSRUZJTkVfUFJPTVBUX1NFTEVDVE9SLCB9IGZyb20gXCIuL3JlZmluZV9wcm9tcHRzLmpzXCI7XG5leHBvcnQgY29uc3QgbG9hZFFBQ2hhaW4gPSAobGxtLCBwYXJhbXMgPSB7IHR5cGU6IFwic3R1ZmZcIiB9KSA9PiB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBwYXJhbXM7XG4gICAgaWYgKHR5cGUgPT09IFwic3R1ZmZcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBU3R1ZmZDaGFpbihsbG0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcIm1hcF9yZWR1Y2VcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBTWFwUmVkdWNlQ2hhaW4obGxtLCBwYXJhbXMpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJyZWZpbmVcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBUmVmaW5lQ2hhaW4obGxtLCBwYXJhbXMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgX3R5cGU6ICR7dHlwZX1gKTtcbn07XG4vKipcbiAqIExvYWRzIGEgU3R1ZmZRQUNoYWluIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiBJdCB0YWtlcyBhbiBMTE1cbiAqIGluc3RhbmNlIGFuZCBTdHVmZlFBQ2hhaW5QYXJhbXMgYXMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBsbG0gQW4gaW5zdGFuY2Ugb2YgQmFzZUxhbmd1YWdlTW9kZWwuXG4gKiBAcGFyYW0gcGFyYW1zIFBhcmFtZXRlcnMgZm9yIGNyZWF0aW5nIGEgU3R1ZmZRQUNoYWluLlxuICogQHJldHVybnMgQSBTdHVmZlFBQ2hhaW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUUFTdHVmZkNoYWluKGxsbSwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCB7IHByb21wdCA9IFFBX1BST01QVF9TRUxFQ1RPUi5nZXRQcm9tcHQobGxtKSwgdmVyYm9zZSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGxsbUNoYWluID0gbmV3IExMTUNoYWluKHsgcHJvbXB0LCBsbG0sIHZlcmJvc2UgfSk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7IGxsbUNoYWluLCB2ZXJib3NlIH0pO1xuICAgIHJldHVybiBjaGFpbjtcbn1cbi8qKlxuICogTG9hZHMgYSBNYXBSZWR1Y2VRQUNoYWluIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiBJdCB0YWtlcyBhblxuICogTExNIGluc3RhbmNlIGFuZCBNYXBSZWR1Y2VRQUNoYWluUGFyYW1zIGFzIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0gbGxtIEFuIGluc3RhbmNlIG9mIEJhc2VMYW5ndWFnZU1vZGVsLlxuICogQHBhcmFtIHBhcmFtcyBQYXJhbWV0ZXJzIGZvciBjcmVhdGluZyBhIE1hcFJlZHVjZVFBQ2hhaW4uXG4gKiBAcmV0dXJucyBBIE1hcFJlZHVjZVFBQ2hhaW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUUFNYXBSZWR1Y2VDaGFpbihsbG0sIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgeyBjb21iaW5lTWFwUHJvbXB0ID0gQ09NQklORV9RQV9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIGNvbWJpbmVQcm9tcHQgPSBDT01CSU5FX1BST01QVF9TRUxFQ1RPUi5nZXRQcm9tcHQobGxtKSwgdmVyYm9zZSwgY29tYmluZUxMTSwgcmV0dXJuSW50ZXJtZWRpYXRlU3RlcHMsIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgbGxtQ2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IGNvbWJpbmVNYXBQcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICBjb25zdCBjb21iaW5lTExNQ2hhaW4gPSBuZXcgTExNQ2hhaW4oe1xuICAgICAgICBwcm9tcHQ6IGNvbWJpbmVQcm9tcHQsXG4gICAgICAgIGxsbTogY29tYmluZUxMTSA/PyBsbG0sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgY29uc3QgY29tYmluZURvY3VtZW50Q2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7XG4gICAgICAgIGxsbUNoYWluOiBjb21iaW5lTExNQ2hhaW4sXG4gICAgICAgIGRvY3VtZW50VmFyaWFibGVOYW1lOiBcInN1bW1hcmllc1wiLFxuICAgICAgICB2ZXJib3NlLFxuICAgIH0pO1xuICAgIGNvbnN0IGNoYWluID0gbmV3IE1hcFJlZHVjZURvY3VtZW50c0NoYWluKHtcbiAgICAgICAgbGxtQ2hhaW4sXG4gICAgICAgIGNvbWJpbmVEb2N1bWVudENoYWluLFxuICAgICAgICByZXR1cm5JbnRlcm1lZGlhdGVTdGVwcyxcbiAgICAgICAgdmVyYm9zZSxcbiAgICB9KTtcbiAgICByZXR1cm4gY2hhaW47XG59XG4vKipcbiAqIExvYWRzIGEgUmVmaW5lUUFDaGFpbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy4gSXQgdGFrZXMgYW4gTExNXG4gKiBpbnN0YW5jZSBhbmQgUmVmaW5lUUFDaGFpblBhcmFtcyBhcyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIGxsbSBBbiBpbnN0YW5jZSBvZiBCYXNlTGFuZ3VhZ2VNb2RlbC5cbiAqIEBwYXJhbSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgY3JlYXRpbmcgYSBSZWZpbmVRQUNoYWluLlxuICogQHJldHVybnMgQSBSZWZpbmVRQUNoYWluIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFFBUmVmaW5lQ2hhaW4obGxtLCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHsgcXVlc3Rpb25Qcm9tcHQgPSBRVUVTVElPTl9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIHJlZmluZVByb21wdCA9IFJFRklORV9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIHJlZmluZUxMTSwgdmVyYm9zZSwgfSA9IHBhcmFtcztcbiAgICBjb25zdCBsbG1DaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdDogcXVlc3Rpb25Qcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICBjb25zdCByZWZpbmVMTE1DaGFpbiA9IG5ldyBMTE1DaGFpbih7XG4gICAgICAgIHByb21wdDogcmVmaW5lUHJvbXB0LFxuICAgICAgICBsbG06IHJlZmluZUxMTSA/PyBsbG0sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgUmVmaW5lRG9jdW1lbnRzQ2hhaW4oe1xuICAgICAgICBsbG1DaGFpbixcbiAgICAgICAgcmVmaW5lTExNQ2hhaW4sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIGNoYWluO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COMBINE_PROMPT: () => (/* binding */ COMBINE_PROMPT),\n/* harmony export */   COMBINE_PROMPT_SELECTOR: () => (/* binding */ COMBINE_PROMPT_SELECTOR),\n/* harmony export */   COMBINE_QA_PROMPT_SELECTOR: () => (/* binding */ COMBINE_QA_PROMPT_SELECTOR),\n/* harmony export */   DEFAULT_COMBINE_QA_PROMPT: () => (/* binding */ DEFAULT_COMBINE_QA_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */\n\n\nconst qa_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:`;\nconst DEFAULT_COMBINE_QA_PROMPT = \n/*#__PURE__*/\n_langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(qa_template);\nconst system_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_QA_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst COMBINE_QA_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_COMBINE_QA_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_QA_PROMPT],\n]);\nconst combine_prompt = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n\nQUESTION: Which state/country's law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\n\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\\n\\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\\n\\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\\n\\n11.9 No Third-Party Beneficiaries.\n\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\n=========\nFINAL ANSWER: This Agreement is governed by English law.\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \\n\\nLast year COVID-19 kept us apart. This year we are finally together again. \\n\\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \\n\\nWith a duty to one another to the American people to the Constitution. \\n\\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \\n\\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \\n\\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \\n\\nHe met the Ukrainian people. \\n\\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \\n\\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\n\nContent: And we won’t stop. \\n\\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \\n\\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \\n\\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \\n\\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \\n\\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \\n\\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \\n\\nOfficer Mora was 27 years old. \\n\\nOfficer Rivera was 22. \\n\\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \\n\\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\n\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \\n\\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \\n\\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \\n\\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \\n\\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \\n\\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \\n\\nBut I want you to know that we are going to be okay.\n\nContent: More support for patients and families. \\n\\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \\n\\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \\n\\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \\n\\nA unity agenda for the nation. \\n\\nWe can do this. \\n\\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \\n\\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \\n\\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \\n\\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \\n\\nNow is the hour. \\n\\nOur moment of responsibility. \\n\\nOur test of resolve and conscience, of history itself. \\n\\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \\n\\nWell I know this nation.\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:`;\nconst COMBINE_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(combine_prompt);\nconst system_combine_template = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n----------------\n{summaries}`;\nconst combine_messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_combine_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_COMBINE_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(combine_messages);\nconst COMBINE_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(COMBINE_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_COMBINE_PROMPT],\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/refine_prompts.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHAT_QUESTION_PROMPT: () => (/* binding */ CHAT_QUESTION_PROMPT),\n/* harmony export */   CHAT_REFINE_PROMPT: () => (/* binding */ CHAT_REFINE_PROMPT),\n/* harmony export */   DEFAULT_REFINE_PROMPT: () => (/* binding */ DEFAULT_REFINE_PROMPT),\n/* harmony export */   DEFAULT_REFINE_PROMPT_TMPL: () => (/* binding */ DEFAULT_REFINE_PROMPT_TMPL),\n/* harmony export */   DEFAULT_TEXT_QA_PROMPT: () => (/* binding */ DEFAULT_TEXT_QA_PROMPT),\n/* harmony export */   DEFAULT_TEXT_QA_PROMPT_TMPL: () => (/* binding */ DEFAULT_TEXT_QA_PROMPT_TMPL),\n/* harmony export */   QUESTION_PROMPT_SELECTOR: () => (/* binding */ QUESTION_PROMPT_SELECTOR),\n/* harmony export */   REFINE_PROMPT_SELECTOR: () => (/* binding */ REFINE_PROMPT_SELECTOR)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */\n\n\nconst DEFAULT_REFINE_PROMPT_TMPL = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst DEFAULT_REFINE_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"question\", \"existing_answer\", \"context\"],\n    template: DEFAULT_REFINE_PROMPT_TMPL,\n});\nconst refineTemplate = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.AIMessagePromptTemplate.fromTemplate(\"{existing_answer}\"),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(refineTemplate),\n];\nconst CHAT_REFINE_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst REFINE_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_REFINE_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_REFINE_PROMPT],\n]);\nconst DEFAULT_TEXT_QA_PROMPT_TMPL = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer the question: {question}`;\nconst DEFAULT_TEXT_QA_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"context\", \"question\"],\n    template: DEFAULT_TEXT_QA_PROMPT_TMPL,\n});\nconst chat_qa_prompt_template = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer any questions`;\nconst chat_messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(chat_qa_prompt_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_QUESTION_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(chat_messages);\nconst QUESTION_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_TEXT_QA_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_QUESTION_PROMPT],\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9yZWZpbmVfcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDZ0s7QUFDcEU7QUFDckYsMEVBQTBFO0FBQ2pGLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ08sZ0RBQWdELG1FQUFjO0FBQ3JFO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOERBQThEO0FBQzlELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsK0VBQTBCLGdCQUFnQixTQUFTO0FBQ3JFLGtCQUFrQiw0RUFBdUIsZ0JBQWdCLGdCQUFnQjtBQUN6RSxrQkFBa0IsK0VBQTBCO0FBQzVDO0FBQ087QUFDUCxjQUFjLHVFQUFrQjtBQUN6QjtBQUNQLGtCQUFrQix3RkFBeUI7QUFDM0MsS0FBSywwRUFBVztBQUNoQjtBQUNPO0FBQ1A7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw0RUFBNEUsU0FBUztBQUM5RSxpREFBaUQsbUVBQWM7QUFDdEU7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRkFBMkI7QUFDN0Msa0JBQWtCLCtFQUEwQixnQkFBZ0IsU0FBUztBQUNyRTtBQUNPO0FBQ1AsY0FBYyx1RUFBa0I7QUFDekI7QUFDUCxrQkFBa0Isd0ZBQXlCO0FBQzNDLEtBQUssMEVBQVc7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9yZWZpbmVfcHJvbXB0cy5qcz85ODllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHNwYWNlZC1jb21tZW50ICovXG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSwgQ2hhdFByb21wdFRlbXBsYXRlLCBTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUsIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLCBBSU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IsIGlzQ2hhdE1vZGVsLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZXhhbXBsZV9zZWxlY3RvcnNcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFRklORV9QUk9NUFRfVE1QTCA9IGBUaGUgb3JpZ2luYWwgcXVlc3Rpb24gaXMgYXMgZm9sbG93czoge3F1ZXN0aW9ufVxuV2UgaGF2ZSBwcm92aWRlZCBhbiBleGlzdGluZyBhbnN3ZXI6IHtleGlzdGluZ19hbnN3ZXJ9XG5XZSBoYXZlIHRoZSBvcHBvcnR1bml0eSB0byByZWZpbmUgdGhlIGV4aXN0aW5nIGFuc3dlclxuKG9ubHkgaWYgbmVlZGVkKSB3aXRoIHNvbWUgbW9yZSBjb250ZXh0IGJlbG93LlxuLS0tLS0tLS0tLS0tXG57Y29udGV4dH1cbi0tLS0tLS0tLS0tLVxuR2l2ZW4gdGhlIG5ldyBjb250ZXh0LCByZWZpbmUgdGhlIG9yaWdpbmFsIGFuc3dlciB0byBiZXR0ZXIgYW5zd2VyIHRoZSBxdWVzdGlvbi4gXG5JZiB0aGUgY29udGV4dCBpc24ndCB1c2VmdWwsIHJldHVybiB0aGUgb3JpZ2luYWwgYW5zd2VyLmA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRUZJTkVfUFJPTVBUID0gLyojX19QVVJFX18qLyBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIGlucHV0VmFyaWFibGVzOiBbXCJxdWVzdGlvblwiLCBcImV4aXN0aW5nX2Fuc3dlclwiLCBcImNvbnRleHRcIl0sXG4gICAgdGVtcGxhdGU6IERFRkFVTFRfUkVGSU5FX1BST01QVF9UTVBMLFxufSk7XG5jb25zdCByZWZpbmVUZW1wbGF0ZSA9IGBUaGUgb3JpZ2luYWwgcXVlc3Rpb24gaXMgYXMgZm9sbG93czoge3F1ZXN0aW9ufVxuV2UgaGF2ZSBwcm92aWRlZCBhbiBleGlzdGluZyBhbnN3ZXI6IHtleGlzdGluZ19hbnN3ZXJ9XG5XZSBoYXZlIHRoZSBvcHBvcnR1bml0eSB0byByZWZpbmUgdGhlIGV4aXN0aW5nIGFuc3dlclxuKG9ubHkgaWYgbmVlZGVkKSB3aXRoIHNvbWUgbW9yZSBjb250ZXh0IGJlbG93LlxuLS0tLS0tLS0tLS0tXG57Y29udGV4dH1cbi0tLS0tLS0tLS0tLVxuR2l2ZW4gdGhlIG5ldyBjb250ZXh0LCByZWZpbmUgdGhlIG9yaWdpbmFsIGFuc3dlciB0byBiZXR0ZXIgYW5zd2VyIHRoZSBxdWVzdGlvbi4gXG5JZiB0aGUgY29udGV4dCBpc24ndCB1c2VmdWwsIHJldHVybiB0aGUgb3JpZ2luYWwgYW5zd2VyLmA7XG5jb25zdCBtZXNzYWdlcyA9IFtcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntxdWVzdGlvbn1cIiksXG4gICAgLyojX19QVVJFX18qLyBBSU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoXCJ7ZXhpc3RpbmdfYW5zd2VyfVwiKSxcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShyZWZpbmVUZW1wbGF0ZSksXG5dO1xuZXhwb3J0IGNvbnN0IENIQVRfUkVGSU5FX1BST01QVCA9IFxuLyojX19QVVJFX18qLyBDaGF0UHJvbXB0VGVtcGxhdGUuZnJvbU1lc3NhZ2VzKG1lc3NhZ2VzKTtcbmV4cG9ydCBjb25zdCBSRUZJTkVfUFJPTVBUX1NFTEVDVE9SID0gXG4vKiNfX1BVUkVfXyovIG5ldyBDb25kaXRpb25hbFByb21wdFNlbGVjdG9yKERFRkFVTFRfUkVGSU5FX1BST01QVCwgW1xuICAgIFtpc0NoYXRNb2RlbCwgQ0hBVF9SRUZJTkVfUFJPTVBUXSxcbl0pO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEVYVF9RQV9QUk9NUFRfVE1QTCA9IGBDb250ZXh0IGluZm9ybWF0aW9uIGlzIGJlbG93LiBcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxue2NvbnRleHR9XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkdpdmVuIHRoZSBjb250ZXh0IGluZm9ybWF0aW9uIGFuZCBubyBwcmlvciBrbm93bGVkZ2UsIGFuc3dlciB0aGUgcXVlc3Rpb246IHtxdWVzdGlvbn1gO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEVYVF9RQV9QUk9NUFQgPSAvKiNfX1BVUkVfXyovIG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgaW5wdXRWYXJpYWJsZXM6IFtcImNvbnRleHRcIiwgXCJxdWVzdGlvblwiXSxcbiAgICB0ZW1wbGF0ZTogREVGQVVMVF9URVhUX1FBX1BST01QVF9UTVBMLFxufSk7XG5jb25zdCBjaGF0X3FhX3Byb21wdF90ZW1wbGF0ZSA9IGBDb250ZXh0IGluZm9ybWF0aW9uIGlzIGJlbG93LiBcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxue2NvbnRleHR9XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkdpdmVuIHRoZSBjb250ZXh0IGluZm9ybWF0aW9uIGFuZCBubyBwcmlvciBrbm93bGVkZ2UsIGFuc3dlciBhbnkgcXVlc3Rpb25zYDtcbmNvbnN0IGNoYXRfbWVzc2FnZXMgPSBbXG4gICAgLyojX19QVVJFX18qLyBTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKGNoYXRfcWFfcHJvbXB0X3RlbXBsYXRlKSxcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntxdWVzdGlvbn1cIiksXG5dO1xuZXhwb3J0IGNvbnN0IENIQVRfUVVFU1RJT05fUFJPTVBUID0gXG4vKiNfX1BVUkVfXyovIENoYXRQcm9tcHRUZW1wbGF0ZS5mcm9tTWVzc2FnZXMoY2hhdF9tZXNzYWdlcyk7XG5leHBvcnQgY29uc3QgUVVFU1RJT05fUFJPTVBUX1NFTEVDVE9SID0gXG4vKiNfX1BVUkVfXyovIG5ldyBDb25kaXRpb25hbFByb21wdFNlbGVjdG9yKERFRkFVTFRfVEVYVF9RQV9QUk9NUFQsIFtcbiAgICBbaXNDaGF0TW9kZWwsIENIQVRfUVVFU1RJT05fUFJPTVBUXSxcbl0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js":
/*!********************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_QA_PROMPT: () => (/* binding */ DEFAULT_QA_PROMPT),\n/* harmony export */   QA_PROMPT_SELECTOR: () => (/* binding */ QA_PROMPT_SELECTOR)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */\n\n\nconst DEFAULT_QA_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template: \"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\\n\\n{context}\\n\\nQuestion: {question}\\nHelpful Answer:\",\n    inputVariables: [\"context\", \"question\"],\n});\nconst system_template = `Use the following pieces of context to answer the users question. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst QA_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_QA_PROMPT, [[_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_PROMPT]]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9zdHVmZl9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUN1STtBQUMzQztBQUNyRiw0Q0FBNEMsbUVBQWM7QUFDakUsc0xBQXNMLFFBQVEsZUFBZSxTQUFTO0FBQ3ROO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUMsUUFBUTtBQUNUO0FBQ0Esa0JBQWtCLGdGQUEyQjtBQUM3QyxrQkFBa0IsK0VBQTBCLGdCQUFnQixTQUFTO0FBQ3JFO0FBQ0Esa0NBQWtDLHVFQUFrQjtBQUM3Qyw2Q0FBNkMsd0ZBQXlCLHNCQUFzQiwwRUFBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvcXVlc3Rpb25fYW5zd2VyaW5nL3N0dWZmX3Byb21wdHMuanM/Yjc4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBzcGFjZWQtY29tbWVudCAqL1xuaW1wb3J0IHsgQ2hhdFByb21wdFRlbXBsYXRlLCBTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUsIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLCBQcm9tcHRUZW1wbGF0ZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IsIGlzQ2hhdE1vZGVsLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZXhhbXBsZV9zZWxlY3RvcnNcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1FBX1BST01QVCA9IC8qI19fUFVSRV9fKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZTogXCJVc2UgdGhlIGZvbGxvd2luZyBwaWVjZXMgb2YgY29udGV4dCB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uIGF0IHRoZSBlbmQuIElmIHlvdSBkb24ndCBrbm93IHRoZSBhbnN3ZXIsIGp1c3Qgc2F5IHRoYXQgeW91IGRvbid0IGtub3csIGRvbid0IHRyeSB0byBtYWtlIHVwIGFuIGFuc3dlci5cXG5cXG57Y29udGV4dH1cXG5cXG5RdWVzdGlvbjoge3F1ZXN0aW9ufVxcbkhlbHBmdWwgQW5zd2VyOlwiLFxuICAgIGlucHV0VmFyaWFibGVzOiBbXCJjb250ZXh0XCIsIFwicXVlc3Rpb25cIl0sXG59KTtcbmNvbnN0IHN5c3RlbV90ZW1wbGF0ZSA9IGBVc2UgdGhlIGZvbGxvd2luZyBwaWVjZXMgb2YgY29udGV4dCB0byBhbnN3ZXIgdGhlIHVzZXJzIHF1ZXN0aW9uLiBcbklmIHlvdSBkb24ndCBrbm93IHRoZSBhbnN3ZXIsIGp1c3Qgc2F5IHRoYXQgeW91IGRvbid0IGtub3csIGRvbid0IHRyeSB0byBtYWtlIHVwIGFuIGFuc3dlci5cbi0tLS0tLS0tLS0tLS0tLS1cbntjb250ZXh0fWA7XG5jb25zdCBtZXNzYWdlcyA9IFtcbiAgICAvKiNfX1BVUkVfXyovIFN5c3RlbU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoc3lzdGVtX3RlbXBsYXRlKSxcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntxdWVzdGlvbn1cIiksXG5dO1xuY29uc3QgQ0hBVF9QUk9NUFQgPSAvKiNfX1BVUkVfXyovIENoYXRQcm9tcHRUZW1wbGF0ZS5mcm9tTWVzc2FnZXMobWVzc2FnZXMpO1xuZXhwb3J0IGNvbnN0IFFBX1BST01QVF9TRUxFQ1RPUiA9IC8qI19fUFVSRV9fKi8gbmV3IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IoREVGQVVMVF9RQV9QUk9NUFQsIFtbaXNDaGF0TW9kZWwsIENIQVRfUFJPTVBUXV0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/sequential_chain.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SequentialChain: () => (/* binding */ SequentialChain),\n/* harmony export */   SimpleSequentialChain: () => (/* binding */ SimpleSequentialChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _util_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/set.js */ \"(rsc)/./node_modules/langchain/dist/util/set.js\");\n\n\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */\nclass SequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"SequentialChain\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.union)(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            let missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(chain.inputKeys), availableKeys);\n            if (chain.memory) {\n                missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(missingKeys, new Set(chain.memory.memoryKeys));\n            }\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * @deprecated Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nclass SimpleSequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"SimpleSequentialChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.filter((k) => !chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = (await chain.call({ [chain.inputKeys[0]]: input, signal: values.signal }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/vector_db_qa.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorDBQAChain: () => (/* binding */ VectorDBQAChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n\n\n/**\n * Class that represents a VectorDBQAChain. It extends the `BaseChain`\n * class and implements the `VectorDBQAChainInput` interface. It performs\n * a similarity search using a vector store and combines the search\n * results using a specified combine documents chain.\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/modules/chains/ | createRetrievalChain}\n * Will be removed in 0.2.0\n */\nclass VectorDBQAChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"VectorDBQAChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"vectorstore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.vectorstore = fields.vectorstore;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.k = fields.k ?? this.k;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        const docs = await this.vectorstore.similaritySearch(question, this.k, values.filter, runManager?.getChild(\"vectorstore\"));\n        const inputs = { question, input_documents: docs };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"vector_db_qa\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"vectorstore\" in values)) {\n            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);\n        }\n        const { vectorstore } = values;\n        if (!data.combine_documents_chain) {\n            throw new Error(`VectorDBQAChain must have combine_documents_chain in serialized data`);\n        }\n        return new VectorDBQAChain({\n            combineDocumentsChain: await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(data.combine_documents_chain),\n            k: data.k,\n            vectorstore,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_documents_chain: this.combineDocumentsChain.serialize(),\n            k: this.k,\n        };\n    }\n    /**\n     * Static method that creates a VectorDBQAChain instance from a\n     * BaseLanguageModel and a vector store. It also accepts optional options\n     * to customize the chain.\n     * @param llm The BaseLanguageModel instance.\n     * @param vectorstore The vector store used for similarity search.\n     * @param options Optional options to customize the chain.\n     * @returns A new instance of VectorDBQAChain.\n     */\n    static fromLLM(llm, vectorstore, options) {\n        const qaChain = (0,_question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__.loadQAStuffChain)(llm);\n        return new this({\n            vectorstore,\n            combineDocumentsChain: qaChain,\n            ...options,\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3ZlY3Rvcl9kYl9xYS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFDMEI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPLDhCQUE4QiwrQ0FBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGVBQWU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsK0NBQVM7QUFDbEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkVBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3ZlY3Rvcl9kYl9xYS5qcz8yZTg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDaGFpbiB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmltcG9ydCB7IGxvYWRRQVN0dWZmQ2hhaW4gfSBmcm9tIFwiLi9xdWVzdGlvbl9hbnN3ZXJpbmcvbG9hZC5qc1wiO1xuLyoqXG4gKiBDbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBWZWN0b3JEQlFBQ2hhaW4uIEl0IGV4dGVuZHMgdGhlIGBCYXNlQ2hhaW5gXG4gKiBjbGFzcyBhbmQgaW1wbGVtZW50cyB0aGUgYFZlY3RvckRCUUFDaGFpbklucHV0YCBpbnRlcmZhY2UuIEl0IHBlcmZvcm1zXG4gKiBhIHNpbWlsYXJpdHkgc2VhcmNoIHVzaW5nIGEgdmVjdG9yIHN0b3JlIGFuZCBjb21iaW5lcyB0aGUgc2VhcmNoXG4gKiByZXN1bHRzIHVzaW5nIGEgc3BlY2lmaWVkIGNvbWJpbmUgZG9jdW1lbnRzIGNoYWluLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBTd2l0Y2ggdG8ge0BsaW5rIGh0dHBzOi8vanMubGFuZ2NoYWluLmNvbS9kb2NzL21vZHVsZXMvY2hhaW5zLyB8IGNyZWF0ZVJldHJpZXZhbENoYWlufVxuICogV2lsbCBiZSByZW1vdmVkIGluIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3JEQlFBQ2hhaW4gZXh0ZW5kcyBCYXNlQ2hhaW4ge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJWZWN0b3JEQlFBQ2hhaW5cIjtcbiAgICB9XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmlucHV0S2V5XTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbi5vdXRwdXRLZXlzLmNvbmNhdCh0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cyA/IFtcInNvdXJjZURvY3VtZW50c1wiXSA6IFtdKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDRcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInF1ZXJ5XCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlY3RvcnN0b3JlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbWJpbmVEb2N1bWVudHNDaGFpblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXR1cm5Tb3VyY2VEb2N1bWVudHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZlY3RvcnN0b3JlID0gZmllbGRzLnZlY3RvcnN0b3JlO1xuICAgICAgICB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbiA9IGZpZWxkcy5jb21iaW5lRG9jdW1lbnRzQ2hhaW47XG4gICAgICAgIHRoaXMuaW5wdXRLZXkgPSBmaWVsZHMuaW5wdXRLZXkgPz8gdGhpcy5pbnB1dEtleTtcbiAgICAgICAgdGhpcy5rID0gZmllbGRzLmsgPz8gdGhpcy5rO1xuICAgICAgICB0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cyA9XG4gICAgICAgICAgICBmaWVsZHMucmV0dXJuU291cmNlRG9jdW1lbnRzID8/IHRoaXMucmV0dXJuU291cmNlRG9jdW1lbnRzO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIGFzeW5jIF9jYWxsKHZhbHVlcywgcnVuTWFuYWdlcikge1xuICAgICAgICBpZiAoISh0aGlzLmlucHV0S2V5IGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUXVlc3Rpb24ga2V5ICR7dGhpcy5pbnB1dEtleX0gbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uID0gdmFsdWVzW3RoaXMuaW5wdXRLZXldO1xuICAgICAgICBjb25zdCBkb2NzID0gYXdhaXQgdGhpcy52ZWN0b3JzdG9yZS5zaW1pbGFyaXR5U2VhcmNoKHF1ZXN0aW9uLCB0aGlzLmssIHZhbHVlcy5maWx0ZXIsIHJ1bk1hbmFnZXI/LmdldENoaWxkKFwidmVjdG9yc3RvcmVcIikpO1xuICAgICAgICBjb25zdCBpbnB1dHMgPSB7IHF1ZXN0aW9uLCBpbnB1dF9kb2N1bWVudHM6IGRvY3MgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb21iaW5lRG9jdW1lbnRzQ2hhaW4uY2FsbChpbnB1dHMsIHJ1bk1hbmFnZXI/LmdldENoaWxkKFwiY29tYmluZV9kb2N1bWVudHNcIikpO1xuICAgICAgICBpZiAodGhpcy5yZXR1cm5Tb3VyY2VEb2N1bWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgICAgIHNvdXJjZURvY3VtZW50czogZG9jcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX2NoYWluVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwidmVjdG9yX2RiX3FhXCI7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBkZXNlcmlhbGl6ZShkYXRhLCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKCEoXCJ2ZWN0b3JzdG9yZVwiIGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTmVlZCB0byBwYXNzIGluIGEgdmVjdG9yc3RvcmUgdG8gZGVzZXJpYWxpemUgVmVjdG9yREJRQUNoYWluYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2ZWN0b3JzdG9yZSB9ID0gdmFsdWVzO1xuICAgICAgICBpZiAoIWRhdGEuY29tYmluZV9kb2N1bWVudHNfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmVjdG9yREJRQUNoYWluIG11c3QgaGF2ZSBjb21iaW5lX2RvY3VtZW50c19jaGFpbiBpbiBzZXJpYWxpemVkIGRhdGFgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvckRCUUFDaGFpbih7XG4gICAgICAgICAgICBjb21iaW5lRG9jdW1lbnRzQ2hhaW46IGF3YWl0IEJhc2VDaGFpbi5kZXNlcmlhbGl6ZShkYXRhLmNvbWJpbmVfZG9jdW1lbnRzX2NoYWluKSxcbiAgICAgICAgICAgIGs6IGRhdGEuayxcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX3R5cGU6IHRoaXMuX2NoYWluVHlwZSgpLFxuICAgICAgICAgICAgY29tYmluZV9kb2N1bWVudHNfY2hhaW46IHRoaXMuY29tYmluZURvY3VtZW50c0NoYWluLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgazogdGhpcy5rLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIFZlY3RvckRCUUFDaGFpbiBpbnN0YW5jZSBmcm9tIGFcbiAgICAgKiBCYXNlTGFuZ3VhZ2VNb2RlbCBhbmQgYSB2ZWN0b3Igc3RvcmUuIEl0IGFsc28gYWNjZXB0cyBvcHRpb25hbCBvcHRpb25zXG4gICAgICogdG8gY3VzdG9taXplIHRoZSBjaGFpbi5cbiAgICAgKiBAcGFyYW0gbGxtIFRoZSBCYXNlTGFuZ3VhZ2VNb2RlbCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gdmVjdG9yc3RvcmUgVGhlIHZlY3RvciBzdG9yZSB1c2VkIGZvciBzaW1pbGFyaXR5IHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgY2hhaW4uXG4gICAgICogQHJldHVybnMgQSBuZXcgaW5zdGFuY2Ugb2YgVmVjdG9yREJRQUNoYWluLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTExNKGxsbSwgdmVjdG9yc3RvcmUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcWFDaGFpbiA9IGxvYWRRQVN0dWZmQ2hhaW4obGxtKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHtcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlLFxuICAgICAgICAgICAgY29tYmluZURvY3VtZW50c0NoYWluOiBxYUNoYWluLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeAgent: () => (/* binding */ GenerativeAgent)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _chains_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chains/base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n\n\n\n/**\n * Implementation of a generative agent that can learn and form new memories over\n * time. It extends the BaseChain class, which is a generic\n * sequence of calls to components, including other chains.\n * @example\n * ```typescript\n * const tommie: GenerativeAgent = new GenerativeAgent(\n *   new OpenAI({ temperature: 0.9, maxTokens: 1500 }),\n *   new GenerativeAgentMemory(\n *     new ChatOpenAI(),\n *     new TimeWeightedVectorStoreRetriever({\n *       vectorStore: new MemoryVectorStore(new OpenAIEmbeddings()),\n *       otherScoreKeys: [\"importance\"],\n *       k: 15,\n *     }),\n *     { reflectionThreshold: 8 },\n *   ),\n *   {\n *     name: \"Tommie\",\n *     age: 25,\n *     traits: \"anxious, likes design, talkative\",\n *     status: \"looking for a job\",\n *   },\n * );\n *\n * await tommie.addMemory(\n *   \"Tommie remembers his dog, Bruno, from when he was a kid\",\n *   new Date(),\n * );\n * const summary = await tommie.getSummary({ forceRefresh: true });\n * const response = await tommie.generateDialogueResponse(\n *   \"USER says Hello Tommie, how are you today?\",\n * );\n * ```\n */\nclass GenerativeAgent extends _chains_base_js__WEBPACK_IMPORTED_MODULE_2__.BaseChain {\n    static lc_name() {\n        return \"GenerativeAgent\";\n    }\n    // TODO: Add support for daily summaries\n    // private dailySummaries: string[] = []; // summary of the events in the plan that the agent took.\n    _chainType() {\n        return \"generative_agent_executor\";\n    }\n    get inputKeys() {\n        return [\"observation\", \"suffix\", \"now\"];\n    }\n    get outputKeys() {\n        return [\"output\", \"continue_dialogue\"];\n    }\n    constructor(llm, longTermMemory, config) {\n        super();\n        // a character with memory and innate characterisitics\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the character's name\n        Object.defineProperty(this, \"age\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the optional age of the character\n        Object.defineProperty(this, \"traits\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // permanent traits to ascribe to the character\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the traits of the character you wish not to change\n        Object.defineProperty(this, \"longTermMemory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the underlying language model\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // false\n        Object.defineProperty(this, \"summary\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // stateful self-summary generated via reflection on the character's memory.\n        Object.defineProperty(this, \"summaryRefreshSeconds\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3600\n        });\n        Object.defineProperty(this, \"lastRefreshed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the last time the character's summary was regenerated\n        this.llm = llm;\n        this.longTermMemory = longTermMemory;\n        this.name = config.name;\n        this.age = config.age;\n        this.traits = config.traits;\n        this.status = config.status;\n        this.verbose = config.verbose ?? this.verbose;\n        this.summary = \"\";\n        this.summaryRefreshSeconds =\n            config.summaryRefreshSeconds ?? this.summaryRefreshSeconds;\n        this.lastRefreshed = new Date();\n        // this.dailySummaries = config.dailySummaries ?? this.dailySummaries;\n    }\n    // LLM methods\n    /**\n     * Parses a newline-separated string into a list of strings.\n     * @param text The string to parse.\n     * @returns An array of strings parsed from the input text.\n     */\n    parseList(text) {\n        // parse a newline-seperated string into a list of strings\n        const lines = text.trim().split(\"\\n\");\n        const result = lines.map((line) => line.replace(/^\\s*\\d+\\.\\s*/, \"\").trim());\n        return result;\n    }\n    /**\n     * Creates a new LLMChain with the given prompt and the agent's language\n     * model, verbosity, output key, and memory.\n     * @param prompt The prompt to use for the LLMChain.\n     * @returns A new LLMChain instance.\n     */\n    chain(prompt) {\n        const chain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n            llm: this.llm,\n            prompt,\n            verbose: this.verbose,\n            outputKey: \"output\",\n            memory: this.longTermMemory,\n        });\n        return chain;\n    }\n    /**\n     * Extracts the observed entity from the given observation.\n     * @param observation The observation to extract the entity from.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The extracted entity as a string.\n     */\n    async getEntityFromObservations(observation, runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"What is the observed entity in the following observation? {observation}\" +\n            \"\\nEntity=\");\n        const result = await this.chain(prompt).call({\n            observation,\n        }, runManager?.getChild(\"entity_extractor\"));\n        return result.output;\n    }\n    /**\n     * Extracts the action of the given entity from the given observation.\n     * @param observation The observation to extract the action from.\n     * @param entityName The name of the entity to extract the action for.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The extracted action as a string.\n     */\n    async getEntityAction(observation, entityName, runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"What is the {entity} doing in the following observation? {observation}\" +\n            \"\\nThe {entity} is\");\n        const result = await this.chain(prompt).call({\n            entity: entityName,\n            observation,\n        }, runManager?.getChild(\"entity_action_extractor\"));\n        const trimmedResult = result.output.trim();\n        return trimmedResult;\n    }\n    /**\n     * Summarizes memories that are most relevant to an observation.\n     * @param observation The observation to summarize related memories for.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The summarized memories as a string.\n     */\n    async summarizeRelatedMemories(observation, runManager) {\n        // summarize memories that are most relevant to an observation\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(`\n{q1}?\nContext from memory:\n{relevant_memories}\nRelevant context:`);\n        const entityName = await this.getEntityFromObservations(observation, runManager);\n        const entityAction = await this.getEntityAction(observation, entityName, runManager);\n        const q1 = `What is the relationship between ${this.name} and ${entityName}`;\n        const q2 = `${entityName} is ${entityAction}`;\n        const response = await this.chain(prompt).call({\n            q1,\n            queries: [q1, q2],\n        }, runManager?.getChild(\"entity_relationships\"));\n        return response.output.trim(); // added output\n    }\n    async _call(values, runManager) {\n        const { observation, suffix, now } = values;\n        // react to a given observation or dialogue act\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(`{agent_summary_description}` +\n            `\\nIt is {current_time}.` +\n            `\\n{agent_name}'s status: {agent_status}` +\n            `\\nSummary of relevant context from {agent_name}'s memory:` +\n            \"\\n{relevant_memories}\" +\n            `\\nMost recent observations: {most_recent_memories}` +\n            `\\nObservation: {observation}` +\n            `\\n\\n${suffix}`);\n        const agentSummaryDescription = await this.getSummary({}, runManager); // now = now in param\n        const relevantMemoriesStr = await this.summarizeRelatedMemories(observation, runManager);\n        const currentTime = (now || new Date()).toLocaleString(\"en-US\", {\n            month: \"long\",\n            day: \"numeric\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            hour12: true,\n        });\n        const chainInputs = {\n            agent_summary_description: agentSummaryDescription,\n            current_time: currentTime,\n            agent_name: this.name,\n            observation,\n            agent_status: this.status,\n            most_recent_memories: \"\",\n        };\n        chainInputs[this.longTermMemory.getRelevantMemoriesKey()] =\n            relevantMemoriesStr;\n        const consumedTokens = await this.llm.getNumTokens(await prompt.format({ ...chainInputs }));\n        chainInputs[this.longTermMemory.getMostRecentMemoriesTokenKey()] =\n            consumedTokens;\n        const response = await this.chain(prompt).call(chainInputs, runManager?.getChild(\"reaction_from_summary\"));\n        const rawOutput = response.output;\n        let output = rawOutput;\n        let continue_dialogue = false;\n        if (rawOutput.includes(\"REACT:\")) {\n            const reaction = this._cleanResponse(rawOutput.split(\"REACT:\").pop());\n            await this.addMemory(`${this.name} observed ${observation} and reacted by ${reaction}`, now, {}, runManager?.getChild(\"memory\"));\n            output = `${reaction}`;\n            continue_dialogue = false;\n        }\n        else if (rawOutput.includes(\"SAY:\")) {\n            const saidValue = this._cleanResponse(rawOutput.split(\"SAY:\").pop());\n            await this.addMemory(`${this.name} observed ${observation} and said ${saidValue}`, now, {}, runManager?.getChild(\"memory\"));\n            output = `${this.name} said ${saidValue}`;\n            continue_dialogue = true;\n        }\n        else if (rawOutput.includes(\"GOODBYE:\")) {\n            const farewell = this._cleanResponse(rawOutput.split(\"GOODBYE:\").pop() ?? \"\");\n            await this.addMemory(`${this.name} observed ${observation} and said ${farewell}`, now, {}, runManager?.getChild(\"memory\"));\n            output = `${this.name} said ${farewell}`;\n            continue_dialogue = false;\n        }\n        return { output, continue_dialogue };\n    }\n    _cleanResponse(text) {\n        if (text === undefined) {\n            return \"\";\n        }\n        const regex = new RegExp(`^${this.name} `);\n        return text.replace(regex, \"\").trim();\n    }\n    /**\n     * Generates a reaction to the given observation.\n     * @param observation The observation to generate a reaction for.\n     * @param now Optional current date.\n     * @returns A boolean indicating whether to continue the dialogue and the output string.\n     */\n    async generateReaction(observation, now) {\n        const callToActionTemplate = `Should {agent_name} react to the observation, and if so,` +\n            ` what would be an appropriate reaction? Respond in one line.` +\n            ` If the action is to engage in dialogue, write:\\nSAY: \"what to say\"` +\n            ` \\notherwise, write:\\nREACT: {agent_name}'s reaction (if anything).` +\n            ` \\nEither do nothing, react, or say something but not both.\\n\\n`;\n        const { output, continue_dialogue } = await this.call({\n            observation,\n            suffix: callToActionTemplate,\n            now,\n        });\n        return [continue_dialogue, output];\n    }\n    /**\n     * Generates a dialogue response to the given observation.\n     * @param observation The observation to generate a dialogue response for.\n     * @param now Optional current date.\n     * @returns A boolean indicating whether to continue the dialogue and the output string.\n     */\n    async generateDialogueResponse(observation, now) {\n        const callToActionTemplate = `What would ${this.name} say? To end the conversation, write: GOODBYE: \"what to say\". Otherwise to continue the conversation, write: SAY: \"what to say next\"\\n\\n`;\n        const { output, continue_dialogue } = await this.call({\n            observation,\n            suffix: callToActionTemplate,\n            now,\n        });\n        return [continue_dialogue, output];\n    }\n    // Agent stateful' summary methods\n    // Each dialog or response prompt includes a header\n    // summarizing the agent's self-description. This is\n    // updated periodically through probing it's memories\n    /**\n     * Gets the agent's summary, which includes the agent's name, age, traits,\n     * and a summary of the agent's core characteristics. The summary is\n     * updated periodically through probing the agent's memories.\n     * @param config Optional configuration object with current date and a boolean to force refresh.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The agent's summary as a string.\n     */\n    async getSummary(config, runManager) {\n        const { now = new Date(), forceRefresh = false } = config ?? {};\n        const sinceRefresh = Math.floor((now.getTime() - this.lastRefreshed.getTime()) / 1000);\n        if (!this.summary ||\n            sinceRefresh >= this.summaryRefreshSeconds ||\n            forceRefresh) {\n            this.summary = await this.computeAgentSummary(runManager);\n            this.lastRefreshed = now;\n        }\n        let age;\n        if (this.age) {\n            age = this.age;\n        }\n        else {\n            age = \"N/A\";\n        }\n        return `Name: ${this.name} (age: ${age})\nInnate traits: ${this.traits}\n${this.summary}`;\n    }\n    /**\n     * Computes the agent's summary by summarizing the agent's core\n     * characteristics given the agent's relevant memories.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The computed summary as a string.\n     */\n    async computeAgentSummary(runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"How would you summarize {name}'s core characteristics given the following statements:\\n\" +\n            \"----------\" +\n            \"{relevant_memories}\" +\n            \"----------\" +\n            \"Do not embellish.\" +\n            \"\\n\\nSummary: \");\n        // the agent seeks to think about their core characterisitics\n        const result = await this.chain(prompt).call({\n            name: this.name,\n            queries: [`${this.name}'s core characteristics`],\n        }, runManager?.getChild(\"compute_agent_summary\"));\n        return result.output.trim();\n    }\n    /**\n     * Returns a full header of the agent's status, summary, and current time.\n     * @param config Optional configuration object with current date and a boolean to force refresh.\n     * @returns The full header as a string.\n     */\n    getFullHeader(config = {}) {\n        const { now = new Date(), forceRefresh = false } = config;\n        // return a full header of the agent's status, summary, and current time.\n        const summary = this.getSummary({ now, forceRefresh });\n        const currentTimeString = now.toLocaleString(\"en-US\", {\n            month: \"long\",\n            day: \"numeric\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            hour12: true,\n        });\n        return `${summary}\\nIt is ${currentTimeString}.\\n${this.name}'s status: ${this.status}`;\n    }\n    /**\n     * Adds a memory to the agent's long-term memory.\n     * @param memoryContent The content of the memory to add.\n     * @param now Optional current date.\n     * @param metadata Optional metadata for the memory.\n     * @param callbacks Optional Callbacks instance.\n     * @returns The result of adding the memory to the agent's long-term memory.\n     */\n    async addMemory(memoryContent, now, metadata, callbacks) {\n        return this.longTermMemory.addMemory(memoryContent, now, metadata, callbacks);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeAgentMemory: () => (/* binding */ GenerativeAgentMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/memory */ \"(rsc)/./node_modules/@langchain/core/memory.js\");\n/* harmony import */ var _chains_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chains/base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n\n\n/**\n * Class that manages the memory of a generative agent in LangChain. It\n * extends the `BaseChain` class and has methods for adding observations\n * or memories to the agent's memory, scoring the importance of a memory,\n * reflecting on recent events to add synthesized memories, and generating\n * insights on a topic of reflection based on pertinent memories.\n */\nclass GenerativeAgentMemoryChain extends _chains_base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"GenerativeAgentMemoryChain\";\n    }\n    constructor(llm, memoryRetriever, config) {\n        super();\n        Object.defineProperty(this, \"reflecting\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"reflectionThreshold\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"importanceWeight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.15\n        });\n        Object.defineProperty(this, \"memoryRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"aggregateImportance\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.0\n        });\n        this.llm = llm;\n        this.memoryRetriever = memoryRetriever;\n        this.reflectionThreshold = config.reflectionThreshold;\n        this.importanceWeight = config.importanceWeight ?? this.importanceWeight;\n        this.verbose = config.verbose ?? this.verbose;\n    }\n    _chainType() {\n        return \"generative_agent_memory\";\n    }\n    get inputKeys() {\n        return [\"memory_content\", \"now\", \"memory_metadata\"];\n    }\n    get outputKeys() {\n        return [\"output\"];\n    }\n    /**\n     * Method that creates a new LLMChain with the given prompt.\n     * @param prompt The PromptTemplate to use for the new LLMChain.\n     * @returns A new LLMChain instance.\n     */\n    chain(prompt) {\n        const chain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_4__.LLMChain({\n            llm: this.llm,\n            prompt,\n            verbose: this.verbose,\n            outputKey: \"output\",\n        });\n        return chain;\n    }\n    async _call(values, runManager) {\n        const { memory_content: memoryContent, now } = values;\n        // add an observation or memory to the agent's memory\n        const importanceScore = await this.scoreMemoryImportance(memoryContent, runManager);\n        this.aggregateImportance += importanceScore;\n        const document = new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__.Document({\n            pageContent: memoryContent,\n            metadata: {\n                importance: importanceScore,\n                ...values.memory_metadata,\n            },\n        });\n        await this.memoryRetriever.addDocuments([document]);\n        // after an agent has processed a certain amount of memories (as measured by aggregate importance),\n        // it is time to pause and reflect on recent events to add more synthesized memories to the agent's\n        // memory stream.\n        if (this.reflectionThreshold !== undefined &&\n            this.aggregateImportance > this.reflectionThreshold &&\n            !this.reflecting) {\n            console.log(\"Reflecting on current memories...\");\n            this.reflecting = true;\n            await this.pauseToReflect(now, runManager);\n            this.aggregateImportance = 0.0;\n            this.reflecting = false;\n        }\n        return { output: importanceScore };\n    }\n    /**\n     * Method that pauses the agent to reflect on recent events and generate\n     * new insights.\n     * @param now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for the reflection.\n     * @returns An array of new insights as strings.\n     */\n    async pauseToReflect(now, runManager) {\n        if (this.verbose) {\n            console.log(\"Pausing to reflect...\");\n        }\n        const newInsights = [];\n        const topics = await this.getTopicsOfReflection(50, runManager);\n        for (const topic of topics) {\n            const insights = await this.getInsightsOnTopic(topic, now, runManager);\n            for (const insight of insights) {\n                // add memory\n                await this.call({\n                    memory_content: insight,\n                    now,\n                    memory_metadata: {\n                        source: \"reflection_insight\",\n                    },\n                }, runManager?.getChild(\"reflection_insight_memory\"));\n            }\n            newInsights.push(...insights);\n        }\n        return newInsights;\n    }\n    /**\n     * Method that scores the importance of a given memory.\n     * @param memoryContent The content of the memory to score.\n     * @param runManager The CallbackManagerForChainRun to use for scoring.\n     * @returns The importance score of the memory as a number.\n     */\n    async scoreMemoryImportance(memoryContent, runManager) {\n        // score the absolute importance of a given memory\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"On the scale of 1 to 10, where 1 is purely mundane\" +\n            \" (e.g., brushing teeth, making bed) and 10 is\" +\n            \" extremely poignant (e.g., a break up, college\" +\n            \" acceptance), rate the likely poignancy of the\" +\n            \" following piece of memory. Respond with a single integer.\" +\n            \"\\nMemory: {memory_content}\" +\n            \"\\nRating: \");\n        const score = await this.chain(prompt).run(memoryContent, runManager?.getChild(\"determine_importance\"));\n        const strippedScore = score.trim();\n        if (this.verbose) {\n            console.log(\"Importance score:\", strippedScore);\n        }\n        const match = strippedScore.match(/^\\D*(\\d+)/);\n        if (match) {\n            const capturedNumber = parseFloat(match[1]);\n            const result = (capturedNumber / 10) * this.importanceWeight;\n            return result;\n        }\n        else {\n            return 0.0;\n        }\n    }\n    /**\n     * Method that retrieves the topics of reflection based on the last K\n     * memories.\n     * @param lastK The number of most recent memories to consider for generating topics.\n     * @param runManager The CallbackManagerForChainRun to use for retrieving topics.\n     * @returns An array of topics of reflection as strings.\n     */\n    async getTopicsOfReflection(lastK, runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"{observations}\\n\\n\" +\n            \"Given only the information above, what are the 3 most salient\" +\n            \" high-level questions we can answer about the subjects in\" +\n            \" the statements? Provide each question on a new line.\\n\\n\");\n        const observations = this.memoryRetriever.getMemoryStream().slice(-lastK);\n        const observationStr = observations\n            .map((o) => o.pageContent)\n            .join(\"\\n\");\n        const result = await this.chain(prompt).run(observationStr, runManager?.getChild(\"reflection_topics\"));\n        return GenerativeAgentMemoryChain.parseList(result);\n    }\n    /**\n     * Method that generates insights on a given topic of reflection based on\n     * pertinent memories.\n     * @param topic The topic of reflection.\n     * @param now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for generating insights.\n     * @returns An array of insights as strings.\n     */\n    async getInsightsOnTopic(topic, now, runManager) {\n        // generate insights on a topic of reflection, based on pertinent memories\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"Statements about {topic}\\n\" +\n            \"{related_statements}\\n\\n\" +\n            \"What 5 high-level insights can you infer from the above statements?\" +\n            \" (example format: insight (because of 1, 5, 3))\");\n        const relatedMemories = await this.fetchMemories(topic, now, runManager);\n        const relatedStatements = relatedMemories\n            .map((memory, index) => `${index + 1}. ${memory.pageContent}`)\n            .join(\"\\n\");\n        const result = await this.chain(prompt).call({\n            topic,\n            related_statements: relatedStatements,\n        }, runManager?.getChild(\"reflection_insights\"));\n        return GenerativeAgentMemoryChain.parseList(result.output); // added output\n    }\n    /**\n     * Method that parses a newline-separated string into a list of strings.\n     * @param text The newline-separated string to parse.\n     * @returns An array of strings.\n     */\n    static parseList(text) {\n        // parse a newine seperates string into a list of strings\n        return text.split(\"\\n\").map((s) => s.trim());\n    }\n    // TODO: Mock \"now\" to simulate different times\n    /**\n     * Method that fetches memories related to a given observation.\n     * @param observation The observation to fetch memories for.\n     * @param _now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for fetching memories.\n     * @returns An array of Document instances representing the fetched memories.\n     */\n    async fetchMemories(observation, _now, runManager) {\n        return this.memoryRetriever.getRelevantDocuments(observation, runManager?.getChild(\"memory_retriever\"));\n    }\n}\n/**\n * Class that manages the memory of a generative agent in LangChain. It\n * extends the `BaseMemory` class and has methods for adding a memory,\n * formatting memories, getting memories until a token limit is reached,\n * loading memory variables, saving the context of a model run to memory,\n * and clearing memory contents.\n * @example\n * ```typescript\n * const createNewMemoryRetriever = async () => {\n *   const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n *   const retriever = new TimeWeightedVectorStoreRetriever({\n *     vectorStore,\n *     otherScoreKeys: [\"importance\"],\n *     k: 15,\n *   });\n *   return retriever;\n * };\n * const tommiesMemory = new GenerativeAgentMemory(\n *   llm,\n *   await createNewMemoryRetriever(),\n *   { reflectionThreshold: 8 },\n * );\n * const summary = await tommiesMemory.getSummary();\n * ```\n */\nclass GenerativeAgentMemory extends _langchain_core_memory__WEBPACK_IMPORTED_MODULE_2__.BaseMemory {\n    constructor(llm, memoryRetriever, config) {\n        super();\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"memoryRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reflectionThreshold\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokensLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1200\n        });\n        Object.defineProperty(this, \"queriesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"queries\"\n        });\n        Object.defineProperty(this, \"mostRecentMemoriesTokenKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"recent_memories_token\"\n        });\n        Object.defineProperty(this, \"addMemoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"addMemory\"\n        });\n        Object.defineProperty(this, \"relevantMemoriesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"relevant_memories\"\n        });\n        Object.defineProperty(this, \"relevantMemoriesSimpleKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"relevant_memories_simple\"\n        });\n        Object.defineProperty(this, \"mostRecentMemoriesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"most_recent_memories\"\n        });\n        Object.defineProperty(this, \"nowKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"now\"\n        });\n        Object.defineProperty(this, \"memoryChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llm = llm;\n        this.memoryRetriever = memoryRetriever;\n        this.verbose = config?.verbose ?? this.verbose;\n        this.reflectionThreshold =\n            config?.reflectionThreshold ?? this.reflectionThreshold;\n        this.maxTokensLimit = config?.maxTokensLimit ?? this.maxTokensLimit;\n        this.memoryChain = new GenerativeAgentMemoryChain(llm, memoryRetriever, {\n            reflectionThreshold: config?.reflectionThreshold,\n            importanceWeight: config?.importanceWeight,\n        });\n    }\n    /**\n     * Method that returns the key for relevant memories.\n     * @returns The key for relevant memories as a string.\n     */\n    getRelevantMemoriesKey() {\n        return this.relevantMemoriesKey;\n    }\n    /**\n     * Method that returns the key for the most recent memories token.\n     * @returns The key for the most recent memories token as a string.\n     */\n    getMostRecentMemoriesTokenKey() {\n        return this.mostRecentMemoriesTokenKey;\n    }\n    /**\n     * Method that returns the key for adding a memory.\n     * @returns The key for adding a memory as a string.\n     */\n    getAddMemoryKey() {\n        return this.addMemoryKey;\n    }\n    /**\n     * Method that returns the key for the current time.\n     * @returns The key for the current time as a string.\n     */\n    getCurrentTimeKey() {\n        return this.nowKey;\n    }\n    get memoryKeys() {\n        // Return an array of memory keys\n        return [this.relevantMemoriesKey, this.mostRecentMemoriesKey];\n    }\n    /**\n     * Method that adds a memory to the agent's memory.\n     * @param memoryContent The content of the memory to add.\n     * @param now The current date.\n     * @param metadata The metadata for the memory.\n     * @param callbacks The Callbacks to use for adding the memory.\n     * @returns The result of the memory addition.\n     */\n    async addMemory(memoryContent, now, metadata, callbacks) {\n        return this.memoryChain.call({ memory_content: memoryContent, now, memory_metadata: metadata }, callbacks);\n    }\n    /**\n     * Method that formats the given relevant memories in detail.\n     * @param relevantMemories The relevant memories to format.\n     * @returns The formatted memories as a string.\n     */\n    formatMemoriesDetail(relevantMemories) {\n        if (!relevantMemories.length) {\n            return \"No relevant information.\";\n        }\n        const contentStrings = new Set();\n        const content = [];\n        for (const memory of relevantMemories) {\n            if (memory.pageContent in contentStrings) {\n                continue;\n            }\n            contentStrings.add(memory.pageContent);\n            const createdTime = memory.metadata.created_at.toLocaleString(\"en-US\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n                hour: \"numeric\",\n                minute: \"numeric\",\n                hour12: true,\n            });\n            content.push(`${createdTime}: ${memory.pageContent.trim()}`);\n        }\n        const joinedContent = content.map((mem) => `${mem}`).join(\"\\n\");\n        return joinedContent;\n    }\n    /**\n     * Method that formats the given relevant memories in a simple manner.\n     * @param relevantMemories The relevant memories to format.\n     * @returns The formatted memories as a string.\n     */\n    formatMemoriesSimple(relevantMemories) {\n        const joinedContent = relevantMemories\n            .map((mem) => `${mem.pageContent}`)\n            .join(\"; \");\n        return joinedContent;\n    }\n    /**\n     * Method that retrieves memories until a token limit is reached.\n     * @param consumedTokens The number of tokens consumed so far.\n     * @returns The memories as a string.\n     */\n    async getMemoriesUntilLimit(consumedTokens) {\n        // reduce the number of tokens in the documents\n        const result = [];\n        for (const doc of this.memoryRetriever\n            .getMemoryStream()\n            .slice()\n            .reverse()) {\n            if (consumedTokens >= this.maxTokensLimit) {\n                if (this.verbose) {\n                    console.log(\"Exceeding max tokens for LLM, filtering memories\");\n                }\n                break;\n            }\n            // eslint-disable-next-line no-param-reassign\n            consumedTokens += await this.llm.getNumTokens(doc.pageContent);\n            if (consumedTokens < this.maxTokensLimit) {\n                result.push(doc);\n            }\n        }\n        return this.formatMemoriesSimple(result);\n    }\n    get memoryVariables() {\n        // input keys this memory class will load dynamically\n        return [];\n    }\n    /**\n     * Method that loads memory variables based on the given inputs.\n     * @param inputs The inputs to use for loading memory variables.\n     * @returns An object containing the loaded memory variables.\n     */\n    async loadMemoryVariables(inputs) {\n        const queries = inputs[this.queriesKey];\n        const now = inputs[this.nowKey];\n        if (queries !== undefined) {\n            const relevantMemories = (await Promise.all(queries.map((query) => this.memoryChain.fetchMemories(query, now)))).flat();\n            return {\n                [this.relevantMemoriesKey]: this.formatMemoriesDetail(relevantMemories),\n                [this.relevantMemoriesSimpleKey]: this.formatMemoriesSimple(relevantMemories),\n            };\n        }\n        const mostRecentMemoriesToken = inputs[this.mostRecentMemoriesTokenKey];\n        if (mostRecentMemoriesToken !== undefined) {\n            return {\n                [this.mostRecentMemoriesKey]: await this.getMemoriesUntilLimit(mostRecentMemoriesToken),\n            };\n        }\n        return {};\n    }\n    /**\n     * Method that saves the context of a model run to memory.\n     * @param _inputs The inputs of the model run.\n     * @param outputs The outputs of the model run.\n     * @returns Nothing.\n     */\n    async saveContext(_inputs, outputs) {\n        // save the context of this model run to memory\n        const mem = outputs[this.addMemoryKey];\n        const now = outputs[this.nowKey];\n        if (mem) {\n            await this.addMemory(mem, now, {});\n        }\n    }\n    /**\n     * Method that clears the memory contents.\n     * @returns Nothing.\n     */\n    clear() {\n        // TODO: clear memory contents\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/dist/experimental/generative_agents/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeAgent: () => (/* reexport safe */ _generative_agent_js__WEBPACK_IMPORTED_MODULE_1__.GenerativeAgent),\n/* harmony export */   GenerativeAgentMemory: () => (/* reexport safe */ _generative_agent_memory_js__WEBPACK_IMPORTED_MODULE_0__.GenerativeAgentMemory)\n/* harmony export */ });\n/* harmony import */ var _generative_agent_memory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generative_agent_memory.js */ \"(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js\");\n/* harmony import */ var _generative_agent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generative_agent.js */ \"(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZXhwZXJpbWVudGFsL2dlbmVyYXRpdmVfYWdlbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUU7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9leHBlcmltZW50YWwvZ2VuZXJhdGl2ZV9hZ2VudHMvaW5kZXguanM/NTUyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgfSBmcm9tIFwiLi9nZW5lcmF0aXZlX2FnZW50X21lbW9yeS5qc1wiO1xuZXhwb3J0IHsgR2VuZXJhdGl2ZUFnZW50IH0gZnJvbSBcIi4vZ2VuZXJhdGl2ZV9hZ2VudC5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/experimental/generative_agents/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/noop.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/noop.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoOpOutputParser: () => (/* binding */ NoOpOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * The NoOpOutputParser class is a type of output parser that does not\n * perform any operations on the output. It extends the BaseOutputParser\n * class and is part of the LangChain's output parsers module. This class\n * is useful in scenarios where the raw output of the Large Language\n * Models (LLMs) is required.\n */\nclass NoOpOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"default\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"NoOpOutputParser\";\n    }\n    /**\n     * This method takes a string as input and returns the same string as\n     * output. It does not perform any operations on the input string.\n     * @param text The input string to be parsed.\n     * @returns The same input string without any operations performed on it.\n     */\n    parse(text) {\n        return Promise.resolve(text);\n    }\n    /**\n     * This method returns an empty string. It does not provide any formatting\n     * instructions.\n     * @returns An empty string, indicating no formatting instructions.\n     */\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvbm9vcC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQiw0RUFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9vdXRwdXRfcGFyc2Vycy9ub29wLmpzPzVhN2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU91dHB1dFBhcnNlciB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbi8qKlxuICogVGhlIE5vT3BPdXRwdXRQYXJzZXIgY2xhc3MgaXMgYSB0eXBlIG9mIG91dHB1dCBwYXJzZXIgdGhhdCBkb2VzIG5vdFxuICogcGVyZm9ybSBhbnkgb3BlcmF0aW9ucyBvbiB0aGUgb3V0cHV0LiBJdCBleHRlbmRzIHRoZSBCYXNlT3V0cHV0UGFyc2VyXG4gKiBjbGFzcyBhbmQgaXMgcGFydCBvZiB0aGUgTGFuZ0NoYWluJ3Mgb3V0cHV0IHBhcnNlcnMgbW9kdWxlLiBUaGlzIGNsYXNzXG4gKiBpcyB1c2VmdWwgaW4gc2NlbmFyaW9zIHdoZXJlIHRoZSByYXcgb3V0cHV0IG9mIHRoZSBMYXJnZSBMYW5ndWFnZVxuICogTW9kZWxzIChMTE1zKSBpcyByZXF1aXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vT3BPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcImRlZmF1bHRcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIk5vT3BPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgdGFrZXMgYSBzdHJpbmcgYXMgaW5wdXQgYW5kIHJldHVybnMgdGhlIHNhbWUgc3RyaW5nIGFzXG4gICAgICogb3V0cHV0LiBJdCBkb2VzIG5vdCBwZXJmb3JtIGFueSBvcGVyYXRpb25zIG9uIHRoZSBpbnB1dCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHRleHQgVGhlIGlucHV0IHN0cmluZyB0byBiZSBwYXJzZWQuXG4gICAgICogQHJldHVybnMgVGhlIHNhbWUgaW5wdXQgc3RyaW5nIHdpdGhvdXQgYW55IG9wZXJhdGlvbnMgcGVyZm9ybWVkIG9uIGl0LlxuICAgICAqL1xuICAgIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuIEl0IGRvZXMgbm90IHByb3ZpZGUgYW55IGZvcm1hdHRpbmdcbiAgICAgKiBpbnN0cnVjdGlvbnMuXG4gICAgICogQHJldHVybnMgQW4gZW1wdHkgc3RyaW5nLCBpbmRpY2F0aW5nIG5vIGZvcm1hdHRpbmcgaW5zdHJ1Y3Rpb25zLlxuICAgICAqL1xuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/noop.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/retrievers/time_weighted.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/retrievers/time_weighted.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUFFER_IDX: () => (/* binding */ BUFFER_IDX),\n/* harmony export */   LAST_ACCESSED_AT_KEY: () => (/* binding */ LAST_ACCESSED_AT_KEY),\n/* harmony export */   TimeWeightedVectorStoreRetriever: () => (/* binding */ TimeWeightedVectorStoreRetriever)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_retrievers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/retrievers */ \"(rsc)/./node_modules/@langchain/core/retrievers.js\");\n\nconst LAST_ACCESSED_AT_KEY = \"last_accessed_at\";\nconst BUFFER_IDX = \"buffer_idx\";\n/**\n * TimeWeightedVectorStoreRetriever retrieves documents based on their time-weighted relevance.\n * ref: https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/retrievers/time_weighted_retriever.py\n * @example\n * ```typescript\n * const retriever = new TimeWeightedVectorStoreRetriever({\n *   vectorStore: new MemoryVectorStore(new OpenAIEmbeddings()),\n *   memoryStream: [],\n *   searchKwargs: 2,\n * });\n * await retriever.addDocuments([\n *   { pageContent: \"My name is John.\", metadata: {} },\n *   { pageContent: \"My favourite food is pizza.\", metadata: {} },\n *\n * ]);\n * const results = await retriever.getRelevantDocuments(\n *   \"What is my favourite food?\",\n * );\n * ```\n */\nclass TimeWeightedVectorStoreRetriever extends _langchain_core_retrievers__WEBPACK_IMPORTED_MODULE_0__.BaseRetriever {\n    static lc_name() {\n        return \"TimeWeightedVectorStoreRetriever\";\n    }\n    get lc_namespace() {\n        return [\"langchain\", \"retrievers\", \"time_weighted\"];\n    }\n    /**\n     * Constructor to initialize the required fields\n     * @param fields - The fields required for initializing the TimeWeightedVectorStoreRetriever\n     */\n    constructor(fields) {\n        super(fields);\n        /**\n         * The vectorstore to store documents and determine salience.\n         */\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The number of top K most relevant documents to consider when searching.\n         */\n        Object.defineProperty(this, \"searchKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The memory_stream of documents to search through.\n         */\n        Object.defineProperty(this, \"memoryStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The exponential decay factor used as (1.0-decay_rate)**(hrs_passed).\n         */\n        Object.defineProperty(this, \"decayRate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The maximum number of documents to retrieve in a given call.\n         */\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Other keys in the metadata to factor into the score, e.g. 'importance'.\n         */\n        Object.defineProperty(this, \"otherScoreKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The salience to assign memories not retrieved from the vector store.\n         */\n        Object.defineProperty(this, \"defaultSalience\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = fields.vectorStore;\n        this.searchKwargs = fields.searchKwargs ?? 100;\n        this.memoryStream = fields.memoryStream ?? [];\n        this.decayRate = fields.decayRate ?? 0.01;\n        this.k = fields.k ?? 4;\n        this.otherScoreKeys = fields.otherScoreKeys ?? [];\n        this.defaultSalience = fields.defaultSalience ?? null;\n    }\n    /**\n     * Get the memory stream of documents.\n     * @returns The memory stream of documents.\n     */\n    getMemoryStream() {\n        return this.memoryStream;\n    }\n    /**\n     * Set the memory stream of documents.\n     * @param memoryStream The new memory stream of documents.\n     */\n    setMemoryStream(memoryStream) {\n        this.memoryStream = memoryStream;\n    }\n    /**\n     * Get relevant documents based on time-weighted relevance\n     * @param query - The query to search for\n     * @returns The relevant documents\n     */\n    async _getRelevantDocuments(query, runManager) {\n        const now = Math.floor(Date.now() / 1000);\n        const memoryDocsAndScores = this.getMemoryDocsAndScores();\n        const salientDocsAndScores = await this.getSalientDocuments(query, runManager);\n        const docsAndScores = { ...memoryDocsAndScores, ...salientDocsAndScores };\n        return this.computeResults(docsAndScores, now);\n    }\n    /**\n     * NOTE: When adding documents to a vector store, use addDocuments\n     * via retriever instead of directly to the vector store.\n     * This is because it is necessary to process the document\n     * in prepareDocuments.\n     *\n     * @param docs - The documents to add to vector store in the retriever\n     */\n    async addDocuments(docs) {\n        const now = Math.floor(Date.now() / 1000);\n        const savedDocs = this.prepareDocuments(docs, now);\n        this.memoryStream.push(...savedDocs);\n        await this.vectorStore.addDocuments(savedDocs);\n    }\n    /**\n     * Get memory documents and their scores\n     * @returns An object containing memory documents and their scores\n     */\n    getMemoryDocsAndScores() {\n        const memoryDocsAndScores = {};\n        for (const doc of this.memoryStream.slice(-this.k)) {\n            const bufferIdx = doc.metadata[BUFFER_IDX];\n            if (bufferIdx === undefined) {\n                throw new Error(`Found a document in the vector store that is missing required metadata. This retriever only supports vector stores with documents that have been added through the \"addDocuments\" method on a TimeWeightedVectorStoreRetriever, not directly added or loaded into the backing vector store.`);\n            }\n            memoryDocsAndScores[bufferIdx] = {\n                doc,\n                score: this.defaultSalience ?? 0,\n            };\n        }\n        return memoryDocsAndScores;\n    }\n    /**\n     * Get salient documents and their scores based on the query\n     * @param query - The query to search for\n     * @returns An object containing salient documents and their scores\n     */\n    async getSalientDocuments(query, runManager) {\n        const docAndScores = await this.vectorStore.similaritySearchWithScore(query, this.searchKwargs, undefined, runManager?.getChild());\n        const results = {};\n        for (const [fetchedDoc, score] of docAndScores) {\n            const bufferIdx = fetchedDoc.metadata[BUFFER_IDX];\n            if (bufferIdx === undefined) {\n                throw new Error(`Found a document in the vector store that is missing required metadata. This retriever only supports vector stores with documents that have been added through the \"addDocuments\" method on a TimeWeightedVectorStoreRetriever, not directly added or loaded into the backing vector store.`);\n            }\n            const doc = this.memoryStream[bufferIdx];\n            results[bufferIdx] = { doc, score };\n        }\n        return results;\n    }\n    /**\n     * Compute the final result set of documents based on the combined scores\n     * @param docsAndScores - An object containing documents and their scores\n     * @param now - The current timestamp\n     * @returns The final set of documents\n     */\n    computeResults(docsAndScores, now) {\n        const recordedDocs = Object.values(docsAndScores)\n            .map(({ doc, score }) => ({\n            doc,\n            score: this.getCombinedScore(doc, score, now),\n        }))\n            .sort((a, b) => b.score - a.score);\n        const results = [];\n        for (const { doc } of recordedDocs) {\n            const bufferedDoc = this.memoryStream[doc.metadata[BUFFER_IDX]];\n            bufferedDoc.metadata[LAST_ACCESSED_AT_KEY] = now;\n            results.push(bufferedDoc);\n            if (results.length > this.k) {\n                break;\n            }\n        }\n        return results;\n    }\n    /**\n     * Prepare documents with necessary metadata before saving\n     * @param docs - The documents to prepare\n     * @param now - The current timestamp\n     * @returns The prepared documents\n     */\n    prepareDocuments(docs, now) {\n        return docs.map((doc, i) => ({\n            ...doc,\n            metadata: {\n                ...doc.metadata,\n                [LAST_ACCESSED_AT_KEY]: doc.metadata[LAST_ACCESSED_AT_KEY] ?? now,\n                created_at: doc.metadata.created_at ?? now,\n                [BUFFER_IDX]: this.memoryStream.length + i,\n            },\n        }));\n    }\n    /**\n     * Calculate the combined score based on vector relevance and other factors\n     * @param doc - The document to calculate the score for\n     * @param vectorRelevance - The relevance score from the vector store\n     * @param nowMsec - The current timestamp in milliseconds\n     * @returns The combined score for the document\n     */\n    getCombinedScore(doc, vectorRelevance, nowMsec) {\n        const hoursPassed = this.getHoursPassed(nowMsec, doc.metadata[LAST_ACCESSED_AT_KEY]);\n        let score = (1.0 - this.decayRate) ** hoursPassed;\n        for (const key of this.otherScoreKeys) {\n            score += doc.metadata[key];\n        }\n        if (vectorRelevance !== null) {\n            score += vectorRelevance;\n        }\n        return score;\n    }\n    /**\n     * Calculate the hours passed between two time points\n     * @param time - The current time in seconds\n     * @param refTime - The reference time in seconds\n     * @returns The number of hours passed between the two time points\n     */\n    getHoursPassed(time, refTime) {\n        return (time - refTime) / 3600;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/retrievers/time_weighted.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/stores/doc/base.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/dist/stores/doc/base.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Docstore: () => (/* binding */ Docstore)\n/* harmony export */ });\n/**\n * Abstract class for a document store. All document stores should extend\n * this class.\n */\nclass Docstore {\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL2RvYy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL2RvYy9iYXNlLmpzP2U1YzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyBmb3IgYSBkb2N1bWVudCBzdG9yZS4gQWxsIGRvY3VtZW50IHN0b3JlcyBzaG91bGQgZXh0ZW5kXG4gKiB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgRG9jc3RvcmUge1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/stores/doc/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/stores/doc/in_memory.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/stores/doc/in_memory.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryDocstore: () => (/* binding */ InMemoryDocstore),\n/* harmony export */   SynchronousInMemoryDocstore: () => (/* binding */ SynchronousInMemoryDocstore)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/stores/doc/base.js\");\n\n/**\n * Class for storing and retrieving documents in memory asynchronously.\n * Extends the Docstore class.\n */\nclass InMemoryDocstore extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Docstore {\n    constructor(docs) {\n        super();\n        Object.defineProperty(this, \"_docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._docs = docs ?? new Map();\n    }\n    /**\n     * Searches for a document in the store based on its ID.\n     * @param search The ID of the document to search for.\n     * @returns The document with the given ID.\n     */\n    async search(search) {\n        const result = this._docs.get(search);\n        if (!result) {\n            throw new Error(`ID ${search} not found.`);\n        }\n        else {\n            return result;\n        }\n    }\n    /**\n     * Adds new documents to the store.\n     * @param texts An object where the keys are document IDs and the values are the documents themselves.\n     * @returns Void\n     */\n    async add(texts) {\n        const keys = [...this._docs.keys()];\n        const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n        if (overlapping.length > 0) {\n            throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n        }\n        for (const [key, value] of Object.entries(texts)) {\n            this._docs.set(key, value);\n        }\n    }\n    async mget(keys) {\n        return Promise.all(keys.map((key) => this.search(key)));\n    }\n    async mset(keyValuePairs) {\n        await Promise.all(keyValuePairs.map(([key, value]) => this.add({ [key]: value })));\n    }\n    async mdelete(_keys) {\n        throw new Error(\"Not implemented.\");\n    }\n    // eslint-disable-next-line require-yield\n    async *yieldKeys(_prefix) {\n        throw new Error(\"Not implemented\");\n    }\n}\n/**\n * Class for storing and retrieving documents in memory synchronously.\n */\nclass SynchronousInMemoryDocstore {\n    constructor(docs) {\n        Object.defineProperty(this, \"_docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._docs = docs ?? new Map();\n    }\n    /**\n     * Searches for a document in the store based on its ID.\n     * @param search The ID of the document to search for.\n     * @returns The document with the given ID.\n     */\n    search(search) {\n        const result = this._docs.get(search);\n        if (!result) {\n            throw new Error(`ID ${search} not found.`);\n        }\n        else {\n            return result;\n        }\n    }\n    /**\n     * Adds new documents to the store.\n     * @param texts An object where the keys are document IDs and the values are the documents themselves.\n     * @returns Void\n     */\n    add(texts) {\n        const keys = [...this._docs.keys()];\n        const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n        if (overlapping.length > 0) {\n            throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n        }\n        for (const [key, value] of Object.entries(texts)) {\n            this._docs.set(key, value);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL2RvYy9pbl9tZW1vcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLDhDQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxjQUFjO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9zdG9yZXMvZG9jL2luX21lbW9yeS5qcz82MWNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3N0b3JlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBDbGFzcyBmb3Igc3RvcmluZyBhbmQgcmV0cmlldmluZyBkb2N1bWVudHMgaW4gbWVtb3J5IGFzeW5jaHJvbm91c2x5LlxuICogRXh0ZW5kcyB0aGUgRG9jc3RvcmUgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbk1lbW9yeURvY3N0b3JlIGV4dGVuZHMgRG9jc3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKGRvY3MpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2RvY3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZG9jcyA9IGRvY3MgPz8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3IgYSBkb2N1bWVudCBpbiB0aGUgc3RvcmUgYmFzZWQgb24gaXRzIElELlxuICAgICAqIEBwYXJhbSBzZWFyY2ggVGhlIElEIG9mIHRoZSBkb2N1bWVudCB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBkb2N1bWVudCB3aXRoIHRoZSBnaXZlbiBJRC5cbiAgICAgKi9cbiAgICBhc3luYyBzZWFyY2goc2VhcmNoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RvY3MuZ2V0KHNlYXJjaCk7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElEICR7c2VhcmNofSBub3QgZm91bmQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgbmV3IGRvY3VtZW50cyB0byB0aGUgc3RvcmUuXG4gICAgICogQHBhcmFtIHRleHRzIEFuIG9iamVjdCB3aGVyZSB0aGUga2V5cyBhcmUgZG9jdW1lbnQgSURzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZG9jdW1lbnRzIHRoZW1zZWx2ZXMuXG4gICAgICogQHJldHVybnMgVm9pZFxuICAgICAqL1xuICAgIGFzeW5jIGFkZCh0ZXh0cykge1xuICAgICAgICBjb25zdCBrZXlzID0gWy4uLnRoaXMuX2RvY3Mua2V5cygpXTtcbiAgICAgICAgY29uc3Qgb3ZlcmxhcHBpbmcgPSBPYmplY3Qua2V5cyh0ZXh0cykuZmlsdGVyKCh4KSA9PiBrZXlzLmluY2x1ZGVzKHgpKTtcbiAgICAgICAgaWYgKG92ZXJsYXBwaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gYWRkIGlkcyB0aGF0IGFscmVhZHkgZXhpc3Q6ICR7b3ZlcmxhcHBpbmd9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGV4dHMpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb2NzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBtZ2V0KGtleXMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGtleXMubWFwKChrZXkpID0+IHRoaXMuc2VhcmNoKGtleSkpKTtcbiAgICB9XG4gICAgYXN5bmMgbXNldChrZXlWYWx1ZVBhaXJzKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGtleVZhbHVlUGFpcnMubWFwKChba2V5LCB2YWx1ZV0pID0+IHRoaXMuYWRkKHsgW2tleV06IHZhbHVlIH0pKSk7XG4gICAgfVxuICAgIGFzeW5jIG1kZWxldGUoX2tleXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUteWllbGRcbiAgICBhc3luYyAqeWllbGRLZXlzKF9wcmVmaXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbn1cbi8qKlxuICogQ2xhc3MgZm9yIHN0b3JpbmcgYW5kIHJldHJpZXZpbmcgZG9jdW1lbnRzIGluIG1lbW9yeSBzeW5jaHJvbm91c2x5LlxuICovXG5leHBvcnQgY2xhc3MgU3luY2hyb25vdXNJbk1lbW9yeURvY3N0b3JlIHtcbiAgICBjb25zdHJ1Y3Rvcihkb2NzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9kb2NzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RvY3MgPSBkb2NzID8/IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIGEgZG9jdW1lbnQgaW4gdGhlIHN0b3JlIGJhc2VkIG9uIGl0cyBJRC5cbiAgICAgKiBAcGFyYW0gc2VhcmNoIFRoZSBJRCBvZiB0aGUgZG9jdW1lbnQgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAgICovXG4gICAgc2VhcmNoKHNlYXJjaCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kb2NzLmdldChzZWFyY2gpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJRCAke3NlYXJjaH0gbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIG5ldyBkb2N1bWVudHMgdG8gdGhlIHN0b3JlLlxuICAgICAqIEBwYXJhbSB0ZXh0cyBBbiBvYmplY3Qgd2hlcmUgdGhlIGtleXMgYXJlIGRvY3VtZW50IElEcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGRvY3VtZW50cyB0aGVtc2VsdmVzLlxuICAgICAqIEByZXR1cm5zIFZvaWRcbiAgICAgKi9cbiAgICBhZGQodGV4dHMpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IFsuLi50aGlzLl9kb2NzLmtleXMoKV07XG4gICAgICAgIGNvbnN0IG92ZXJsYXBwaW5nID0gT2JqZWN0LmtleXModGV4dHMpLmZpbHRlcigoeCkgPT4ga2V5cy5pbmNsdWRlcyh4KSk7XG4gICAgICAgIGlmIChvdmVybGFwcGluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIGFkZCBpZHMgdGhhdCBhbHJlYWR5IGV4aXN0OiAke292ZXJsYXBwaW5nfWApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRleHRzKSkge1xuICAgICAgICAgICAgdGhpcy5fZG9jcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/stores/doc/in_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/set.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/util/set.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   union: () => (/* binding */ union)\n/* harmony export */ });\n/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nfunction intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nfunction union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nfunction difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9zZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC91dGlsL3NldC5qcz83N2U4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU291cmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TZXQjaW1wbGVtZW50aW5nX2Jhc2ljX3NldF9vcGVyYXRpb25zXG4gKi9cbi8qKlxuICogcmV0dXJucyBpbnRlcnNlY3Rpb24gb2YgdHdvIHNldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdGlvbihzZXRBLCBzZXRCKSB7XG4gICAgY29uc3QgX2ludGVyc2VjdGlvbiA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgICAgICBpZiAoc2V0QS5oYXMoZWxlbSkpIHtcbiAgICAgICAgICAgIF9pbnRlcnNlY3Rpb24uYWRkKGVsZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfaW50ZXJzZWN0aW9uO1xufVxuLyoqXG4gKiByZXR1cm5zIHVuaW9uIG9mIHR3byBzZXRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmlvbihzZXRBLCBzZXRCKSB7XG4gICAgY29uc3QgX3VuaW9uID0gbmV3IFNldChzZXRBKTtcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgICAgICBfdW5pb24uYWRkKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gX3VuaW9uO1xufVxuLyoqXG4gKiByZXR1cm5zIGRpZmZlcmVuY2Ugb2YgdHdvIHNldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2Uoc2V0QSwgc2V0Qikge1xuICAgIGNvbnN0IF9kaWZmZXJlbmNlID0gbmV3IFNldChzZXRBKTtcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgICAgICBfZGlmZmVyZW5jZS5kZWxldGUoZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBfZGlmZmVyZW5jZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/experimental/generative_agents.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/experimental/generative_agents.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenerativeAgent: () => (/* reexport safe */ _dist_experimental_generative_agents_index_js__WEBPACK_IMPORTED_MODULE_0__.GenerativeAgent),
/* harmony export */   GenerativeAgentMemory: () => (/* reexport safe */ _dist_experimental_generative_agents_index_js__WEBPACK_IMPORTED_MODULE_0__.GenerativeAgentMemory)
/* harmony export */ });
/* harmony import */ var _dist_experimental_generative_agents_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/experimental/generative_agents/index.js */ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/index.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/retrievers/time_weighted.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/retrievers/time_weighted.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BUFFER_IDX: () => (/* reexport safe */ _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__.BUFFER_IDX),
/* harmony export */   LAST_ACCESSED_AT_KEY: () => (/* reexport safe */ _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__.LAST_ACCESSED_AT_KEY),
/* harmony export */   TimeWeightedVectorStoreRetriever: () => (/* reexport safe */ _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__.TimeWeightedVectorStoreRetriever)
/* harmony export */ });
/* harmony import */ var _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/retrievers/time_weighted.js */ "(rsc)/./node_modules/langchain/dist/retrievers/time_weighted.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/stores/doc/in_memory.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/stores/doc/in_memory.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InMemoryDocstore: () => (/* reexport safe */ _dist_stores_doc_in_memory_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryDocstore),
/* harmony export */   SynchronousInMemoryDocstore: () => (/* reexport safe */ _dist_stores_doc_in_memory_js__WEBPACK_IMPORTED_MODULE_0__.SynchronousInMemoryDocstore)
/* harmony export */ });
/* harmony import */ var _dist_stores_doc_in_memory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/stores/doc/in_memory.js */ "(rsc)/./node_modules/langchain/dist/stores/doc/in_memory.js");


/***/ })

};
;