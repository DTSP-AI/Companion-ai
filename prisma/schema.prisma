generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id         String      @id @default(uuid())
  name       String      @unique
  companions Companion[]
}

model Companion {
  id                   String    @id @default(uuid())
  userId               String
  userName             String
  name                 String
  shortDescription     String
  characterDescription Json      // New field to store character_description.json
  categoryId           String
  category             Category  @relation(fields: [categoryId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt
  messages             Message[]

  @@index([categoryId])
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  companionId String
  userId      String
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model UserApiLimit {
  id     String @id @default(uuid())
  userId String @unique
  count  Int    @default(0)
}

enum Role {
  user
  system
}
